openapi: 3.1.0
info:
  version: 2.0.0-oas3.1
  title: 'Lamassu IoT: Device Manager Service'
  description: >-
    At its core, the device manager is the main entry point for the enrollment
    process. It implements the EST protocol that must be used to obtain new
    certificates. On top of that, this service manages the registration of new
    devices and to keep a track of the device status. Similar to the CA service,
    the device manager also schedules a periodic task to check the status of the
    devices. This task is launched once a day to check the status of validity of
    all certificates associated by each device.


    Some useful links:

    - [Lamassu IoT Github repository](https://github.com/lamassuiot/lamassuiot)

    - [Lamassu Iot
    Docs](https://www.lamassu.io/docs/2.0.0/architecture/#device-manager)
security:
  - Oauth2Password: []
tags:
  - name: devices
  - name: stats
paths:
  /devices:
    get:
      tags:
        - devices
      summary: Get All Devices
      description: Get All Devices
      parameters: 
        - name: sort_by
          in: query
          description: Field by which to sort the results.
          required: false
          schema:
            type: string
            example: name
        - name: sort_mode
          in: query
          description: Sort mode, can be 'asc' for ascending or 'desc' for descending.
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: asc
        - name: page_size
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            example: 5
        - name: bookmark
          in: query
          description: Bookmark for pagination.
          required: false
          schema:
            type: string
            example: "bm12345"
        - name: filter
          in: query
          description: |
            Filter criteria. Example format: field[operation]=value.
            Supported operations for string fields: eq (equal), ne (not equal), ct (contains), nc (not contains).
            Supported operations for date fields: bf (before), eq (equal), af (after).
            Supported operations for number fields: eq (equal), ne (not equal), lt (less than), le (less or equal), gt (greater than), ge (greater or equal).
          required: false
          schema:
            type: string
            example: status[eq]=active
      responses:
        '200':
          description: Successful operation. Returns all devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetDevicesResponse'
        '500':
          description: Something went wrong while getting all devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    post:
      tags:
        - devices
      summary: Create a Device
      description: Create a Device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceBody'
      responses:
        '201':
          description: Successful operation. Returns the created device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '500':
          description: Something went wrong while creating device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /devices/{id}:
    get:
      tags:
        - devices
      summary: Get Device by ID
      description: Get Device by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the device to retrieve.
      responses:
        '200':
          description: Successful operation. Returns the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: Something went wrong while getting the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /devices/{id}/idslot:
    put:
      tags:
        - devices
      summary: Update Device by ID Slot
      description: Update Device by ID Slot
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the device to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceIdentitySlotBody'
      responses:
        '200':
          description: Successful operation. Returns the updated device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: Something went wrong while updating device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /devices/{id}/metadata:
    put:
      tags:
        - devices
      summary: Update Device Metadata
      description: Update Device Metadata
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the device to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '200':
          description: Successful operation. Returns the updated device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: Something went wrong while updating device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /devices/{id}/decomission:
    delete:
      tags:
        - devices
      summary: Decomissions a Device
      description: Decomissions a Device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the device to decomission.
      responses:
        '200':
          description: Successful operation. Returns the updated device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: Something went wrong while decomissioning device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /devices/dms/{id}:
    get:
      tags:
        - devices
      summary: Get Devices By DMS
      description: Get Devices By DMS
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the DMS to retrieve devices for.
        - name: sort_by
          in: query
          description: Field by which to sort the results.
          required: false
          schema:
            type: string
            example: name
        - name: sort_mode
          in: query
          description: Sort mode, can be 'asc' for ascending or 'desc' for descending.
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: asc
        - name: page_size
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            example: 5
        - name: bookmark
          in: query
          description: Bookmark for pagination.
          required: false
          schema:
            type: string
            example: "bm12345"
        - name: filter
          in: query
          description: |
            Filter criteria. Example format: field[operation]=value.
            Supported operations for string fields: eq (equal), ne (not equal), ct (contains), nc (not contains).
            Supported operations for date fields: bf (before), eq (equal), af (after).
            Supported operations for number fields: eq (equal), ne (not equal), lt (less than), le (less or equal), gt (greater than), ge (greater or equal).
          required: false
          schema:
            type: string
            example: status[eq]=active
      responses:
        '200':
          description: Successful operation. Returns all devices related to the DMS.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetDevicesResponse'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        '500':
          description: Something went wrong while getting devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /stats:
    get:
      tags:
        - stats
      summary: Get Stats
      description: Get Stats
      responses:
        '200':
          description: Successful operation. Returns the stats.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DevicesStats'
        '500':
          description: Something went wrong while getting stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
components:
  schemas:
    GetDevicesResponse:
      type: object
      properties:
        nextBookmark:
          type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    Device:
      type: object
      properties:
        id:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        icon:
          type: string
        icon_color:
          type: string
        creation_timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        dms_owner:
          type: string
        identity:
          $ref: '#/components/schemas/Slot'
        slots:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Slot'
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeviceEvent'
    CreateDeviceBody:
      type: object
      properties:
        id:
          type: string
        alias:
          type: string
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties:
            type: object
        dms_id:
          type: string
        icon:
          type: string
        icon_color:
          type: string
    UpdateDeviceIdentitySlotBody:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Slot'
    Slot:
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - RENEWAL_PENDING
            - EXPIRING_SOON
            - EXPIRED
            - REVOKED
        active_version:
          type: integer
        type:
          type: string
          enum:
            - TOKEN
            - x509
            - SSH_KEY
            - OTHER
        versions:
          type: object
          additionalProperties: true
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeviceEvent'
    DeviceEvent:
      type: object
      properties:
        type:
          type: string
          enum:
            - CREATED
            - PROVISIONED
            - RE-PROVISIONED
            - RENEWED
            - SHADOW-UPDATED
            - STATUS-UPDATED
            - DECOMMISSIONED
        description:
          type: string
    DevicesStats:
      type: object
      properties:
        total:
          type: integer
        status_distribution:
          $ref: '#/components/schemas/DeviceStatus'
          description: map[DeviceStatus]int
    DeviceStatus:
      type: object
      properties:
        ACTIVE:
          type: integer
        DECOMMISSIONED:
          type: integer
        EXPIRED:
          type: integer
        EXPIRING_SOON:
          type: integer
        NO_IDENTITY:
          type: integer
        RENEWAL_PENDING:
          type: integer
        REVOKED:
          type: integer
      additionalProperties: false
    400Error:
      type: object
      properties:
        message: 
          type: string
          enum:
            - Struct validation error
          example: Struct validation error
    500Error:
      type: object
      properties:
        message: 
          type: string
          enum:
            - Internal Server Error
          example: Internal Server Error
  securitySchemes:
    MTLS:
      type: mutualTLS
    Oauth2Password:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
    NoAuth:
      type: http
      scheme: bearer
          
servers:
  - description: SwaggerHub API Auto Mocking
    url: >-
      https://virtserver.swaggerhub.com/MIKELELOLA003_1/Lamassuiot_DeviceManager/1.0.0
  - description: Local
    url: https://localhost:8443/api/devmanager/v1