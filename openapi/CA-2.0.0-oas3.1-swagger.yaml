openapi: 3.1.0
info:
  version: 2.0.0-oas3.1
  title: 'Lamassu IoT: CA Service'
  description: >-
    The first step to provision devices with digital certificates is to create
    the Certification Authority. The role of a CA is to issue and manage all the
    certificates.


    Some useful links:

    - [Lamassu IoT Github repository](https://github.com/lamassuiot/lamassuiot)

    - [Lamassu Iot
    Docs](https://www.lamassu.io/docs/2.5.3/basic-features/ca-service/)
security:
  - Oauth2: []
  
tags:
  - name: CAs
  - name: certificates
  - name: engines
  - name: stats
paths:
  /cas:
    get:
      tags:
        - CAs
      summary: Get All CAs
      description: Get All CAs
      parameters: 
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns all CAs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCAsResponse'
        '500':
          description: Something went wrong while getting all CAs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    post:
      tags:
        - CAs
      summary: Create CA
      description: Create CA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCABody'
      responses:
        '201':
          description: Successfully created CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
        '400':
          description: >
            Bad Request. Possible error reasons: - Struct validation error - CA
            type inconsistent - Issuance expiration greater than CA expiration -
            Incompatible expiration time ref
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: CA type inconsistent
        '409':
          description: Conflict - CA already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409Error'
              example:
                err: CA already exists
        '500':
          description: Something went wrong while creating a CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/import:
    post:
      tags:
        - CAs
      summary: Import CA
      description: Import CA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCABody'
      responses:
        '201':
          description: Successfully imported CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportCAInput'
        '400':
          description: >
            Bad Request. Possible error reasons: - Struct validation error - CA
            type inconsistent - Issuance expiration greater than CA expiration -
            Incompatible expiration time ref - CA and the provided key don't
            match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: CA type inconsistent
        '500':
          description: Something went wrong while importing CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}:
    get:
      tags:
        - CAs
      summary: Get CA By ID
      description: Get CA By ID
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA to retrieve.
      responses:
        '200':
          description: Successful operation. Returns the CA information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while getting the CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    delete:
      tags:
        - CAs
      summary: Delete CA
      description: Delete CA
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA to delete.
      responses:
        '201':
          description: CA successfully deleted.
          content:
            application/json:
               schema:
                type: object
                properties: {}
        '400':
          description: Struct validation error || CA Status inconsistent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while deleting CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/cn/{cn}:
    get:
      tags:
        - CAs
      summary: Get CAs By Common Name
      description: Get CAs by their common name.
      parameters:
        - $ref: '#/components/parameters/cn'
          description: Common name of the CA(s) to retrieve.
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns the list of CAs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCAsResponse'
        '500':
          description: Something went wrong while getting CAs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/metadata:
    put:
      tags:
        - CAs
      summary: Update CA Metadata
      description: Update CA Metadata
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  type: object
                  additionalProperties: true
                  description: Metadata to update for the CA.
      responses:
        '200':
          description: Successful operation. Returns the CA information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while updating CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/status:
    post:
      tags:
        - CAs
      summary: Update CA Status
      description: Update CA Status
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA to update.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCertificateStatusBody'
      responses:
        '201':
          description: Successful operation. Returns the CA information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while updating CA.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/certificates:
    get:
      tags:
        - CAs
      summary: Get Certificates by CA
      description: Get Certificates by CA
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA certificates to retrieve.
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns the list of CAs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCertificatesResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/certificates/status/{status}:
    get:
      tags:
        - CAs
      summary: Get Certificates by CA and Status
      description: Get Certificates by CA and Status
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA certificates to retrieve.
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns the list of Certificates.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetCertificatesResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/certificates/sign:
    post:
      tags:
        - CAs
      summary: Sign Certificate
      description: Sign Certificate
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA certificate to sign.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingCertificateInput'
      responses:
        '201':
          description: Successful operation. Returns the CA information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACertificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while singing the certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/signature/sign:
    post:
      tags:
        - CAs
      summary: Sign Message
      description: Sign Message
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA used for signing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureSignBody'
      responses:
        '200':
          description: Successful operation. Returns the signed data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while signing message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/signature/verify:
    post:
      tags:
        - CAs
      summary: Verify Signature
      description: Verify Signature
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA to verify.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerifyBody'
      responses:
        '200':
          description: Successful operation. Returns the verification result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: CA not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: CA not found
        '500':
          description: Something went wrong while verifying the signature.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /cas/{id}/certificates/{sn}:
    get:
      tags:
        - CAs
      summary: Get Certificate by Serial Number
      description: Get Certificate by Serial Number
      parameters:
        - $ref: '#/components/parameters/id'
          description: ID of the CA.
        - $ref: '#/components/parameters/sn'
      responses:
        '200':
          description: Successful operation. Returns the Certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: Certificate not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: certificate not found
        '500':
          description: Something went wrong while getting the certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates:
    get:
      tags:
        - certificates
      summary: Get Certificates
      description: Update CA Metadata
      parameters: 
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
        '500':
          description: Something went wrong while getting all certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/status/{status}:
    get:
      tags:
        - certificates
      summary: Get Certificates by Status
      description: Get certificates by status
      parameters:
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns list of Certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCertificatesResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/expiration:
    get:
      tags:
        - certificates
      summary: Get Certificates by Expiration Date
      description: Get Certificates by Expiration Date
      parameters:
        - in: query
          name: expires_after
          schema:
            type: string
            format: date-time
          description: Return certificates expiring after this date (RFC3339 format)
        - in: query
          name: expires_before
          schema:
            type: string
            format: date-time
          description: Return certificates expiring before this date (RFC3339 format)
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/sortModeParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/bookmarkParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: Successful operation. Returns list of Certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCertificatesResponse'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/{sn}:
    get:
      tags:
        - certificates
      summary: Get Certificate by Serial Number
      description: Get Certificate by Serial Number
      parameters:
        - $ref: '#/components/parameters/sn'
      responses:
        '200':
          description: Successful operation. Returns the Certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: Certificate not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: certificate not found
        '500':
          description: Something went wrong while getting the certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/{sn}/status:
    put:
      tags:
        - certificates
      summary: Update Certificate Status
      description: Update Certificate Status
      parameters:
        - $ref: '#/components/parameters/sn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCertificateStatusBody'
      responses:
        '200':
          description: Successful operation. Returns the updated Certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: Certificate not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: certificate not found
        '500':
          description: Something went wrong while updating certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/{sn}/metadata:
    put:
      tags:
        - certificates
      summary: Update Certificate Metadata
      description: Update Certificate Metadata
      parameters:
        - $ref: '#/components/parameters/sn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCertificateMetadataBody'
      responses:
        '200':
          description: Successful operation. Returns the updated Certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '404':
          description: Certificate not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
              example:
                err: certificate not found
        '500':
          description: Something went wrong while updating certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /certificates/import:
    post:
      tags:
        - certificates
      summary: Import Certificate
      description: Import Certificate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCertificateBody'
      responses:
        '201':
          description: Successful operation. Returns the updated Certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '500':
          description: Something went wrong while importing certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /engines:
    get:
      tags:
        - engines
      summary: Get Crypto Engine Provider
      description: Get Crypto Engine Provider
      responses:
        '200':
          description: Successful operation. Returns the crypto engine provider.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CryptoEngineProvider'
        '500':
          description: Something went wrong while getting the crypto engine provider.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /stats:
    get:
      tags:
        - stats
      summary: Get Stats
      description: Get Stats
      responses:
        '200':
          description: Successful operation. Returns the certificate stats.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CAStats'
        '500':
          description: Something went wrong while getting the stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /stats/{id}:
    get:
      tags:
        - stats
      summary: Get Stats by CA ID
      description: Get Stats by CA ID
      parameters:
        - $ref: '#/components/parameters/id'
          description: The ID of the CA
      responses:
        '200':
          description: Successful operation. Returns the Certificates stats.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ACTIVE:
                    type: integer
                  EXPIRED:
                    type: integer
                  REVOKED:
                    type: integer
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: struct validation error
        '500':
          description: Something went wrong while getting stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
components:
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: Field by which to sort the results.
      required: false
      schema:
        type: string
        example: name
    sortModeParam:
      name: sort_mode
      in: query
      description: Sort mode, can be 'asc' for ascending or 'desc' for descending.
      required: false
      schema:
        type: string
        enum: [asc, desc]
        example: asc
    pageSizeParam:
      name: page_size
      in: query
      description: Number of items per page.
      required: false
      schema:
        type: integer
        example: 5
    bookmarkParam:
      name: bookmark
      in: query
      description: Bookmark for pagination.
      required: false
      schema:
        type: string
        example: "bm12345"
    filterParam:
      name: filter
      in: query
      description: |
        Filter criteria. Example format: field[operation]=value.
        Supported operations for string fields: eq (equal), ne (not equal), ct (contains), nc (not contains).
        Supported operations for date fields: bf (before), eq (equal), af (after).
        Supported operations for number fields: eq (equal), ne (not equal), lt (less than), le (less or equal), gt (greater than), ge (greater or equal).
      required: false
      schema:
        type: string
        example: status[eq]=active
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
    cn:
      in: path
      name: cn
      required: true
      schema:
        type: string
    status:
      name: status
      required: true
      schema:
        type: string
      description: Status of the certificates to retrieve
    sn:
      in: path
      name: sn
      required: true
      schema:
        type: string
      description: Serial number of the certificate
  schemas:
    GetCAsResponse:
      type: object
      properties:
        next:
          type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/CACertificate'
    GetCertificatesResponse:
      type: object
      properties:
        next:
          type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
    Certificate:
      type: object
      properties:
        serial_number:
          type: string
        issuer_metadata:
          $ref: '#/components/schemas/IssuerCAMetadata'
        status:
          $ref: '#/components/schemas/CertificateStatus'
        certificate:
          type: string
          example: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdyVENDQkpXZ0F3SUJBZ0lRRGlHdHRrcnAvUDZSd2h3L044bDZCakFOQmdrcWhraUc5dzBCQVFzRkFEQncKTVJFd0R3WURWUVFHREFnOGMzUnlhVzVuUGpFUk1BOEdBMVVFQ0F3SVBITjBjbWx1Wno0eEVUQVBCZ05WQkFjTQpDRHh6ZEhKcGJtYytNUkV3RHdZRFZRUUtEQWc4YzNSeWFXNW5QakVSTUE4R0ExVUVDd3dJUEhOMGNtbHVaejR4CkR6QU5CZ05WQkFNVEJuQnlkV1ZpWVRBZUZ3MHlOREEyTVRjd056QTBOREZhRncweU5UQTBNVE13TnpBME16bGEKTUhBeEVUQVBCZ05WQkFZTUNEeHpkSEpwYm1jK01SRXdEd1lEVlFRSURBZzhjM1J5YVc1blBqRVJNQThHQTFVRQpCd3dJUEhOMGNtbHVaejR4RVRBUEJnTlZCQW9NQ0R4emRISnBibWMrTVJFd0R3WURWUVFMREFnOGMzUnlhVzVuClBqRVBNQTBHQTFVRUF4TUdjSEoxWldKaE1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0MKQWdFQTN1ZVZOMDljVE4vUUljRnBTV3hkN3JxNGFKSmRva0xqb2dGNklsUmkzbGNrUEhiYWZxZG04Z2c4YVpVaQo3SDhyRVJuRHdVWVViSUgzTzNSSlZ3MHhzdjV4YVZzM2M1VGdYb2JtNG90cDZhT2JST25RcmEwVWpISk8zRytECkJQRnVRci96OHlQSGxhVkpJNklWM3JlWW5sNEFkY09yZkJoRzVDaDJuTDdUcmdiNnJHdVhiMmRyYmlhRHE3ZDAKcW9UK1Y4MWlyQ2JHUnZEU1g2bWZNRm1INDNKYW9ZdnYveDh0SUk1dzVmNXFHU3k4S2U2ekRnOFoyZktSWUtJNwpTQmpFc0hRUGIxZXZidnhvRWRiRHgwOW5VSHBxSHR2bnNwMmdDWEdydGxsb1pMV0RYMGZ1Nmo2a1E2aWpnWXEvCnA2Q1FMTG4xYmdoREVlVDlmOGp4YVhlWHNlRWFaTS9laVpROHVPbVV1dzBTZVZ0UWhvWllmanZyNlNLRjhxUkYKbkRxbnlqMXo5RlZnTkdiall5NlpmMTVoMmw4bE1tQ0s4WUN5V1BmMk4rMWlXcHBnejh0QUxWOCtWb3VhZXNPSwp6MytDZGVUWWxWdzQ0QmNuc0dKN1dFZjluMEdteGs4VHp3OXNUQmYyZWVQaXp3K2NScSt6ekV4NHJ1dUlRc3JoCnRtVTQxMm83TUplaXh0RnN2N3pGUEN0L0lNMGg2Umx0ZGlwREJvOE4wYVl2N1pzVzdVM2hDajJXaWEzclg5TDMKM0JwTVQ2RDlwbGZFZXF2V0ZMQjBEcWFPS0s0dndyVmNYcnB1bm0wZnlic0NwaURCRGJvaUxYeE1CdDYxb2p3QQpvSklKNDVJTnIrWkd2cG5IS0s0SncydnpMVkl3MU5DYzhBa01RcDRmTm9ZZlhVRUNBd0VBQWFPQ0FVRXdnZ0U5Ck1BNEdBMVVkRHdFQi93UUVBd0lCbGpBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFnWUlLd1lCQlFVSEF3RXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekF0QmdOVkhRNEVKZ1FrWVRkaU1EZzFOMll0TW1KaU5TMDBNREV6TFRneQpabVF0TURoaU9EUmlabUk0WTJGaE1DOEdBMVVkSXdRb01DYUFKR0UzWWpBNE5UZG1MVEppWWpVdE5EQXhNeTA0Ck1tWmtMVEE0WWpnMFltWmlPR05oWVRCQUJnZ3JCZ0VGQlFjQkFRUTBNREl3TUFZSUt3WUJCUVVITUFHR0pHaDAKZEhCek9pOHZaR1YyTG14aGJXRnpjM1V1ZEdWemRDOWhjR2t2ZG1FdmIyTnpjREJaQmdOVkhSOEVVakJRTUU2ZwpUS0JLaGtob2RIUndjem92TDJSbGRpNXNZVzFoYzNOMUxuUmxjM1F2WVhCcEwzWmhMMk55YkM5aE4ySXdPRFUzClppMHlZbUkxTFRRd01UTXRPREptWkMwd09HSTROR0ptWWpoallXRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUIKQUpwcUxOMWNXcDlKclJZL21Vcmx0dEFERlJ3a2o5YmlkbDJITVVDeVJCaDA0bFhVWnREaDdaUkFYRUlZY3R4bgppeU56eDY5MXZIVGtBMUt0YW05TUc3TzNCS3I4bk1QZjM3VE1ZTDJtOENRZFU2STZqRUFrUktBZVZqL0p5TGVSClVDSmpzcVdOYVpuYmV0a3FHRk5qbktiU0NOSm1uQ2VMeUVHSk1ScncvWTQyZlp0NE5DYXltM1ZlODRlekl2MGUKOFpmbFVhWEgrckNpYVZ5cHY5S3BudUpCZWRsOVdDUlJ3TTR0ZGs5bmJNbmcreGZLMnZuMkRWNmhKellKME1jWApmYUlnRDU1MFdwQmt0N0JBbWhNd0VWQkNKWWhQNmw3cjhjaVRtdTdRMWJhZ1VwY0tWY002cTNaVitHdUNyaStpCmhqOFQzY1Job2RNUmdrZHpFZ2dzSkRhL2NwWVVwOFpTU0RQTWk5V3FVaWY4Mm56dFJiakRmc3MwRnV4T04yWTYKZlFMTWpZZFhXVW0xTzk5Qkw5TnJtYkVldG5sY08zTDRlYk9NdXRGUDV1YlV1MXZNUjF6VURnM2x6VFA2Wk1BcApyV0hxUi9IU1NxVlRuTnMrUnNsb2UvV0g5cUhFVGlFMFNBaEx0d3EvUzZDRzZKVm91TWd3VVFHdEJLQllDSGxKCkZ5OU1ldXdJL2t3NXZGTGJRTXpSc01tT3dFeFN4VHhMU1lkczBqZm84OU1VZGFCQWdrTEJTc2VpQ0I4cFBoMCsKMEFrRW5GbEVoYjJpTktLZ1F6cGN4NTBleHN3aktyVXdWck9BUTFQRnpXYlFOVWdtc2dCVmpmZDZ3N2hMQ3FyLwo5M3NTUzduSXh6V1lSRjVnYW8vb21QVlYxeUVRaWk4TFoybk5zbHMweXA3eQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg="
        key_metadata:
          $ref: '#/components/schemas/KeyStrengthMetadata'
        subject:
          $ref: '#/components/schemas/Subject'
        valid_from:
          type: string
          format: date-time
        valid_to:
          type: string
          format: date-time
        revocation_timestamp:
          type: string
          format: date-time
        revocation_reason:
          $ref: '#/components/schemas/RevocationReason'
        type:
          $ref: '#/components/schemas/CertificateType'
        engine_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
          example: {}
    CACertificate:
      allOf:
        - $ref: '#/components/schemas/Certificate'
        - type: object
          properties:
            id:
              type: string
              example: "d9329907-14a0-4973-bca5-d87b2f849c6g"
            issuance_expiration:
              $ref: '#/components/schemas/Expiration'
            creation_ts:
              type: string
              format: date-time
            level:
              type: integer
          required:
            - id
    IssuerCAMetadata:
      type: object
      properties:
        serial_number:
          type: string
        id:
          type: string
        level:
          type: integer
    KeyMetadata:
      type: object
      properties:
        type:
          type: string
          enum:
            - UnknownPublicKeyAlgorithm
            - RSA
            - DSA
            - ECDSA
            - Ed25519
        bits:
          type: integer
    KeyStrengthMetadata:
      allOf:
        - $ref: '#/components/schemas/KeyMetadata'
        - type: object
      properties:
        key_strength:
          type: string
          enum:
            - HIGH
            - MEDIUM
            - LOW
    Subject:
      type: object
      properties:
        common_name:
          type: string
        organization:
          type: string
        organization_unit:
          type: string
        country:
          type: string
        state:
          type: string
        locality:
          type: string
    Expiration:
      type: object
      properties:
        type:
          type: string
          enum:
            - Duration
            - Time
        duration:
          type: integer
        time:
          type: string
          format: date-time
    CreateCABody:
      type: object
      properties:
        parent_id:
          type: string
        id:
          type: string
        key_metadata:
          $ref: '#/components/schemas/KeyMetadata'
        subject:
          $ref: '#/components/schemas/Subject'
        ca_expiration:
          $ref: '#/components/schemas/Expiration'
        issuance_expiration:
          $ref: '#/components/schemas/Expiration'
        engine_id:
          type: string
        metadata:
          type: object
          additionalProperties: true
      required:
        - key_metadata
        - ca_expiration
        - issuance_expiration
    ImportCA:
      type: object
      properties:
        id:
          type: string
        engine_id:
          type: string
        parent_id:
          type: string
    ImportCABody:
      type: object
      properties:
        id:
          type: string
        engine_id:
          type: string
        parent_id:
          type: string
        ca_private_key:
          type: string
          description: Base64 encoded private key from PEM
        ca_certificate:
          type: string
          example:
            "MHCCAQEEIOUXa254YMYXWksCADpHFdJ+ly+nrQFsa0ozEuTZXmP50AoGCCqGSM49AwEHOUQDQgAEuLp+SvdUZJTXqCHivs3BpwfkKSAZ19ug9590zn7Hec2dLZj1tPG6uywNx1FjrBpX2j6DBnyp1owBUYOY1RVWtw=="
        ca_chain:
          type: array
          items:
            type: string
        type:
          $ref: '#/components/schemas/CertificateType'
        issuance_expiration:
          $ref: '#/components/schemas/Expiration'
      required:
        - id
        - parent_id
        - ca_private_key
        - ca_certificate
        - issuance_expiration
    CertificateType:
      type: string
      enum:
        - MANAGED
        - IMPORTED
        - EXTERNAL
    ImportCAInput:
      type: object
      properties:
        id:
          type: string
        ca_type:
          $ref: '#/components/schemas/CertificateType'
        issuance_expiration:
          $ref: '#/components/schemas/Expiration'
        ca_certificate:
          type: string
          exmple:
            "lwcoluyVN3Sg25qIVdgzUUq61Rav+IEc8krsmWC8J/mxMyjTfkdr7thVatZCUhmQtdasbQh6esWHKTa/5t+EzRBa8HGVUWkvQWfLT8O0UpvcKFEI81yyCz2CmzOvY+izesf+SlWwjGmcu/ouTynRiJSje0qhSVRGwSydyHgBv41zip2i36P1Cc+/XI9StrFBOslecYhvXgRVGIxgapZ5m/j9Mu7l7Qiqjxn6LIqlZdoxcbfeqVYln3+ukYHZpNOjLkPO65d7SytBKVC2XSJn4BaSdEQqqn+zGmvOTb5Pc/JIKO2zoEfTnGie/vlEz5aQczaNEBG+dDK+y+FlA97Yzq04Laa70OpXnDLj/mqwg1bl0yi/bgum1J6f8ISroEmMsxNBDOYhjmQV7przHFO8Ik4P5iPQNMqGAGQIQfcFH5gV6/J+c+oE11tXayfdGdf1DrSkUvnVHqv+LfAhG5Y/07dH/OmXb7fCzvnk1VuuDc7OV1iHolvQYW5LvmUuJbsrdW6n39vmG5eM2F5/K9cO2/CdvHLOJadSxYH2enDlWmn/yht2OWudEKxQEgNgk8uqb8zdBbhRKolJxSW49xzjFQ2S0Ma+E117m9foPHeRYCi76OPk4AxL0nG1CWQfXNgCbsLy6LAhUxyTvyVg+5syRkhQM+VU0jNjyst4gMr0q4A="
        ca_chain:
          type: array
          items:
            type: string
          description: >
            Parent CAs. They MUST be sorted as follows: 0: Root-CA; 1:
            Subordinate CA from Root-CA; ...
        ca_rsa_key:
          $ref: '#/components/schemas/RSAKey'
        ca_ec_key:
          $ref: '#/components/schemas/ECDSAKey'
        key_type:
          type: string
        engine_id:
          type: string
        parent_id:
          type: string
      required:
        - ca_type
        - issuance_expiration
        - ca_certificate
    RSAKey:
      allOf:
        - $ref: '#/components/schemas/ECDSAKey'
        - type: object
      properties:
        primes:
          type: array
          items:
            type: string
          description: >-
            Prime factors of N, has >= 2 elements, represented as a base-10
            string to handle large integer
        precomputed:
            $ref: '#/components/schemas/PrecomputedValues'
    ECDSAKey:
      type: object
      properties:
        public_key:
          $ref: '#/components/schemas/PublicKey'
        D:
          type: string
          description: Represented as a base-10 string to handle large integers
    PublicKey:
      type: object
      properties:
        N:
          type: string
          description: Modulus, represented as a base-10 string to handle large integers
        E:
          type: integer
          description: Public exponent
    PrecomputedValues:
      type: object
      properties:
        Dp:
          type: string
          description: >
            D mod (P-1) (or mod Q-1), represented as a base-10 string to handle
            large integers
        Dq:
          type: string
          description: >
            D mod (Q-1), represented as a base-10 string to handle large
            integers
        Qinv:
          type: string
          description: |
            Q^-1 mod P, represented as a base-10 string to handle large integers
        n:
          $ref: '#/components/schemas/Modulus'
        p:
          $ref: '#/components/schemas/Modulus'
        q:
          $ref: '#/components/schemas/Modulus'
    Modulus:
      type: object
      properties:
        nat:
          type: string
          description: >
            The underlying natural number for this modulus, represented as a
            base-10 string to handle large integers.
        leading:
          type: integer
          description: Number of leading zeros in the modulus.
        m0inv:
          type: integer
          description: '-nat.limbs[0]⁻¹ mod _W.'
        rr:
          type: string
          description: >
            R*R for Montgomery representation, represented as a base-10 string
            to handle large integers.
    UpdateCertificateStatusBody:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CertificateStatus'
        revocation_reason:
          $ref: '#/components/schemas/RevocationReason'
    CertificateStatus:
      type: string
      enum:
        - ACTIVE
        - EXPIRED
        - REVOKED
    RevocationReason:
      type: string
      enum:
        - Unspecified
        - KeyCompromise
        - CACompromise
        - AffiliationChanged
        - Superseded
        - CessationOfOperation
        - CertificateHold
        - RemoveFromCRL
        - PrivilegeWithdrawn
        - AACompromise
    SingCertificateInput:
      type: object
      required:
        - CAID
        - CertRequest
      properties:
        CAID:
          type: string
        cert_request:
          $ref: '#/components/schemas/X509CertificateRequest'
        subject:
          $ref: '#/components/schemas/Subject'
        sign_verbatim:
          type: boolean
    X509CertificateRequest:
      type: object
      properties:
        raw:
          type: string
          format: byte
          description: Complete ASN.1 DER content (CSR, signature algorithm and signature)
        raw_tbs_certificate_request:
          type: string
          format: byte
          description: Certificate request info part of raw ASN.1 DER content
        raw_subject_public_key_info:
          type: string
          format: byte
          description: DER encoded SubjectPublicKeyInfo
        raw_subject:
          type: string
          format: byte
          description: DER encoded Subject
        version:
          type: integer
          description: Version of the certificate request
        signature:
          type: string
          format: byte
          description: Signature of the certificate request
        signature_algorithm:
          type: integer
          description: Algorithm used for the signature
        public_key_algorithm:
          type: integer
          description: Algorithm used for the public key
        public_key:
          type: object
          description: Public key information
        subject:
          $ref: '#/components/schemas/pkixName'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValueSET'
          description: CSR attributes
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/pkixExtension'
          description: All requested extensions, in raw form
        extra_extensions:
          type: array
          items:
            $ref: '#/components/schemas/pkixExtension'
          description: >-
            Extensions to be copied raw into any CSR marshaled by
            CreateCertificateRequest
        dns_names:
          type: array
          items:
            type: string
          description: Subject Alternate Name values for DNS names
        email_addresses:
          type: array
          items:
            type: string
          description: Subject Alternate Name values for email addresses
        ip_addresses:
          type: array
          items:
            type: string
            format: byte
          description: Subject Alternate Name values for IP addresses
        uris:
          type: array
          items:
            $ref: '#/components/schemas/URL'
          description: Subject Alternate Name values for URIs
    pkixName:
      type: object
      properties:
        country:
          type: array
          items:
            type: string
        organization:
          type: array
          items:
            type: string
        organizational_unit:
          type: array
          items:
            type: string
        locality:
          type: array
          items:
            type: string
        province:
          type: array
          items:
            type: string
        street_address:
          type: array
          items:
            type: string
        postal_code:
          type: array
          items:
            type: string
        serial_number:
          type: string
          example: "06-6c-9f-cf-99-bf-8c-0a-39-e2-f0-78-8a-42-e6-96-36-5b-ca"
        common_name:
          type: string
        names:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: All parsed attributes
        extra_names:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: Attributes to be copied raw into any marshaled distinguished names
    pkixAttributeTypeAndValue:
      type: object
      properties:
        type:
          type: array
          items:
            type: integer
        value:
          type: object
    pkixAttributeTypeAndValueSET:
      type: object
      properties:
        type:
          type: array
          items:
            type: integer
          description: ASN.1 Object Identifier
        value:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: A set of sets of AttributeTypeAndValue
    pkixExtension:
      type: object
      properties:
        id:
          type: array
          items:
            type: integer
        critical:
          type: boolean
        value:
          type: string
          format: byte
    URL:
      type: object
      properties:
        scheme:
          type: string
        opaque:
          type: string
          description: Encoded opaque data
        user:
          $ref: '#/components/schemas/UserInfo'
        host:
          type: string
          description: Host or host:port
        path:
          type: string
          description: Path (relative paths may omit leading slash)
        raw_path:
          type: string
          description: Encoded path hint
        omit_host:
          type: boolean
          description: Do not emit empty host (authority)
        force_query:
          type: boolean
          description: Append a query ('?') even if RawQuery is empty
        raw_query:
          type: string
          description: Encoded query values, without '?'
        fragment:
          type: string
          description: Fragment for references, without '#'
        raw_fragment:
          type: string
          description: Encoded fragment hint
    UserInfo:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        password_set:
          type: boolean
    SignatureSignBody:
      type: object
      properties:
        message:
          type: string
          description: "base64 encoded message"
        message_type:
          type: string
          enum:
            - hash
            - raw
        signature_algorithm:
          type: string
          example: "RSASSA_PSS_SHA_256"
      required:
        - message_type
        - signature_algorithm
    SignResponse:
      type: object
      properties:
        signed_data:
          type: string
          format: byte
          example: "kRk0621HqEHfh+0HW9UMmrcCehHyhWGB23Glsklqjt33R90zOHvAAzvRb7K55ACS9Fv/1vZ7Tgsg8MFjyX6q2hjTS/bfCQh0MMsVkz8HruKVWHIk54O2PG0oCg3fCGh8sMfhj+aX0m1pyN+Pe1+nfztZzCKyXkVpGEy+4Zjw5PoZSogsB7Er6/OyACXIrO3SAnj7YDlvfSLuNYjLvXC04W9rrAhnJpVFVoXI6F57JG7pq/OWtOfE5USy0FZt8LDA2vPHRIQEMCn5xJfZG8mujSjU6i3SN6WAdImUlVTQ8xz6ynV+5bHJfUnQdM7Rx8Qb0UeEtFY8/GG4YUD0B29JqtzMKoOlrTiizW5Y74PdIVRSweJEH0DzXD4WKzy34/aEy/RpXaKIdAj+GoiGs4ccar9FHg+781A90iWx7m3SGS7VRjjduGw5h9afCIumNYkMxSiHAZib7c0pa5lx95sumTAarlz35wbd1IdkQYdAoCRIWpoQdrI6dhvCk1lxoIg27Y+grzLKwXd5UYnRNBwcp30BK65zRLcpkZIcpRrbN4v2e+Oklypj5oOXtMN/zg8vEVAyzFDPE+oq8CAsD1ItHOVlQ9548UPca8jJFo+az/DHj1r2cM2AoqNzhmjVk99S9y8GICtwHH3LHIPezrFe5xqyjbiT9547/NniDUKe6Pc="
    SignatureVerifyBody:
      allOf:
        - $ref: '#/components/schemas/SignatureSignBody'
        - type: object
      properties:
        signature:
          type: string
          example:
            "lwcoluyVN3Sg25qIVdgzUUq61Rav+IEc8krsmWC8J/mxMyjTfkdr7thVatZCUhmQtdasbQh6esWHKTa/5t+EzRBa8HGVUWkvQWfLT8O0UpvcKFEI81yyCz2CmzOvY+izesf+SlWwjGmcu/ouTynRiJSje0qhSVRGwSydyHgBv41zip2i36P1Cc+/XI9StrFBOslecYhvXgRVGIxgapZ5m/j9Mu7l7Qiqjxn6LIqlZdoxcbfeqVYln3+ukYHZpNOjLkPO65d7SytBKVC2XSJn4BaSdEQqqn+zGmvOTb5Pc/JIKO2zoEfTnGie/vlEz5aQczaNEBG+dDK+y+FlA97Yzq04Laa70OpXnDLj/mqwg1bl0yi/bgum1J6f8ISroEmMsxNBDOYhjmQV7przHFO8Ik4P5iPQNMqGAGQIQfcFH5gV6/J+c+oE11tXayfdGdf1DrSkUvnVHqv+LfAhG5Y/07dH/OmXb7fCzvnk1VuuDc7OV1iHolvQYW5LvmUuJbsrdW6n39vmG5eM2F5/K9cO2/CdvHLOJadSxYH2enDlWmn/yht2OWudEKxQEgNgk8uqb8zdBbhRKolJxSW49xzjFQ2S0Ma+E117m9foPHeRYCi76OPk4AxL0nG1CWQfXNgCbsLy6LAhUxyTvyVg+5syRkhQM+VU0jNjyst4gMr0q4A="
      reuired:
        - signature
    VerifyResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Indicates whether the signature is valid or not.
    UpdateCertificateMetadataBody:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties: true
    ImportCertificateBody:
      type: object
      required:
        - certificate
      properties:
        metadata:
          type: object
          additionalProperties: true
        certificate:
          type: string
          example:
            "lwcoluyVN3Sg25qIVdgzUUq61Rav+IEc8krsmWC8J/mxMyjTfkdr7thVatZCUhmQtdasbQh6esWHKTa/5t+EzRBa8HGVUWkvQWfLT8O0UpvcKFEI81yyCz2CmzOvY+izesf+SlWwjGmcu/ouTynRiJSje0qhSVRGwSydyHgBv41zip2i36P1Cc+/XI9StrFBOslecYhvXgRVGIxgapZ5m/j9Mu7l7Qiqjxn6LIqlZdoxcbfeqVYln3+ukYHZpNOjLkPO65d7SytBKVC2XSJn4BaSdEQqqn+zGmvOTb5Pc/JIKO2zoEfTnGie/vlEz5aQczaNEBG+dDK+y+FlA97Yzq04Laa70OpXnDLj/mqwg1bl0yi/bgum1J6f8ISroEmMsxNBDOYhjmQV7przHFO8Ik4P5iPQNMqGAGQIQfcFH5gV6/J+c+oE11tXayfdGdf1DrSkUvnVHqv+LfAhG5Y/07dH/OmXb7fCzvnk1VuuDc7OV1iHolvQYW5LvmUuJbsrdW6n39vmG5eM2F5/K9cO2/CdvHLOJadSxYH2enDlWmn/yht2OWudEKxQEgNgk8uqb8zdBbhRKolJxSW49xzjFQ2S0Ma+E117m9foPHeRYCi76OPk4AxL0nG1CWQfXNgCbsLy6LAhUxyTvyVg+5syRkhQM+VU0jNjyst4gMr0q4A="
    CryptoEngineProvider:
      allOf:
        - $ref: '#/components/schemas/CryptoEngineInfo'
        - type: object
      properties:
        id:
          type: string
        default:
          type: boolean
    CryptoEngineInfo:
      type: object
      properties:
        type:
          type: string
          enum:
            - PKCS11
            - AzureKeyVault
            - GOLANG
            - VaultKV2
            - AWSKMS
            - AWSSecretsManager
        security_level:
          type: integer
        provider:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true
          example:
            lamassu.io/cryptoengine.golang.storage-path: "/data"
            prod-ready: "false"
        supported_key_types:
          type: array
          items:
            $ref: '#/components/schemas/SupportedKeyTypeInfo'
    SupportedKeyTypeInfo:
      type: object
      properties:
        type:
          type: string
          enum:
            - RSA
            - DSA
            - ECDSA
            - Ed25519
        sizes:
          type: array
          items:
            type: integer
            example:
              [1024,2048,3072,4096]
    CAStats:
      type: object
      properties:
        cas:
          $ref: '#/components/schemas/CACertificatesStats'
        certificates:
          $ref: '#/components/schemas/CertificatesStats'
    Stats:
      type: object
      properties:
        total:
          type: integer
        status_distribution:
          type: object
          properties:
            ACTIVE:
              type: integer
            EXPIRED:
              type: integer
            REVOKED:
              type: integer
    CACertificatesStats:
      allOf:
        - $ref: '#/components/schemas/Stats'
        - type: object
          properties:
            engine_distribution:
              type: object
              additionalProperties:
                type: integer
              example:
                "golang-1": 8
    CertificatesStats:
      allOf:
        - $ref: '#/components/schemas/Stats'
        - type: object
          properties:
            ca_distribution:
              type: object
              additionalProperties:
                type: integer
              example: {}
    BigInt:
      type: object
      properties:
        neg:
          type: boolean
        abs:
            type: integer
    IPNet:
      type: object
      properties:
        IP:
          type: string
          format: ipv4
        IPMask:
          type: string
          format: ipv4
    OID:
      type: object
      properties:
        der:
          type: string
          format: byte
    400Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - struct validation error
            - CA type inconsistent
            - issuance expiration greater than CA expiration
            - incompatible expiration time ref
            - CA and the provided key dont match
    404Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - CA not found
            - certificate not found
    409Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - CA already exists
    500Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - internal Server Error
          example: internal Server Error
  securitySchemes:
    MTLS:
      type: mutualTLS
    Oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/auth
          tokenUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/token
          scopes: {}
        clientCredentials:
          tokenUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/token
          scopes: {}
    NoAuth:
      type: http
      scheme: bearer
          
servers:
  - description: Local
    url: https://localhost:8443/api/ca/v1