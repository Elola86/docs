openapi: 3.1.0
info:
  version: 2.0.0-oas3.1
  title: 'Lamassu IoT: Alerts Service'
  description: >-
    Alerts is the service in charge of sending mails. Users can be subscribed to
    particular events, such as, when a certificate is about to expire, and they
    will be notified via mail.


    Events from all services above (Lamassu CA, DMS Manager and Device Manager)
    that create, revoke or modify the status of any certificate publish a
    message to RabbitMQ broker. The message sent to the "alerts" queue will be
    consumed by the Alerts service and will send a mail to all the users
    subscribed to that event.


    Some useful links:

    - [Lamassu IoT Github repository](https://github.com/lamassuiot/lamassuiot)

    - [Lamassu Iot Docs](https://www.lamassu.io/docs/2.0.0/architecture/#alerts)

security:
  - Oauth2: []
tags:
  - name: events
  - name: user
paths:
  /events/latest:
    get:
      tags:
        - events
      summary: Get Latest Events Per Type
      description: Get Latest Events Per Type
      responses:
        '200':
          description: Successful operation. Returns latest events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertLatestEvent'
        '500':
          description: Something went wrong while getting the events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /user/{userId}/subscriptions:
    get:
      tags:
        - user
      summary: Get User Subscriptions
      description: Get User Subscriptions
      parameters:
        - $ref: '#/components/parameters/userId'
          description: ID of the user to retrieve subscriptions for.
      responses:
        '200':
          description: Successful operation. Returns user's subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct validation error
        '500':
          description: Something went wrong while getting the subscriptions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /user/{userId}/subscribe:
    post:
      tags:
        - user
      summary: Subscribe to Events
      description: Subscribe to Events
      parameters:
        - $ref: '#/components/parameters/userId'
          description: ID of the user that wants to subscribe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeBody'
      responses:
        '200':
          description: Successful operation. Returns user's subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct validation error
        '500':
          description: Something went wrong while subscribing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /user/{userId}/unsubscribe/{subId}:
    post:
      tags:
        - user
      summary: Unsubscribe from Events
      description: Unsubscribe from Events
      parameters:
        - $ref: '#/components/parameters/userId'
          description: ID of the user to unsubscribe.
        - $ref: '#/components/parameters/subId'
      responses:
        '200':
          description: Successful operation. Returns user's subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: Struct validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct validation error
        '500':
          description: Something went wrong while unsubscribing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
components:
  parameters:
    userId:
      in: path
      name: userId
      required: true
      schema:
        type: string
    subId:
      in: path
      name: subId
      required: true
      schema:
        type: string
      description: ID of the subscription to unsubscribe.
  schemas:
    AlertLatestEvent:
      type: object
      properties:
        event_types:
          $ref: '#/components/schemas/EventType'
        event:
          $ref: '#/components/schemas/Event'
        seen_at:
          type: string
          format: date-time
        counter:
          type: integer
    Event:
      type: object
      properties:
        context:
          $ref: '#/components/schemas/EventContext'
        data_encoded:
          type: string
          format: byte
        data_base64:
          type: boolean
          description: >-
            Indicates if the event, when serialized, represents the data field
            using the base64 encoding
        field_errors:
          type: string
          additionalProperties:
            type: string
    EventType:
      type: string
      enum:
        - ca.create
        - ca.import
        - ca.certificate.import
        - ca.status.update
        - ca.metadata.update
        - ca.sign.certificate
        - ca.sign.signature
        - ca.delete
        - certificate.create
        - certificate.import
        - certificate.status.update
        - certificate.metadata.update
        - dms.create
        - dms.update
        - dms.enroll
        - dms.reenroll
        - dms.bind-device-id
        - device.create
        - device.identity.update
        - device.status.update
        - device.metadata.update
        - any
    EventContext:
      type: object
      properties:
        spec_version:
          type: string
        type:
          type: string
        source:
          type: string
        subject:
          type: string
        id:
          type: string
        time:
          type: string
        data_schema:
          type: string
        data_content_ype:
          type: string
        data_content_encoding:
          type: string
        data_media_type:
          type: string
        extensions:
          type: object
    Subscription:
      type: object
      properties:
        id:
          type: string
          example: "41bee0c6-15cb-4e1e-b2cb-d4b300f647a3"
        user_id:
          type: string
        event_type:
          $ref: '#/components/schemas/EventType'
        subscription_ts:
          type: string
          format: date-time
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionCondition'
          description: Conditions for the subscription.
        channel:
          $ref: '#/components/schemas/Channel'
    SubscriptionCondition:
      type: object
      properties:
        type:
          type: string
          enum:
            - JSON-SCHEMA
            - JSON-PATH
        condition:
          type: string
    Channel:
      type: object
      properties:
        type:
          type: string
          enum:
            - EMAIL
            - MSTEAMS
            - WEBHOOK
        name:
          type: string
        config:
          type: object
          example:
            email: "example@gmail.com"
    SubscribeBody:
      type: object
      properties:
        event_type:
          $ref: '#/components/schemas/EventType'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionCondition'
        channel:
          $ref: '#/components/schemas/Channel'
    400Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - Struct validation error
    500Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - Internal Server Error
          example: Internal Server Error
  securitySchemes:
    Oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/auth
          tokenUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/token
          scopes: {}
        clientCredentials:
          tokenUrl: https://localhost/auth/realms/lamassu/protocol/openid-connect/token
          scopes: {}
         
servers:
  - description: Local
    url: https://localhost:8443/api/alerts/v1