openapi: 3.1.0
info:
  version: 2.0.0-oas3.1
  title: 'Lamassu IoT: DMS Service'
  description: >-
    The DMS Manager is the service in charge of managing the Registration
    Authority of the PKI. Instead of having a centralized Registration
    Authority, Lamassu uses a decentralized approach to be easily integrated by
    Device Manufacturing Systems. This way, each DMS has the authority to
    request the issuance of a certificate for a device being manufactured.
    Instead of relying on just one registration authority, Lamassu delegates the
    authorization of the issuance to the Local Registration Authority or LRA.


    Each DMS is entitled to authorize the issuance of a certificate to a subset
    of CAs of the entire PKI defined by the administrator. Each DMS has a list
    of authorized CAs that may be used during the enrollment process. Once an
    enrollment process is initiated, the PKI will check that the provided DMS
    certificate is authorized to issue certificates for the requested CA. The
    authorization list can be updated to add newly created CAs or remove CAs
    that are no longer needed.


    Some useful links:

    - [Lamassu IoT Github repository](https://github.com/lamassuiot/lamassuiot)

    - [Lamassu Iot
    Docs](https://www.lamassu.io/docs/2.0.0/architecture/#dms-manager)
security:
  - Oauth2Password: []
tags:
  - name: dms
  - name: stats
  - name: est
paths:
  /dms:
    get:
      tags:
        - dms
      summary: Get All DMS
      description: Get All DMS
      parameters: 
        - name: sort_by
          in: query
          description: Field by which to sort the results.
          required: false
          schema:
            type: string
            example: name
        - name: sort_mode
          in: query
          description: Sort mode, can be 'asc' for ascending or 'desc' for descending.
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: asc
        - name: page_size
          in: query
          description: Number of items per page.
          required: false
          schema:
            type: integer
            example: 5
        - name: bookmark
          in: query
          description: Bookmark for pagination.
          required: false
          schema:
            type: string
            example: "bm12345"
        - name: filter
          in: query
          description: |
            Filter criteria. Example format: field[operation]=value.
            Supported operations for string fields: eq (equal), ne (not equal), ct (contains), nc (not contains).
            Supported operations for date fields: bf (before), eq (equal), af (after).
            Supported operations for number fields: eq (equal), ne (not equal), lt (less than), le (less or equal), gt (greater than), ge (greater or equal).
          required: false
          schema:
            type: string
            example: status[eq]=active
      responses:
        '200':
          description: Successful operation. Returns all DMS.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetDMSResponse'
        '500':
          description: Something went wrong while getting all DMS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    post:
      tags:
        - dms
      summary: Create DMS
      description: Create DMS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDMSBody'
      responses:
        '201':
          description: Successfull operation. Returns created DMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DMS'
        '500':
          description: Something went wrong while creating the DMS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /dms/{id}:
    get:
      tags:
        - dms
      summary: Get DMS by ID
      description: Get DMS by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: ID of the DMS to get.
      responses:
        '200':
          description: Successfull operation. Returns DMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DMS'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct Validation error
        '500':
          description: Something went wrong while getting the DMS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
    put:
      tags:
        - dms
      summary: Update DMS by ID
      description: Update DMS by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: ID of the DMS to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DMS'
      responses:
        '200':
          description: Successfull operation. Returns DMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DMS'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct Validation error
        '500':
          description: Something went wrong while updating DMS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /dms/bind-identity:
    post:
      tags:
        - dms
      summary: Bind Identity to Device
      description: Bind Identity to Device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindIdentityToDeviceBody'
      responses:
        '200':
          description: Successfull operation. Returns DMS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BindIdentityToDeviceOutput'
        '400':
          description: Struct Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Struct Validation error
        '500':
          description: Something went wrong while binding identity to device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /stats:
    get:
      tags:
        - stats
      summary: Get Stats
      description: Get Stats
      responses:
        '200':
          description: Successful operation. Returns the total of DMS.
          content:
            application/json:
              schema:
                type: integer
                description: Total DMS
        '500':
          description: Something went wrong while getting stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/cacerts:
    get:
      tags:
        - est
      summary: Get CA Certificates
      description: Get CA Certificates
      responses:
        '200':
          description: Successful operation. Returns CAs.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/{aps}/cacerts:
    get: 
      tags:
        - est
      summary: Get CA Certificates
      description: Get CA Certificates
      parameters:
        - in: path
          name: aps
          required: true
          schema:
            type: string
          description: The identifier of the Authorization Point System (APS)
      responses:
        '200':
          description: Successful operation. Returns CAs.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
        '500':
          description: Something went wrong while getting certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/simpleenroll:
    post:
      tags:
        - est
      summary: Simple Enroll for a Certificate
      description: Simple Enroll for a Certificate
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              description: The Certificate Signing Request (CSR) in PKCS#10 format.
      responses:
        '200':
          description: Successfully enrolled for a certificate.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
                description: The enrolled certificate in PEM format.
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
                description: The enrolled certificate in PKCS#7 format.
        '400':
          description: >
            Bad Request. Possible error reasons: - Content-type must be
            application/pkcs10 - Could not read the body payload - Body payload
            must be base64 encoded - Could not parse the payload into a csr
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Could not read the body payload
        '500':
          description: Something went wrong while ernolling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/{aps}/simpleenroll:
    post:
      tags:
        - est
      summary: Simple Enroll for a Certificate Using an Identifier
      description: Simple Enroll for a Certificate Using an Identifier
      parameters:
        - in: path
          name: aps
          required: true
          schema:
            type: string
          description: The identifier of the Authorization Point System (APS).
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              description: The Certificate Signing Request (CSR) in PKCS#10 format.
      responses:
        '200':
          description: Successfully enrolled for a certificate.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
                description: The enrolled certificate in PEM format.
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
                description: The enrolled certificate in PKCS#7 format.
        '400':
          description: >
            Bad Request. Possible error reasons: - Content-type must be
            application/pkcs10 - Could not read the body payload - Body payload
            must be base64 encoded - Could not parse the payload into a csr
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Could not read the body payload
        '500':
          description: Something went wrong while enrolling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/simplerenroll:
    post:
      tags:
        - est
      summary: Simple Reenroll for a Certificate
      description: Simple Reenroll for a Certificate
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              description: The Certificate Signing Request (CSR) in PKCS#10 format.
      responses:
        '200':
          description: Successfully reenrolled for a certificate.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
                description: The reenrolled certificate in PEM format.
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
                description: The reenrolled certificate in PKCS#7 format.
        '400':
          description: >
            Bad Request. Possible error reasons: - Content-type must be
            application/pkcs10 - Could not read the body payload - Body payload
            must be base64 encoded - Could not parse the payload into a csr
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Could not read the body payload
        '500':
          description: Something went wrong while reenrolling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
  /.well-known/est/{aps}/simplerenroll:
    post:
      tags:
        - est
      summary: Simple Reenroll for a Certificate Using an Identifier
      description: Simple Reenroll for a Certificate Using an Identifier
      parameters:
        - in: path
          name: aps
          required: true
          schema:
            type: string
          description: The identifier of the Authorization Point System (APS).
      requestBody:
        required: true
        content:
          application/pkcs10:
            schema:
              type: string
              format: binary
              description: The Certificate Signing Request (CSR) in PKCS#10 format.
      responses:
        '200':
          description: Successfully reenrolled for a certificate.
          content:
            application/x-pem-file:
              schema:
                type: string
                format: binary
                description: The reenrolled certificate in PEM format.
            application/pkcs7-mime:
              schema:
                type: string
                format: binary
                description: The reenrolled certificate in PKCS#7 format.
        '400':
          description: >
            Bad Request. Possible error reasons: - Content-type must be
            application/pkcs10 - Could not read the body payload - Body payload
            must be base64 encoded - Could not parse the payload into a csr
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
              example:
                err: Could not read the body payload
        '500':
          description: Something went wrong while reenrolling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
components:
  schemas:
    GetDMSResponse:
      type: object
      properties:
        next:
          type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/DMS'
    DMS:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true
        creation_ts:
          type: string
          format: date-time
        settings:
          $ref: '#/components/schemas/DMSSettings'
    DMSSettings:
      type: object
      properties:
        enrollment_settings:
          $ref: '#/components/schemas/EnrollmentSettings'
        reenrollment_settings:
          $ref: '#/components/schemas/ReEnrollmentSettings'
        ca_distribution_settings:
          $ref: '#/components/schemas/CADistributionSettings'
    EnrollmentSettings:
      type: object
      properties:
        protocol:
          type: string
          enum:
            - EST_RFC7030
        est_rfc7030_settings:
          $ref: '#/components/schemas/EnrollmentOptionsESTRFC7030'
        device_provisioning_profile:
          $ref: '#/components/schemas/DeviceProvisionProfile'
        enrollment_ca:
          type: string
        enable_replaceable_enrollment:
          type: boolean
        registration_mode:
          type: string
          enum:
            - JITP
            - PRE_REGISTRATION
    ReEnrollmentSettings:
      type: object
      properties:
        additional_validation_cas:
          type: array
          items:
            type: string
        reenrollment_delta:
          type: integer
          format: int64
          description: time.Duration type
        enable_expired_renewal:
          type: boolean
        preventive_delta:
          type: integer
          format: int64
          description: time.Duration type
        critical_delta:
          type: integer
          format: int64
          description: time.Duration type
    CADistributionSettings:
      type: object
      properties:
        include_system_ca:
          type: boolean
        include_enrollment_ca:
          type: boolean
        managed_cas:
          type: array
          items:
            type: string
    EnrollmentOptionsESTRFC7030:
      type: object
      properties:
        auth_mode:
          type: string
          enum:
            - ESTServerKeyGenBitSize
            - ESTServerKeyGenKeyType
        client_certificate_settings:
          $ref: '#/components/schemas/AuthOptionsClientCertificate'
    AuthOptionsClientCertificate:
      type: object
      properties:
        validation_cas:
          type: array
          items:
            type: string
        chain_level_validation:
          type: integer
    DeviceProvisionProfile:
      type: object
      properties:
        icon:
          type: string
        icon_color:
          type: string
        metadata:
          type: object
          additionalProperties: true
        tags:
          type: array
          items:
            type: string
    CreateDMSBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true
        settings:
          $ref: '#/components/schemas/DMSSettings'
    BindIdentityToDeviceBody:
      type: object
      properties:
        bind_mode:
          type: string
          enum:
            - CREATED
            - PROVISIONED
            - RE-PROVISIONED
            - RENEWED
            - SHADOW-UPDATED
            - STATUS-UPDATED
            - DECOMMISSIONED
        device_id:
          type: string
        certificate_serial_number:
          type: string
    BindIdentityToDeviceOutput:
      type: object
      properties:
        certificate:
          $ref: '#/components/schemas/Certificate'
        dms:
          $ref: '#/components/schemas/DMS'
        device:
          $ref: '#/components/schemas/Device'
    Certificate:
      type: object
      properties:
        serial_number:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        issuer_metadata:
          $ref: '#/components/schemas/IssuerCAMetadata'
        status:
          $ref: '#/components/schemas/CertificateStatus'
        certificate:
          $ref: '#/components/schemas/X509Certificate'
        key_metadata:
          $ref: '#/components/schemas/KeyStrengthMetadata'
        subject:
          $ref: '#/components/schemas/Subject'
        valid_from:
          type: string
          format: date-time
        valid_to:
          type: string
          format: date-time
        revocation_timestamp:
          type: string
          format: date-time
        revocation_reason:
          type: integer
        type:
          $ref: '#/components/schemas/CertificateType'
        engine_id:
          type: string
    IssuerCAMetadata:
      type: object
      properties:
        serial_number:
          type: string
        id:
          type: string
        level:
          type: integer
    CertificateStatus:
      type: string
      enum:
        - ACTIVE
        - EXPIRED
        - REVOKED
    X509Certificate:
      type: object
      properties:
        raw:
          type: string
          format: byte
        raw_tbs_certificate:
          type: string
          format: byte
        raw_subject_public_key_info:
          type: string
          format: byte
        raw_subject:
          type: string
          format: byte
        raw_issuer:
          type: string
          format: byte
        signature:
          type: string
          format: byte
        signature_algorithm:
          type: integer
        public_key_algorithm:
          type: integer
        public_key:
          type: object
        version:
          type: integer
        serial_number:
          $ref: '#/components/schemas/BigInt'
        issuer:
          $ref: '#/components/schemas/pkixName'
        subject:
          $ref: '#/components/schemas/pkixName'
        not_before:
          type: string
          format: date-time
        not_after:
          type: string
          format: date-time
        key_usage:
          type: integer
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/pkixExtension'
        extra_extensions:
          type: array
          items:
            $ref: '#/components/schemas/pkixExtension'
        unhandled_critical_extensions:
          type: array
          items:
            type: array
            items:
              type: integer
        ext_key_usage:
          type: array
          items:
            type: integer
        unknown_ext_key_usage:
          type: array
          items:
            type: array
            items:
              type: integer
        basic_constraints_valid:
          type: boolean
        is_ca:
          type: boolean
        max_path_len:
          type: integer
        max_path_len_zero:
          type: boolean
        subject_key_id:
          type: string
          format: byte
        authority_key_id:
          type: string
          format: byte
        ocsp_server:
          type: array
          items:
            type: string
        issuing_certificate_url:
          type: array
          items:
            type: string
        dns_names:
          type: array
          items:
            type: string
        email_addresses:
          type: array
          items:
            type: string
        ip_addresses:
          type: array
          items:
            type: string
            format: ipv4
        uris:
          type: array
          items:
            $ref: '#/components/schemas/URL'
        permitted_dns_domains_critical:
          type: boolean
        permitted_dns_domains:
          type: array
          items:
            type: string
        excluded_dns_domains:
          type: array
          items:
            type: string
        permitted_ip_ranges:
          type: array
          items:
            $ref: '#/components/schemas/IPNet'
        excluded_ip_ranges:
          type: array
          items:
            $ref: '#/components/schemas/IPNet'
        permitted_email_addresses:
          type: array
          items:
            type: string
            format: email
        excluded_email_addresses:
          type: array
          items:
            type: string
            format: email
        permitted_uri_domains:
          type: array
          items:
            type: string
            format: uri
        excluded_uri_domains:
          type: array
          items:
            type: string
            format: uri
        crl_distribution_points:
          type: array
          items:
            type: string
        policy_identifiers:
          type: array
          items:
            type: array
            items:
              type: integer
        policies:
          type: array
          items:
            $ref: '#/components/schemas/OID'
    KeyStrengthMetadata:
      type: object
      properties:
        key_type:
          type: string
          enum:
            - UnknownPublicKeyAlgorithm
            - RSA
            - DSA
            - ECDSA
            - Ed25519
        bits:
          type: integer
        key_strength:
          type: string
          enum:
            - HIGH
            - MEDIUM
            - LOW
    Subject:
      type: object
      properties:
        common_name:
          type: string
        organization:
          type: string
        organization_unit:
          type: string
        country:
          type: string
        state:
          type: string
        locality:
          type: string
    CertificateType:
      type: string
      enum:
        - MANAGED
        - IMPORTED
        - EXTERNAL
    Device:
      type: object
      properties:
        id:
          type: string
        tags:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        icon:
          type: string
        icon_color:
          type: string
        creation_timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true
        dms_owner:
          type: string
        identity:
          $ref: '#/components/schemas/Slot'
        slots:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Slot'
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeviceEvent'
    DeviceStatus:
      type: string
      enum:
        - NO_IDENTITY
        - ACTIVE
        - RENEWAL_PENDING
        - EXPIRING_SOON
        - EXPIRED
        - REVOKED
        - DECOMMISSIONED
    Slot:
      type: object
      properties:
        status:
          type: string
          enum:
            - ACTIVE
            - RENEWAL_PENDING
            - EXPIRING_SOON
            - EXPIRED
            - REVOKED
        active_version:
          type: integer
        type:
          type: string
          enum:
            - TOKEN
            - x509
            - SSH_KEY
            - OTHER
        versions:
          type: object
          additionalProperties: true
        events:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeviceEvent'
    DeviceEvent:
      type: object
      properties:
        type:
          type: string
          enum:
            - CREATED
            - PROVISIONED
            - RE-PROVISIONED
            - RENEWED
            - SHADOW-UPDATED
            - STATUS-UPDATED
            - DECOMMISSIONED
        description:
          type: string
    pkixName:
      type: object
      properties:
        country:
          type: array
          items:
            type: string
        organization:
          type: array
          items:
            type: string
        organizational_unit:
          type: array
          items:
            type: string
        locality:
          type: array
          items:
            type: string
        province:
          type: array
          items:
            type: string
        street_address:
          type: array
          items:
            type: string
        postal_code:
          type: array
          items:
            type: string
        serial_number:
          type: string
        common_name:
          type: string
        names:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: All parsed attributes
        extra_names:
          type: array
          items:
            $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: Attributes to be copied raw into any marshaled distinguished names
    pkixAttributeTypeAndValue:
      type: object
      properties:
        type:
          type: array
          items:
            type: integer
        value:
          type: object
    pkixAttributeTypeAndValueSET:
      type: object
      properties:
        type:
          type: array
          items:
            type: integer
          description: ASN.1 Object Identifier
        value:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/pkixAttributeTypeAndValue'
          description: A set of sets of AttributeTypeAndValue
    pkixExtension:
      type: object
      properties:
        ID:
          type: array
          items:
            type: integer
        critical:
          type: boolean
        value:
          type: string
          format: byte
    URL:
      type: object
      properties:
        scheme:
          type: string
        opaque:
          type: string
          description: Encoded opaque data
        user:
          $ref: '#/components/schemas/UserInfo'
        host:
          type: string
          description: Host or host:port
        path:
          type: string
          description: Path (relative paths may omit leading slash)
        raw_path:
          type: string
          description: Encoded path hint
        omit_host:
          type: boolean
          description: Do not emit empty host (authority)
        force_query:
          type: boolean
          description: Append a query ('?') even if RawQuery is empty
        raw_query:
          type: string
          description: Encoded query values, without '?'
        fragment:
          type: string
          description: Fragment for references, without '#'
        raw_fragment:
          type: string
          description: Encoded fragment hint
    UserInfo:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        password_set:
          type: boolean
    BigInt:
      type: object
      properties:
        neg:
          type: boolean
        abs:
            type: integer
    IPNet:
      type: object
      properties:
        IP:
          type: string
          format: ipv4
        IPMask:
          type: string
          format: ipv4
    OID:
      type: object
      properties:
        der:
          type: string
          format: byte
    400Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - Struct validation error
            - Content-type must be application/pkcs10 
            - Could not read the body payload 
            - Body payload must be base64 encoded 
            - Could not parse the payload into a csr
    500Error:
      type: object
      properties:
        err: 
          type: string
          enum:
            - Internal Server Error
          example: Internal Server Error
  securitySchemes:
    MTLS:
      type: mutualTLS
    Oauth2Password:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
    NoAuth:
      type: http
      scheme: bearer
          
          
servers:
  - description: SwaggerHub API Auto Mocking
    url: >-
      https://virtserver.swaggerhub.com/MIKELELOLA003_1/Lamassuiot_DMSManager/1.0.0
  - description: Local
    url: https://localhost:8443/api/dmsmanager/v1