{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lamassu Iot Docs","text":"<p>Lamassu is an IoT first PKI designed for industrial scenarios. Public key infrastructure are systems in charge of creating, storing and distributing digital certificates which are used to verify that a particular public key belongs to a certain entity. PKIs creates digital certificates which map to public keys to entities, securely stores these certificates in a central repository and revokes them if needed.</p> <p> </p>"},{"location":"quickstart/","title":"Getting Started","text":"<p>In order to automate the steps required to deploy a fully functional Lamassu instance, a handy script known as the fast-lane script. In order to use such script make sure to have a functional kubernetes cluster.</p> <p>Info</p> <p>If you need to deploy a simple kubernetes single-node cluster, follow this guide to launch a microk8s instance or this guide to launch a k3s instance</p> <p>Installing Lamassu is as simple as running this commands and following the simple terminal-based wizzard:</p> <pre><code>curl -fsSL -o lamassu-fast-lane.sh https://raw.githubusercontent.com/lamassuiot/lamassu-helm/main/scripts/lamassu-fast-lane.sh\nchmod +x lamassu-fast-lane.sh\nbash lamassu-fast-lane.sh\n</code></pre>"},{"location":"quickstart/#fast-lane-options","title":"Fast-Lane options","text":""},{"location":"quickstart/#non-interactive","title":"Non Interactive","text":"<p>By default, the script operates in an interactive mode, which means it prompts the user for input during its execution. However, the non-interactive mode allows the script to run without requiring user input. It is advised to specif This mode is activated by providing certain flags when running the script.</p> <p>It is recommended to have a look to other flag options such as <code>domain</code> or <code>tls-crt</code> and <code>tls-key</code> to name a few</p> <pre><code>bash lamassu-fast-lane.sh --non-interactive\n</code></pre>"},{"location":"quickstart/#custom-external-tls-certificates","title":"Custom / External TLS Certificates","text":"<p>In order to use custom or external TLS certificates to be used by Lamassu's API Gateway, it is required to provide the path to the PEM encoded certificate and key files.</p> <pre><code>bash lamassu-fast-lane.sh --tls-crt /path/to/cert.pem --tls-key /path/to/key.pem\n</code></pre>"},{"location":"quickstart/#offline","title":"Offline","text":"<p>The offline mode enables installing Lamassu in airgap environments. This mode requires the user to have the helm charts for Lamassu, RabbitMQ and Postgres as well as the used docker images already downloaded and present in the kubernetes cluster.</p> <p>In order to enable the offline mode, it is required to provide the path to the helm charts for Lamassu, RabbitMQ and Postgres.</p> <p>Although not required, consider also adding the <code>--non-interactive</code> flag to avoid any user input during the installation process.</p> <pre><code>bash lamassu-fast-lane.sh --offline --helm-chart-lamassu ./helm-lamassu-2.5.2.tgz  --helm-chart-rabbitmq ./helm-rabbitmq-14.1.0.tgz --helm-chart-postgres ./helm-postgresql-15.2.7.tgz --non-interactive\n</code></pre>"},{"location":"quickstart/#all-options","title":"All Options","text":"<p>The following table lists the available options for the fast-lane script:</p> Flag Description Default -h, --help Display help message -n, --non-interactive Enable non-interactive mode not set / interactive -ns, --namespace Kubernetes Namespace where LAMASSU will be deployed lamassu-dev -d, --domain Domain to be set while deploying LAMASSU dev.lamassu.io --offline Offline mode enabled not set / online --tls-crt Path to the PEM encoded certificate used for downstream communications not set --tls-key Path to the PEM encoded key used for downstream communications not set --helm-chart-lamassu Path to the Lamassu helm chart (.tgz format) not set --helm-chart-postgres Path to the Postgres helm chart (.tgz format) not set --helm-chart-rabbitmq Path to the RabbitMQ helm chart (.tgz format) not set"},{"location":"quickstart/#upgrading-lamassu","title":"Upgrading Lamassu","text":"<p>There are two kinds of situations that may require an upgrade of the Lamassu instance:</p> <p>Update the configuration of the Lamassu instance: The fastlane script deploys lamassu with a starting configuration. If you need to update the configuration of the Lamassu instance, you must update the values in the <code>lamassu.yaml</code> file and then run the <code>helm upgrade</code> command as shown below:</p> <pre><code>helm upgrade lamassu lamassuiot/lamassu -f lamassu.yaml -n lamassu-dev\n</code></pre> <p>Update the Lamassu version: Depending on each upgrade, the update procedure may very. In general, the following steps are required:</p> <ol> <li> <p>Update the helm repository:</p> <pre><code>helm repo update\n</code></pre> </li> <li> <p>List the available versions of the Lamassu helm chart:</p> <pre><code>helm search repo lamassuiot/lamassu\n</code></pre> </li> <li> <p>Depending on the upgrade, the helm chart may have changed. In this case, you     must update the helm chart values in the <code>lamassu.yaml</code> file.</p> </li> <li> <p>Run the <code>helm upgrade</code> command:</p> <pre><code>helm upgrade lamassu lamassuiot/lamassu -f lamassu.yaml -n lamassu-dev --version &lt;chart_version&gt;\n</code></pre> </li> </ol>"},{"location":"advanced-features/aws-iot/","title":"AWS IoT","text":""},{"location":"advanced-features/aws-iot/#platform-setup","title":"Platform Setup","text":""},{"location":"advanced-features/aws-iot/#registering-ca-in-aws-iot-core","title":"Registering CA in AWS IoT Core","text":""},{"location":"advanced-features/aws-iot/#provisioning-templates-policies","title":"Provisioning Templates &amp; Policies","text":""},{"location":"advanced-features/aws-iot/#device-automation","title":"Device Automation","text":""},{"location":"advanced-features/aws-iot/#notifying-certificate-renewal","title":"Notifying Certificate Renewal","text":"<p>When a Cloud Event is recieved by the AWS connector where a certificate metadata complies with:</p> <ul> <li> <p>Preventive Check has been triggered: <pre><code>{\n  \"metadata\":{\n    \"lamassu.io/ca/expiration-deltas\": [\n      {\n        \"name\": \"Preventive\",\n        \"delta\": \"31d\",\n        \"triggered\": true,\n      },\n    ]\n  }\n}\n</code></pre></p> </li> <li> <p>Certificate : <pre><code>{\n  \"metadata\":{\n    \"lamassu.io/ra\": \"cloud.robots-factory\",\n    \"lamassu.io/ra\": \"user.12345-678-901-23456\",\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"advanced-features/aws-iot/#notifying-ca-certificate-renewal","title":"Notifying CA Certificate Renewal","text":""},{"location":"advanced-features/aws-iot/#certificate-status-synchronization","title":"Certificate Status Synchronization","text":""},{"location":"advanced-features/azure-iot/","title":"Azure IoT","text":""},{"location":"apis/cloud-events/","title":"Cloud Events","text":"<p>Lamassu has a complex web of services that interact between them in different ways. One of those interactions is using and asynchronous, event driven, messaging system. Each </p>"},{"location":"apis/data-models/","title":"Data Models","text":""},{"location":"apis/data-models/#ca-certificate","title":"CA Certificate","text":"Example<pre><code>{\n    \"serial_number\": \"71-df-b5-ee-26-46-5f-0c-6b-ad-9f-76-0a-aa-57-35-9c-a8-ed-fe\",\n    \"issuer_metadata\": {\n        \"serial_number\": \"71-df-b5-ee-26-46-5f-0c-6b-ad-9f-76-0a-aa-57-35-9c-a8-ed-fe\",\n        \"ca_id\": \"6a00d228-90e9-4999-98bf-e7ebf73dba43\"\n    },\n    \"status\": \"ACTIVE\",\n    \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZwekNDQTQrZ0F3SUJBZ0lVY2QrMTdpWkdYd3hyclo5MkNxcFhOWnlvN2Y0d0RRWUpLb1pJaHZjTkFRRUwKQlFBd1RURUpNQWNHQTFVRUJoTUFNUWt3QndZRFZRUUlFd0F4Q1RBSEJnTlZCQWNUQURFSk1BY0dBMVVFQ2hNQQpNUWt3QndZRFZRUUxFd0F4RkRBU0JnTlZCQU1UQzBWc1pYWmhkRzl5YzBOQk1CNFhEVEl6TVRBd016RTFNek14Ck1sb1hEVEkwTURjeU9URTFNek13T0Zvd1RURUpNQWNHQTFVRUJoTUFNUWt3QndZRFZRUUlFd0F4Q1RBSEJnTlYKQkFjVEFERUpNQWNHQTFVRUNoTUFNUWt3QndZRFZRUUxFd0F4RkRBU0JnTlZCQU1UQzBWc1pYWmhkRzl5YzBOQgpNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXFIWEtacjB0RDJlaGhCNDZBcXMwCit0RHhjQjR2U2pOVFgramM1aXR0RFVabDgwWUEzTWhMaWVCSUZaaHJ6NFBpdUpxNnc4aWJrUmRhdlhTQ0xKWjUKZS8rc1FMYXl2NXRuVkp2ZDNUNEk4aFZkRnhxUGZBbndmb3lJMW9IaUxZa3htK0xvWithdnZPcWpqRnRmSSsxTQpTZ1N2dkZYMUlyK015QmZCQmdpRnM3MmZ2R0NoOHFCVXpoZXdrNEExTUtydmVoUDMxdFNUbCtjbmh3NGVtMFB5ClM2d3MwNGNsTTNPemxoM0tiL1Y1YUtIeDNxQlhhRGlMQzRYdkgzT3c3SEp3QXBtdWUvdFhVRThWSDZVZ1dhOU4KL3h4NUp3amZZVmtXb0ppemhpZzBVdEZIeXRZNng4dWExZ1lVYkxwUGNiYUhMeENkbUw1YzNHZmFlN0ZObGxDKwp0blAzYWRxUHpHZ1R2ejFyLzhHY0Y3MkFHdkNBaE5aTVFXRU5ucGtYSi9hZ2s4Zk53V3liamw2ckFiZndJVVZVCmNJK0hQbjVYbnR6SEtEYVE2NklxT3ZKUlk3M3huTm5uNUttK3VHS1IxVzRaOW9sNGpKQzVycTE2Y2c0Zm0vQUsKYTRZdlBOcHg4M1NGcVR5Tk04d2FaOWZ4ZkVzMm41WndVOU93ZVg3djNXNWsxQ3NvRDZURFpvVklmQWZBTm9BNAp0THlnaCttaEw3U0lXNHhBVnJwcFZRVGRDQk9OTlpjcEF0SEtkRUxjRG9xV1Z5UnErV0E0OHNyenNmaFpyRnNECmtmcnhqLzRObTVJZGU4MmZOdzJBanpkajQ5UW0wY210QTRDbnZXNnRFbUhZRVRUNVZZZHlPcHBOTW5VRnEyR2cKNWp1a2FSSGh6dHdIaXV5SkFUaXNzVVVDQXdFQUFhTi9NSDB3RGdZRFZSMFBBUUgvQkFRREFnR1dNQjBHQTFVZApKUVFXTUJRR0NDc0dBUVVGQndNQ0JnZ3JCZ0VGQlFjREFUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkCkRnUVdCQlNPUTllVUwvTmdrTXMvT3AvVjh0RWJWRThwMWpBY0JnZ3JCZ0VGQlFjQkFRUVFNQTR3REFZSUt3WUIKQlFVSE1BR0dBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBZE9sbDA5TmFrdmxld0p4azNYMkJFT2ozU2NvSApEU2F4NlFOUmZNc2tVbkdqYmF5ZnV2SHcrQ1IvWU9WbEdhS0xnVFp6emVrU1lRb3dJQkVMOXV0TkZYQkI5Mkw4Cm5VNzd6THdxclJsK2FDc2NTbnlGZ2xpenc2amkvQnBGemYvekZ5RlpMa0RFT3dvMm1zMStDeXNmN3NiTGFyVUMKR1FGTmw4dUptZmdGQW9OZjNyS2pIQm5iZXRRL2xqV1VqMWlzZmpMeGZsWmZoZjJ6UUY4WEVxc0ZIYm5FM1ROSwpKQlRwZnAwOWxOb29XcFVlOTZ4aWd1d3FzSUFIVnlKUFJtMjVleUIxU05CV3ROMjZaRzlYM0JVY3hXdWs4My9IClVXayttcDFkMkZESnRJdTJWTkVyWjFtV1JDa1QzQ0tkTmc2b3RZYllSUHdCVDVibDhyTHFETVVDV29vSzE0eisKTTNBNElXeVU4WTdDc20vZW5xYyszb1JQREdDelZvdmpVaXI4WUZGMHd6am54Z2VSM2gwVlNtcWNkYlN3Unl5dApMWFNCTEN1UlRHeXRHL0U0cldRMmxDbzRsYWlaOTBFaERUU1VrTURZSTJKNUgzNm54RzBwakw3MGhPUkd5UlMzClNHVTkxRzI1L3dSM2p0YzZEYWowOS9hL0JYY0VpV3M0dnNsd2VOOTBEK0pjVVFMQlFPNm5KOGlsWUFQNU9ESDYKRUhuTWJnUmgyZk9uQU4rM3prTW9pQmxIbnUwT2NkRXBabjdXbjZaMFVPK005WWwrVlRBb3B6YzUyWCtUYVJsYQo1Z3NkRWlOdDJJMXVFeUVMSlZneFRCZDhnNisxWU9hSkhjRUVMVkc2dXhTZEt1N1FIbXQ2OGg2a21GdjFOTlBiCnRxL0MwR0NwKzJ3SUUxWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\",\n    \"key_metadata\": {\n        \"type\": \"RSA\",\n        \"bits\": 4096,\n        \"strength\": \"HIGH\"\n    },\n    \"subject\": {\n        \"common_name\": \"ElevatorsCA\",\n        \"organization\": \"\",\n        \"organization_unit\": \"\",\n        \"country\": \"\",\n        \"state\": \"\",\n        \"locality\": \"\"\n    },\n    \"valid_from\": \"2023-10-03T15:33:12Z\",\n    \"valid_to\": \"2024-07-29T15:33:08Z\",\n    \"revocation_timestamp\": \"0001-01-01T00:00:00Z\",\n    \"revocation_reason\": \"Unspecified\",\n    \"engine_id\": \"aws-secrets-mngr-1\",\n    \"id\": \"6a00d228-90e9-4999-98bf-e7ebf73dba43\",\n    \"metadata\": {\n        \"lamassu.io/name\": \"ElevatorsCA\"\n    },\n    \"issuance_expiration\": {\n        \"type\": \"Duration\",\n        \"duration\": \"14w2d\",\n        \"time\": \"2024-01-11T17:32:56+01:00\"\n    },\n    \"type\": \"MANAGED\",\n    \"creation_ts\": \"2023-10-03T15:33:12.366658Z\"\n}\n</code></pre> Schema<pre><code>type CACertificate struct {\n    SerialNumber   string `json:\"serial_number\"`\n    IssuerMetadata struct {\n        SerialNumber string `json:\"serial_number\"`\n        CaID         string `json:\"ca_id\"`\n    } `json:\"issuer_metadata\"`\n    Status      string `json:\"status\"`\n    Certificate string `json:\"certificate\"`\n    KeyMetadata struct {\n        Type     string `json:\"type\"`\n        Bits     int    `json:\"bits\"`\n        Strength string `json:\"strength\"`\n    } `json:\"key_metadata\"`\n    Subject struct {\n        CommonName       string `json:\"common_name\"`\n        Organization     string `json:\"organization\"`\n        OrganizationUnit string `json:\"organization_unit\"`\n        Country          string `json:\"country\"`\n        State            string `json:\"state\"`\n        Locality         string `json:\"locality\"`\n    } `json:\"subject\"`\n    ValidFrom           time.Time `json:\"valid_from\"`\n    ValidTo             time.Time `json:\"valid_to\"`\n    RevocationTimestamp time.Time `json:\"revocation_timestamp\"`\n    RevocationReason    string    `json:\"revocation_reason\"`\n    EngineID            string    `json:\"engine_id\"`\n    ID                  string    `json:\"id\"`\n    Metadata            map[string]any `json:\"metadata\"`\n    IssuanceExpiration struct {\n        Type     string    `json:\"type\"`\n        Duration string    `json:\"duration\"`\n        Time     time.Time `json:\"time\"`\n    } `json:\"issuance_expiration\"`\n    Type       string    `json:\"type\"`\n    CreationTs time.Time `json:\"creation_ts\"`\n}\n</code></pre>"},{"location":"apis/data-models/#certificate","title":"Certificate","text":""},{"location":"apis/data-models/#dms-manager","title":"DMS Manager","text":""},{"location":"apis/data-models/#device","title":"Device","text":""},{"location":"apis/openapi/","title":"OpenAPI","text":""},{"location":"basic-features/alerts-service/","title":"Alerts Service","text":""},{"location":"basic-features/ca-service/","title":"CA Service","text":"<p>This section will guide you through the basic functionalities provided by our PKI to start provisioning your devices.</p> <p>The first step to provision devices with digital certificates is to create the Certification Authority. The role of a CA is to issue and manage all the certificates.</p>"},{"location":"basic-features/ca-service/#create-ca","title":"Create CA","text":"<p>There are three possibilities to create a new CA:</p> <ul> <li>Create a new CA from scratch</li> <li>Bring your own external CA</li> <li>Import third-party external CA</li> </ul>"},{"location":"basic-features/ca-service/#create-ca-from-scratch","title":"Create CA from Scratch","text":"<p>To create a new CA, fill the form taking into account the following considerations:</p> <p>CA Settings:</p> <ul> <li> <p>Lamassu supports the use of several cryptographic engines, therefore, when creating the CA you can choose which cryptographic engine to use to store the private key.</p> </li> <li> <p>Lamassu supports both <code>RSA</code> and <code>EC</code> based CAs. But the configured Crypto Engine may or may not support both algorithms. Check out also the supported key sizes for each algorithm family as it is also dependant on the configured engine.</p> </li> </ul> <p>CA Expiration Settings and Issuance Expiration Settings:</p> <ul> <li>The CA expiration time must be greater than the lifespan of the issued certs.</li> <li> <p>There are 3 types of expiration formats, choose one:</p> <ul> <li><code>Duration</code>: Uses a relative time delta to determine the expiration date. The time delta can be specified in seconds (s), minutes (m), hours (h), days (d), weeks (w) or in years (y). Example: <code>10y</code> equals to 10 years.</li> <li><code>End Date</code>: Set a specific date for expiration in ISO 8601 format.</li> <li><code>Indefinite Validity</code>: The expiration is fixed to the following timestamp <code>99991231235959Z</code> (31/12/9999 at 23:59:59).</li> </ul> </li> <li> <p>Subject properties are optional</p> </li> </ul> <p></p> <p></p>"},{"location":"basic-features/ca-service/#bring-your-own-external-ca","title":"Bring your own external CA","text":"<p>To import an external CA, fill the form with the following considerations:</p> <p>CA Settings:</p> <ul> <li>The configured Crypto Engine may or may not support importing external CAs.</li> <li>Select the corresponding crypto engine</li> <li>Import x509 PEM Certificate and Private Key in PEM Format</li> </ul> <p>Issuance Expiration Settings:</p> <ul> <li>The CA expiration time must be greater than the lifespan of the issued certs.</li> <li><code>Duration</code>: Uses a relative time delta to determine the expiration date.</li> </ul> <p>Note</p> <p>One simple way of testing this mechanism is by generating a CA using OpenSSL and then import it to Lamassu:</p> <pre><code>openssl ecparam -genkey -name prime256v1 -out ca.key\nopenssl req -new -x509 -key ca.key -out ca.crt -days 365\n</code></pre> <p></p> <p></p>"},{"location":"basic-features/ca-service/#import-third-party-external-ca","title":"Import third-party external CA","text":"<p>To import an third-party external CA, fill the form with the following considerations:</p> <p>CA Settings:   - Import x509 PEM Certificate</p> <p></p> <p></p>"},{"location":"basic-features/ca-service/#monitoring-system","title":"Monitoring System","text":"<p>The CA Service has a built-in CRON-like system that monitors all issued certificates based on the expiration date on each certificate. By default when deploying a Lamassu instance, the monitoring system is configured to be executed daily (CRON expression <code>0 0 * * *</code>)</p> <p>As such, there are two kind of checks based on the expiration date:</p> <p>Default check: Lamassu performs simple checks to identify <code>ACTIVE</code> certificates that have expired. If it finds any, it will update the certificate state to <code>EXPIRED</code> and trigger the <code>ca.certificate.update.status</code> cloud event.</p> <p>Custom checks: You can also define your own set of custom checks to be notified each time a certificate expiration would expire prior to a custom time delta. This is really helpful for building complex automation processes. For instance, each time a device enrolls itself, Lamassu will automatically add two custom checks (Note that the delta times can be adjusted):</p> <ul> <li>Preventive Check: At 31 days prior to its expiration.</li> <li>Critical Check at 7 days prior to its expiration.</li> </ul> <p>Once the CRON system finds that the Custom check threshold is met, it updates de certificate metadata indicating that the check monitoring criteria has been met. After that, the CA service will publish a new cloud event of type <code>ca.certificate.update.metadata</code></p> <p>In order to add a new custom check, update a Certificate <code>metadata</code> field as below:</p> <pre><code>{\n  \"metadata\":{\n    \"lamassu.io/ca/expiration-deltas\": [\n      {\n        \"name\": \"Preventive\",\n        \"delta\": \"31d\",\n        \"triggered\": true,\n      },\n      {\n        \"name\": \"Critical\",\n        \"delta\": \"7d\",\n        \"triggered\": false,\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"basic-features/device-service/","title":"Device Service","text":""},{"location":"basic-features/dms-service/","title":"DMS Service","text":""},{"location":"basic-features/dms-service/#basic-settings","title":"Basic Settings","text":"<p>DMS Name</p> <p>This name refers to the DMS ID. This value is also used to construct the enrollment endpoint. It is highly recommended not to use names with white spaces.</p> <p>Deployment Mode</p> <p>Previous Lamassu versions would include two different deployment modes. The first developed mode was referred as the <code>On Premise</code> mode where a local Software was required to be developed and deployed outside Lamassu. This mode has been deprecated as the same functionality can be achieved with Lamassu's APIs. </p> <p>The second mode is referred as <code>Hosted by Lamassu</code> where no software has to be developed nor locally deployed. This mode allows configuring a Registration Authority based on an enrollment protocol. Once a DMS is created with this mode enabled, it will then enable the required endpoints for the selected enrollment standard.  </p> <p></p>"},{"location":"basic-features/dms-service/#device-registration-settings","title":"Device Registration Settings","text":"<p>Each DMS defines how and when each device is registered within Lamassu. Check out the different configuration properties:</p> <p>Registration mode</p> <p>There are two registration modes to be enforced during the enrollment procedure. Either is done in a dynamic fashion, meaning that Lamassu does not check if the device was previously registered, or if in the other hand, there is a whitelisting approach to limit who can request a certificate:</p> <ul> <li> <p><code>JITP</code> defines a dynamic registration approach. If during the enrollment process Lamassu detects that the requesting device does not exist, it then will automatically register it within the Device Manager Service using the DMSs Device Registration Settings such as the Icon or Tags.</p> </li> <li> <p><code>Enforce Pre Registration</code> refers to the whitelisting approach. In contrast with the JITP method, this mode checks if a device exists. If no registration is found, it then will reject any enrollment request. Bare in mind that in order to have a valid registration, the requesting Device MUST be assigned to the DMS being used to enroll</p> </li> </ul> <p>Icon</p> <p>Select the Icon and color to easily identify devices belonging to this DMS.</p> <p>Tags</p> <p>While registering devices, it is also possible assigning them a set of string tags that can be later used while finding a device or set of devices</p> <p></p>"},{"location":"basic-features/dms-service/#enrollment-settings","title":"Enrollment Settings","text":"<p>Protocol</p> <p>Each DMS can ONLY support ONE enrollment protocol. As of this time, there is also one enrollment protocol, the Enrollment over Secure Transport or EST protocol. There are plans of extending this list to include the Lightweight Certificate Management Protocol (CMP) Profile once it is fully standardized.</p> <p>Authentication Mode</p> <p>One of the first checks the DMS performs during the enrollment process, is to check the authenticity of the incoming request. For such effects, Lamassu allows defining how this authentication procedure is performed. </p> <p>As of this time, there is only authentication method <code>Mutual TLS</code> witch enforces the device (or the requestor) to present Client Certificates during the TLS Handshake. If no certificates are presented. The enrollment request will fail with <code>401 Unauthorized</code> HTTP status code. If Client Certificates are in fact sent by the device, then the enrollment service will check if such certificates are authorized. Refer to the Validation CAs section to understand how the authorization mechanism is performed.</p> <p>There are plans for introducing more authentication methods such as the <code>No Auth</code> method for testing purposes.</p> <p>Enrollment CA</p> <p>If all validation checks are successfully passed, then its time for the DMS to request the CSR signature to the CA service. The Enrollment CA property defines with witch CA should the CSR be signed. Only ONE CA can be specified.</p> <p>Validation CAs</p> <p>When a device (or any client) sends and enrollment request while sending Client Certificates, the DMS service will validate that in fact those certificates are authorized to perform such enrollment. Specifying a list of Certificate Authorities that authorize the enrollment request. At least ONE CA must be selected. </p> <p>Future versions will improve the validation process by using SKID and AKID if present in the Client Certificate. As of now, a basic \"first-match\" cryptographic approach is performed. </p> <p>Allow Override Enrollment</p> <p>One key property to define is wether to allow enrollment requests of already enrolled devices. If this is set to <code>false</code> (set by default), any incoming requests can only be performed by devices that are in the <code>REQUIRES_PROVISIONING</code> state. If the device was previously enrolled, any new enrollment attempts will be blocked.</p> <p>If set to <code>true</code>, the DMS will allow overriding the device by erasing the previous enrollment if a new VALID enrollment attempt is performed.</p> <p>Chain Validation Level</p> <p>This property allows specifying up to witch chain level should the DMS check for a valid Client Certificate. This value is set to <code>-1</code> to indicate that all the presented Client Certificates should be validated. If a value greater than &gt; 0 is provided, the DMS will try Validating (using the configured Validation CAs) the presented Chain up to the specified level. </p> <p></p>"},{"location":"basic-features/dms-service/#reenrollment-settings","title":"ReEnrollment Settings","text":"<p>Allow Expired Renewal</p> <p>Specifying if devices that where previously enrolled by the DMS should be allowed to renew their certificate if they present an Expired Certificate. </p> <p>Future versions will allow defining a maximum expiration delta. As of now, the maximum expiration delta is set to indefinite meaning that if a device can present an expired by any number of days.</p> <p>Additional Validation CAs</p> <p>By default a device wishing to ReEnroll must present a certificate signed by the Enrollment CA. It is also possible defining an additional list of CA Certificates to be used to validate the ReEnrollment request in case the main validation between the Enrollment CA and the presented Client Certificate fails. This list can be empty but it comes handy while rotating the Enrollment CA.</p> <p></p>"},{"location":"basic-features/dms-service/#ca-distribution-settings","title":"CA Distribution Settings","text":"<p>Include 'Downstream' CA used by Lamassu</p> <p>Instruct whether to include the Certificate used to connect to Lamassu's Gateway (main access point for Lamassu's UI and all the APIs including the EST Service) into the DMS CA distribution list.</p> <p>Managed CAs</p> <p>List of Lamassu Managed CAs to include in the DMS DMS CA distribution list. Can select any type of CA (either <code>Managed</code>, <code>Imported</code>, or <code>External</code>)</p> <p></p>"},{"location":"basic-features/dms-service/#additional-settings","title":"Additional Settings","text":""},{"location":"basic-features/dms-service/#aws-iot-connector","title":"AWS IoT Connector","text":""},{"location":"basic-features/va-service/","title":"VA Service","text":"<p>A Validation Authority (VA) is a critical component in a Public Key Infrastructure (PKI), a system that provides secure communication and data exchange over networks. The VA plays a vital role in verifying the validity of digital certificates issued within the PKI framework. It helps ensure the trustworthiness and integrity of the entire PKI ecosystem by acting as a trusted third-party entity.</p> <p>This section aims to describe those protocols as well as explaining how to use them</p>"},{"location":"basic-features/va-service/#ocsp","title":"OCSP","text":"<p>The Online Certificate Status Protocol or OCSP for short, is a protocol used to determine the current status of a digital certificate without requiring the use of Certificate Revocation Lists (CRLs).</p> <p>As defined by the standard, there are two possible methods that can be used to perform the http request:</p> Method Path Headers Body payload Used when <code>GET</code> <code>{url}/{url-encoding of base-64 encoding of the DER encoding of the OCSPRequest}</code> Recommended when the encoded request is less than 255 bytes <code>PUT</code> <code>{url}</code> Content-Type: <code>application/ocsp-request</code> Binary value of the DER encoding of the OCSPRequest Can always be used"},{"location":"basic-features/va-service/#get-request","title":"GET Request","text":"<p>Define the OCSP server endpoint as well as the certificate to validate and the issuer CA of such certificate</p> <pre><code>export OCSP_SERVER=dev.lamassu.io\nexport CA_CERTIFICATE=issuer_ca.crt \nexport CERTIFICATE=cert_to_validate.crt\n</code></pre> <p>Obtain the Root certificate used by the server that will be later used during the TLS handshake with the OCSP server</p> <pre><code>openssl s_client -connect $OCSP_SERVER  2&gt;/dev/null &lt;/dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; root-ca.pem\n</code></pre> <p>Create the OCSP Request</p> <pre><code>OCSP_REQUEST=$(openssl ocsp -CAfile $CA_CERTIFICATE -issuer $CA_CERTIFICATE -cert $CERTIFICATE -reqout - | base64 -w 0)\n</code></pre> <p>Check the status of the certificate</p> <pre><code>curl --location --request GET \"https://$OCSP_SERVER/api/ocsp/$OCSP_REQUEST\" &gt; ocspresponse.der \nopenssl ocsp -respin ocspresponse.der -VAfile $CA_CERTIFICATE -resp_text\n</code></pre>"},{"location":"basic-features/va-service/#post-request","title":"POST Request","text":"<p>Define the OCSP server endpoint as well as the certificate to validate and the issuer CA of such certificate</p> <pre><code>export OCSP_SERVER=dev.lamassu.io\nexport CA_CERTIFICATE=issuer_ca.crt \nexport CERTIFICATE=cert_to_validate.crt\n</code></pre> <p>Obtain the Root certificate used by the server</p> <pre><code>openssl s_client -connect $OCSP_SERVER  2&gt;/dev/null &lt;/dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; root-ca.pem\n</code></pre> <p>Create the OCSP Request</p> <pre><code>openssl ocsp -issuer $CA_CERTIFICATE -cert $CERTIFICATE -reqout - &gt; ocsp-request-post.der\n</code></pre> <p>Check the status of the certificate <pre><code>curl --location --request POST \"https://$DOMAIN/api/ocsp/\" --header 'Content-Type: application/ocsp-request' --data-binary '@ocsp-request-post.der' &gt; ocsp-response-post.der\nopenssl ocsp -respin ocsp-response-post.der -VAfile $CA_CERTIFICATE -resp_text\n</code></pre></p>"},{"location":"basic-features/va-service/#crl","title":"CRL","text":"<p>A Certificate Revocation List (CRL) is a critical component of a Public Key Infrastructure (PKI) system, used to maintain the security and integrity of digital certificates. It is a regularly updated list of digital certificates that have been revoked or are no longer considered valid before their expiration date. CRLs play a crucial role in ensuring that only trusted and valid certificates are used for secure communication and data exchange.</p> <p>CRLs are periodic and static lists of revoked certificates, whereas OCSP provides on-demand, real-time certificate status checks. OCSP is generally more scalable, offers faster response times, and is better suited for high-security, time-sensitive scenarios. However, CRLs are still used in situations where OCSP infrastructure may not be available, and they can serve as a fallback mechanism. The choice between CRL and OCSP depends on the specific needs of a PKI and the use case.</p>"},{"location":"deployment/advanced/helm-chart/","title":"Helm Chart","text":"<p>Lamassu's Helm chart is a powerful tool that allows you to deploy Lamassu in a Kubernetes cluster. The Helm chart is a collection of files that describe a set of Kubernetes resources. It is a way to package, configure, and deploy applications on Kubernetes.</p> <p>The fastlane script custmizes the deployment by bootstraping a basic configuration. However, you can further customize the deployment by editing the <code>lamassu.yaml</code> file considering the following configuration options:</p> <ul> <li> <p><code>global</code> - These global values affect multiple components of the chart.</p> <ul> <li><code>imagePullPolicy</code> (<code>string: \"Always\"</code>) - The image pull policy for all the components.</li> </ul> </li> <li> <p><code>debugMode</code> (<code>boolean: true</code>) - Enable debug mode for Lamassu components.</p> </li> <li> <p><code>tls</code> - Configuration for the downstream TLS.</p> <ul> <li><code>type</code> (<code>string: \"certManager\"</code>) - TLS provider to be used. Possible values are <code>certManager</code> or <code>external</code>.</li> <li><code>certManagerOptions</code> - Configuration for the Let's Encrypt TLS.<ul> <li><code>clusterIssuer</code> (<code>string: \"\"</code>) - The cluster issuer to be used.</li> <li><code>issuer</code> (<code>string: \"\"</code>) - The issuer to be used.</li> <li><code>duration</code> (<code>string: \"2160h\"</code>) - The duration of the self-signed certificate.</li> </ul> </li> <li><code>externalOptions</code> - Configuration for the external certificate.<ul> <li><code>secretName</code> (<code>string: \"\"</code>) - The name of the secret containing the external certificate.</li> </ul> </li> </ul> </li> <li> <p><code>ingress</code> - Configuration for the Ingress.</p> <ul> <li><code>enabled</code> (<code>boolean: true</code>) - Enable the Ingress.</li> <li><code>hostname</code> (<code>string: \"dev.lamassu.io\"</code>) - The hostname to be used. Required if Ingress is enabled.</li> <li><code>annotations</code> (<code>string: \"\"</code>) - The annotations to be used set to the ingress resource.</li> </ul> </li> <li> <p><code>service</code> - Configuration for the services.</p> <ul> <li><code>type</code> (<code>string: \"ClusterIP\"</code>) - The service type to be used.</li> <li><code>nodePorts</code> - Configuration for the NodePorts.<ul> <li><code>apiGatewayTls</code> (<code>number: 0</code>) - The NodePort for the API Gateway TLS.</li> <li><code>apiGateway</code> (<code>number: 0</code>) - The NodePort for the API Gateway.</li> </ul> </li> </ul> </li> <li> <p><code>postgres</code> - Configuration for the Postgres database.</p> <ul> <li><code>hostname</code> (<code>string: \"\"</code>) - The hostname of the Postgres database.</li> <li><code>port</code> (<code>number: 5432</code>) - The port of the Postgres database.</li> <li><code>username</code> (<code>string: \"\"</code>) - The username of the Postgres database.</li> <li><code>password</code> (<code>string: \"\"</code>) - The password of the Postgres database.</li> </ul> </li> <li> <p><code>amqp</code> - Configuration for the AMQP.</p> <ul> <li><code>hostname</code> (<code>string: \"\"</code>) - The hostname of the AMQP.</li> <li><code>port</code> (<code>number: 5672</code>) - The port of the AMQP.</li> <li><code>username</code> (<code>string: \"\"</code>) - The username of the AMQP.</li> <li><code>password</code> (<code>string: \"\"</code>) - The password of the AMQP.</li> <li><code>tls</code> (<code>boolean: false</code>) - Enable TLS for the AMQP.</li> </ul> </li> <li> <p><code>auth</code> - Configuration for the authentication.</p> <ul> <li><code>oidc</code> - Configuration for the OIDC.<ul> <li><code>frontend</code> - Configuration for the frontend.<ul> <li><code>clientId</code> (<code>string: \"frontend\"</code>) - Client ID used by the frontend.</li> <li><code>authority</code> (<code>string: \"https://${window.location.host}/auth/realms/lamassu\"</code>) - Authority for the frontend.</li> <li><code>awsCognito</code> - Configuration for the AWS Cognito.<ul> <li><code>enabled</code> (<code>boolean: false</code>) - Enable AWS Cognito.</li> <li><code>hostedUiDomain</code> (<code>string: \"\"</code>) - The hosted UI domain for AWS Cognito.</li> </ul> </li> </ul> </li> <li><code>apiGateway</code> - Configuration for the API Gateway.<ul> <li><code>jwksUrl</code> (<code>string: \"https://auth:8443/auth/realms/lamassu/protocol/openid-connect/certs\"</code>) - The JWKS URL for the API Gateway.</li> </ul> </li> </ul> </li> <li><code>authorization</code> - Configuration for the authorization.<ul> <li><code>rolesClaim</code> (<code>string: \"realm_access.roles\"</code>) - The roles claim for the authorization.</li> <li><code>roles</code> - Configuration for the roles.<ul> <li><code>admin</code> (<code>string: \"pki-admin\"</code>) - The admin role.</li> <li><code>operator</code> (<code>string: \"operator\"</code>) - The operator role.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>services</code> - Configuration for the services.</p> <ul> <li><code>keycloak</code> - Configuration for the Keycloak.<ul> <li><code>enabled</code> (<code>boolean: true</code>) - Enable Keycloak.</li> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/keycloak:2.1.0\"</code>) - The image for Keycloak.</li> <li><code>adminCreds</code> - Configuration for the admin credentials.<ul> <li><code>username</code> (<code>string: \"admin\"</code>) - The username for the admin.</li> <li><code>password</code> (<code>string: \"admin\"</code>) - The password for the admin.</li> </ul> </li> </ul> </li> <li><code>ui</code> - Configuration for the UI.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-ui:2.5.2\"</code>) - The image for the UI.</li> </ul> </li> <li><code>va</code> - Configuration for the VA.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-va:2.5.1\"</code>) - The image for the VA.</li> </ul> </li> <li><code>ca</code> - Configuration for the CA.<ul> <li><code>domain</code> (<code>string: \"dev.lamassu.io\"</code>) - The domain for the CA.</li> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-ca:2.5.1\"</code>) - The image for the CA.</li> <li><code>monitoring</code> - Configuration for the monitoring.<ul> <li><code>frequency</code> (<code>string: \"* * * * *\"</code>) - Frequency for the monitoring.</li> </ul> </li> <li><code>engines</code> - Configuration for the engines.<ul> <li><code>defaultEngineID</code> (<code>string: \"golang-1\"</code>) - Default engine ID.</li> <li><code>golang</code> (<code>array: []</code>) - Configuration for Filesystem-based engine.</li> </ul> </li> </ul> </li> <li><code>deviceManager</code> - Configuration for the Device Manager.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-devmanager:2.5.1\"</code>) - The image for the Device Manager.</li> <li><code>minimumReenrollmentDays</code> (<code>number: 100</code>) - The minimum reenrollment days.</li> </ul> </li> <li><code>dmsManager</code> - Configuration for the DMS Manager.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-dmsmanager:2.5.1\"</code>) - The image for the DMS Manager.</li> </ul> </li> <li><code>openPolicyAgent</code> - Configuration for the Open Policy Agent.<ul> <li><code>image</code> (<code>string: \"openpolicyagent/opa:0.37.1-envoy\"</code>) - The image for the Open Policy Agent.</li> <li><code>remLogger</code> - Configuration for the REM Logger.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/opa-rem-logger:2.1.0\"</code>) - The image for the REM Logger.</li> </ul> </li> </ul> </li> <li><code>alerts</code> - Configuration for the Alerts.<ul> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-alerts:2.5.1\"</code>) - The image for the Alerts.</li> <li><code>smtp_server</code> - Configuration for the SMTP server.<ul> <li><code>from</code> (<code>string: \"\"</code>) - The from address.</li> <li><code>insecure</code> (<code>boolean: false</code>) - Enable insecure.</li> <li><code>enable_ssl</code> (<code>boolean: true</code>) - Enable SSL.</li> <li><code>username</code> (<code>string: \"\"</code>) - The username.</li> <li><code>password</code> (<code>string: \"\"</code>) - The password.</li> <li><code>host</code> (<code>string: \"\"</code>) - The host.</li> <li><code>port</code> (<code>number: 25</code>) - The port.</li> </ul> </li> </ul> </li> <li><code>awsConnector</code> - Configuration for the AWS Connector.<ul> <li><code>enabled</code> (<code>boolean: false</code>) - Enable the AWS Connector.</li> <li><code>image</code> (<code>string: \"ghcr.io/lamassuiot/lamassu-aws-connector:2.5.1\"</code>) - The image for the AWS Connector.</li> <li><code>connectorID</code> (<code>string: \"aws.XXXXXXXXX\"</code>) - The connector ID.</li> <li><code>credentials</code> - Configuration for the credentials.<ul> <li><code>accessKeyId</code> (<code>string: \"\"</code>) - The access key ID.</li> <li><code>secretAccessKey</code> (<code>string: \"\"</code>) - The secret access key.</li> <li><code>defaultRegion</code> (<code>string: \"\"</code>) - The default region.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"deployment/advanced/simple-config-scenarios/","title":"Common configuration Scenarios","text":"<p>The following are some common scenarios for configuring the Lamassu deployment based on the Helm chart.</p>"},{"location":"deployment/advanced/simple-config-scenarios/#custom-domain","title":"Custom Domain","text":"<p>By default, Lamassu is deployed with the domain <code>dev.lamassu.io</code>. To change the domain, specify the following configuration in your <code>lamassu.yaml</code> file:</p> <pre><code>ingress:\n  hostname: \"mydomain.com\"\nservices:\n  ca:\n    domain: \"mydomain.com\"\n</code></pre> <p>For those scenarios where ingress is disabled, the domain/IP can be set in the <code>ca</code> service configuration directly:</p> <pre><code>ingress:\n  enabled: false\nservices:\n  ca:\n    domain: \"192.168.100.1\"\n</code></pre>"},{"location":"deployment/advanced/simple-config-scenarios/#lets-encrypt-certificates","title":"Let's Encrypt Certificates","text":"<p>By default, Lamassu is deployed with a Self-Signed certificate provided by the CertManager plugin. Another common certificate provider, instead of using the mentioned self-signed certificate, is Let's Encrypt - ACMEv2 provider. To use Let's Encrypt certificates together with the CertManager plugin, the following steps are required:</p> <ol> <li> <p>Create a ClusterIssuer resource with the following configuration. Make sure to replace the email address with your own as well as the <code>ingressClassName</code> with the one used in your Ingress Controller:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-prod\nspec:\nacme:\n    # You must replace this email address with your own.\n    # Let's Encrypt will use this to contact you about expiring\n    # certificates, and issues related to your account.\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: user@example.com\n    privateKeySecretRef:\n    # Secret resource that will be used to store the account's private key.\n    name: letsencrypt-prod\n    # Add a single challenge solver, HTTP01 using nginx\n    solvers:\n    - http01:\n        ingress:\n            ingressClassName: nginx\n</code></pre> </li> <li> <p>Update the <code>lamassu.yaml</code> file with the following configuration:</p> <pre><code>tls:\n  type: \"certManager\"\n  certManagerOptions:\n    clusterIssuer: \"letsencrypt-prod\"\ningress:\n  enabled: true\n  hostname: \"mydomain.com\"\n</code></pre> </li> </ol>"},{"location":"deployment/advanced/simple-config-scenarios/#deployment-with-nodeport-without-ingress","title":"Deployment with NodePort (Without Ingress)","text":"<p>Deploying Lamassu without Ingress requires exposing the services using NodePort. The following configuration can be used to expose the services using NodePort:</p> <pre><code>ingress:\n  enabled: false\nservice:\n  type: \"NodePort\"\n  nodePorts:\n    apiGatewayTls: 30443\n    apiGateway: 30080\n</code></pre>"},{"location":"deployment/advanced/subsytem-config/","title":"Subsytem config","text":""},{"location":"deployment/advanced/subsytem-config/#configuration","title":"Configuration","text":""},{"location":"deployment/advanced/subsytem-config/#databases","title":"Databases","text":"<p>Lamassu Core services have been designed in such a way to enable different storage engines. Each engine has its own set of pros and cons depending, and there is no easy way of determining the best candidate. Each scenario is unique in terms of data volume, availability requirements or even pricing requirements in case of delegating on any cloud provider.</p>"},{"location":"deployment/advanced/subsytem-config/#postgres","title":"Postgres","text":"<p>The main Database for the current Lamassu version is postgres. You can provide any Postgres DB instance such as a HA Postgres deployment, an AWS RDS DB with postgres driver or similar alternatives. Note that each lamassu service expects it's own DB within the DB instance. As such, the deployed postgres instance must include the following DBs: <code>alerts</code>, <code>ca</code>, <code>cloudproxy</code>, <code>devicemanager</code>, <code>dmsmanager</code>. Additionally if Keycloak is used as the authentication service, the DB instance must also supply the <code>auth</code> DB.</p> <p>The following Postgres Single-Node deployment configuration is only meant for testing purposes and should not be used in a production environment as it doesn't follow best practices such as using unsafe password credentials</p> <pre><code>cat &gt; postgres.yaml &lt;&lt; \"EOF\"\nfullnameOverride: \"postgresql\"\nglobal:\n  postgresql:\n    auth: #(1)\n      username: admin\n      password: admin\nprimary:\n  initdb:\n    scripts:\n      init.sql: |\n        CREATE DATABASE auth;\n        CREATE DATABASE alerts;\n        CREATE DATABASE ca;\n        CREATE DATABASE devicemanager;\n        CREATE DATABASE dmsmanager;\nEOF\n</code></pre> <ol> <li>Place here the admin credentials provided during PostgreSQL configuration.</li> </ol> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install postgres bitnami/postgresql -f postgres.yaml\n</code></pre> <p>Lamassu's Helm chart allows specifying the connection parameters to be used by the different services by providing the following configuration in the <code>values.yaml</code> file:</p> <pre><code>postgres:\n  hostname: \"postgresql\"\n  port: 5432\n  username: \"admin\" #(1)\n  password: \"admin\"\n</code></pre> <ol> <li>Customize your admin credentials here</li> </ol>"},{"location":"deployment/advanced/subsytem-config/#couchdb","title":"CouchDB","text":"<p>TODO: Future versions will include support for CouchDB as the Storage Engine</p>"},{"location":"deployment/advanced/subsytem-config/#aws-dynamodb","title":"AWS DynamoDB","text":"<p>TODO: Future versions will include support for DynamoDB as the Storage Engine</p>"},{"location":"deployment/advanced/subsytem-config/#async-messaging","title":"Async Messaging","text":"<p>As of now, AMQP is the only Async Messaging engine supported. The Async Messaging engine service a crucial role for sending PKI related events in real time. Check out all the events generated by Lamassu services in the Cloud Events section.</p>"},{"location":"deployment/advanced/subsytem-config/#rabbitmq","title":"RabbitMQ","text":"<p>RabbitMQ is perhaps the most popular AMQP service, and its deployment for a test scenario is quite straight forward.</p> <p>Start by deploying RabbitMQ with your own configuration. This section contains a basic configuration deployment and it should not be used in any production environment as it is due to insecure configurations (like non robust credentials for instance):</p> <pre><code>fullnameOverride: \"rabbitmq\"\nauth: #(1)\n  username: \"user\"\n  password: \"user\"\n</code></pre> <ol> <li>Place here the admin credentials provided during RabitMQ configuration.</li> </ol> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install rabbitmq bitnami/rabbitmq -f rabbitmq.yaml\n</code></pre> <p>Lamassu's Helm chart allows specifying the connection parameters to be used by the different services by providing the following configuration in the <code>values.yaml</code> file:</p> <pre><code>amqp:\n  hostname: \"rabbitmq\"\n  port: 5672\n  username: \"user\" #(1)\n  password: \"user\"\n  tls: false\n</code></pre> <ol> <li>Customize your admin credentials here</li> </ol>"},{"location":"deployment/advanced/subsytem-config/#authentication","title":"Authentication","text":""},{"location":"deployment/advanced/subsytem-config/#keycloak","title":"Keycloak","text":"<p>Keycloak is an open-source identity and access management (IAM) solution developed by Red Hat. It provides a set of features and capabilities to handle user authentication, authorization, and identity management in web and mobile applications.</p> <p>As of now, lamassu integrates this component while deploying Lamassu's own helm chart. By default it is deployed on all instances, but can be disabled if another OIDC based provider is configured.</p> <p>To disable keycloak in a lamassu installation, provide the following <code>values.yaml</code> file containing:</p> <pre><code>services:\n  keycloack:\n    enabled: false\n</code></pre> <p>If instead you choose to go with the default installation and use Keycloak as your IAM OIDC-based provider, include the following section in your <code>values.yaml</code> file:</p> <pre><code>services:\n  keycloack:\n    enabled: true\n    image: ghcr.io/lamassuiot/keycloak:2.1.0\n    adminCreds: # (1)\n      username: \"&lt;admin-user&gt;\"\n      password: \"&lt;admin-password&gt;\"\n</code></pre> <ol> <li>Set here the credentials of the root admin user for the Keycloak instalation.</li> </ol> <p>The Keycloak Admin user credentials to be created should be specified in this section. This user is required to create Lamassu IoT users after installation by following the steps below:</p> <ol> <li> <p>Log in to the Keycloak Administration Console: Open your web browser and navigate to the Keycloak Administration Console at     <code>https://&lt;lamasu-domain&gt;/auth/admin</code>. Log in with your administrator credentials. These credentials has been provided during the helm chart configuration.</p> </li> <li> <p>Select the \"lamassu\" Realm: After logging in, use the dropdown menu in the top left corner to select the <code>lamassu</code> realm. This will take you to the realm     where you want to create the user.</p> </li> <li> <p>Navigate to the \"Users\" Section: In the left-hand sidebar, locate and click on the \"Users\" option. Here, you'll see a list of existing users in the     <code>lamassu</code> realm.</p> </li> <li> <p>Create a New User: To create a new user, click the \"Add User\" button. This will open a form where you can configure the details of the new user.</p> </li> <li> <p>Configure User Details: In the user creation form, provide information such as the username, full name, email. Click on the create button.</p> </li> <li> <p>Set User Credentials: In the \"Credentials\" tab, set the user's password.</p> </li> <li> <p>Assign the \"pki-admin\" Role: To assign the <code>pki-admin</code> role to the user, go to the \"Role Mappings\" tab. Click on \"Assing role\", find and select     the \"pki-admin\" role and move it to the \"Assigned Roles\" list. This will grant the user the <code>pki-admin</code> role.</p> </li> <li> <p>Login with the new user: Once you've configured the user navigate to the Lamassu IoT console URL <code>https://&lt;lamasu-domain&gt;</code> and provide the user credentials.</p> </li> </ol> <p>The new user is now created and has been assigned the <code>pki-admin</code> role in the <code>lamassu</code> realm. Ensure that the user has the appropriate roles and permissions as per your security and access requirements.</p>"},{"location":"deployment/advanced/subsytem-config/#aws-cognito","title":"AWS Cognito","text":"<p>Amazon Cognito is a fully managed identity and user management service provided by AWS that simplifies the process of adding user sign-up, sign-in, and authentication to web and mobile applications. It is a comprehensive identity and access management (IAM) solution that is designed to help developers secure their applications by handling the user management and authentication aspects.</p> <p>Start by creating going to AWS Console and create a new Cognito user pool in case you don't already have one. As can be seen in the image below, in this case the user pool has been named lamassu-oidc.</p> <p></p> <p>Lamassu Helm Chart</p> <p>Make sure to copy the user pool ID assigned by AWS as it will be needed while configuring the Lamassu's Helm Chart. Note that the user pool ID is different than the assigned name.</p> <p>Cognito provides a mechanism that assigns a friendly URL when a user is redirected to cognito to sign in. Go to <code>App Integration &gt; Domain &gt; Actions</code> and select <code>Create Cognito Domain</code> and provide a valid name. Note that the name must be unique within the same AWS region.</p> <p></p> <p>Optionally, it is possible to customize the sign in page with some custom CSS and a logo image. To do so, go to <code>App Integration &gt; Hosted UI customization</code> For instance you can configure Cognito to use the following Image (click to open) as the main logo displayed when a user is redirected to sign in.</p> <p>To instruct Cognito to display the main logo, use the following css:</p> <pre><code>.logo-customizable {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.banner-customizable {\n  padding: 10px 0px 10px 0px;\n  background-color: #007ACC;\n}\n\n.submitButton-customizable {\n  font-size: 14px;\n  font-weight: bold;\n  margin: 20px 0px 10px 0px;\n  height: 40px;\n  width: 100%;\n  color: #fff;\n  background-color: #007ACC;\n}\n\n.submitButton-customizable:hover {\n  color: #fff;\n  background-color: gray;\n}\n</code></pre> <p>Finally, and the most important part, is creating a new client application for lamassu within the user pool. Go to <code>App Integration &gt; App clients and analytics</code> and create a new Client and configure as follows:</p> <ul> <li>App Client<ul> <li>App type: Select Public Client</li> <li>App client name: Specify a friendly name for the app client. i.e.: <code>lamassu-ui</code></li> </ul> </li> <li>Hosted UI settings<ul> <li>Allowed callback URLs: This is a key parameter. Bare in mind the URL used to access lamassu's UI. If you access the UI at <code>https://dev.lamassu.io</code> then     configure such url to be allowed to sign in</li> <li>Allowed sign-out URLs: Use the same URL as the allowed callback URL but appending <code>/loggedout</code> at the end. i.e.: <code>https://dev.lamassu.io/loggedout</code></li> </ul> </li> </ul> <p>Lamassu Helm Chart - <code>services.auth.oidc.clientId</code></p> <p>Make sure to copy the App Client ID assigned by AWS as it will be needed while configuring the Lamassu's Helm Chart. Note that the App Client ID is different than the assigned name.</p> <p>The last critical part for configuring Cognito is to define different user groups to limit what each user is allowed to do with lamassu. As of now, lamassu only has two roles: <code>admin</code> and <code>operator</code>. In this example, we will group our user pool users in two cognito groups:</p> <ul> <li><code>pki-admin</code> group: the users that are assigned to this cognito group will have FULL access to all operations within Lamassu, so make sure to only assign     authorized users.</li> <li><code>audit</code> group: in contrast, this second group will have limited access.</li> </ul> <p>Create and assign the users within your cognito user pool under the <code>Groups</code> tab</p> <p>Lamassu Helm Chart</p> <p>Note that we will map those groups into actual lamassu roles later on while configuring the helm chart under <code>services.auth.authorization</code></p> <p>Configure Lamassu helm chart with the following section. Make sure to replace:</p> <ul> <li><code>COGNIT_AWS_REGION</code></li> <li><code>COGNITO_HOSTED_UI_URL</code></li> <li><code>COGNITO_USER_POOL_ID</code></li> <li><code>COGNITO_CLIENT_ID</code></li> </ul> <p>As well as map the appropriate cognito groups under <code>services.auth.authorization</code></p> <pre><code>services:\n  keycloack:\n    enabled: false\nauth:\n  oidc:\n    frontend:\n      authority: https://cognito-idp.&lt;COGNIT_AWS_REGION&gt;.amazonaws.com/&lt;COGNITO_USER_POOL_ID&gt;\n      clientId: &lt;COGNITO_CLIENT_ID&gt;\n      awsCognito:\n        enabled: true\n        hostedUiDomain: \"&lt;COGNITO_HOSTED_UI_URL&gt;\"\n  apiGateway:\n    jwksUrl: https://cognito-idp.&lt;COGNIT_AWS_REGION&gt;.amazonaws.com/&lt;COGNITO_USER_POOL_ID&gt;/.well-known/jwks.json\n  authorization:\n    rolesClaim: \"cognito:groups\"\n    roles:\n      admin: pki-admin\n      operator: audit\n</code></pre>"},{"location":"deployment/infra/deploy-k3s/","title":"Installing Kubernetes on K3s","text":""},{"location":"deployment/infra/deploy-k3s/#k3s","title":"K3s","text":"<p>Yo can use K3s Kubernetes distribution as Kubernetes infraestructure for Lamassu. Please, follow the installation steps described in the K3s documentation https://docs.k3s.io/quick-start to get a K3s instance up and running.</p>"},{"location":"deployment/infra/deploy-k3s/#install-k3s","title":"Install K3s","text":"<pre><code>curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=v1.26 INSTALL_K3S_EXEC=\"--disable traefik\" K3S_KUBECONFIG_MODE=\"644\" sh -s -\nmkdir .kube\ncat /etc/rancher/k3s/k3s.yaml &gt; .kube/config\n</code></pre>"},{"location":"deployment/infra/deploy-k3s/#install-helm","title":"Install helm","text":"<pre><code>curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n</code></pre>"},{"location":"deployment/infra/deploy-k3s/#install-nginx-ingress-controller","title":"Install Nginx Ingress controller","text":"<pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.2/cert-manager.yaml\n</code></pre>"},{"location":"deployment/infra/deploy-k3s/#install-cert-manager","title":"Install Cert Manager","text":"<pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n</code></pre>"},{"location":"deployment/infra/deploy-k3s/#k9s","title":"K9s","text":"<p>We recommend installing K9s, a terminal based client application, as it comes handy while debugging any kubernetes related resource, including watching pod/container logs, deleting pods, scaling replicas and much more: https://k9scli.io/topics/install/</p> <p></p>"},{"location":"deployment/infra/deploy-microk8s/","title":"Installing Kubernetes on MicroK8s","text":""},{"location":"deployment/infra/deploy-microk8s/#microk8s","title":"MicroK8S","text":"<p>We recommend installing microk8s on top of any Ubuntu distribution as it is well maintained by the ubuntu community. Other distributions may also be supported.</p> <p>Start by downloading kubernetes from microk8s official site: https://microk8s.io/docs/getting-started</p> <p>Once you have a running instance, make sure to enable the required plugins:</p> <ul> <li> <p>StorageClass: Enable a basic storage class provider by enabling the plugin</p> <pre><code>microk8s enable hostpath-storage\n</code></pre> </li> <li> <p>CoreDNS: This service is not provisioned by default. Run the following command to enable it</p> <pre><code>microk8s enable dns\n</code></pre> </li> <li> <p>Ingress Controller:  This distribution has an easy way of installing this plugin by running:</p> <pre><code>microk8s enable ingress\n</code></pre> <p>Once the ingress controller is installed, apply this patch to allow mutual TLS connections to go through the nginx controller</p> <pre><code>microk8s kubectl -n ingress patch ds nginx-ingress-microk8s-controller --type=json -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--enable-ssl-passthrough\"}]'\n</code></pre> </li> <li> <p>CertManager: To enable the plugin run:</p> <pre><code>microk8s enable cert-manager\n</code></pre> </li> </ul> <p>MicroK8s embeds two main subcommands that will be used later on, it is recommended adding two aliases on the <code>kubectl</code> and <code>helm</code> subcommands as follows:</p> <pre><code>echo \"alias kubectl='microk8s kubectl'\" &gt;&gt; ~/.bash_aliases\necho \"alias helm='microk8s helm'\" &gt;&gt; ~/.bash_aliases\nsource ~/.bash_aliases\n</code></pre>"},{"location":"deployment/infra/deploy-microk8s/#k9s","title":"K9s","text":"<p>We recommend installing K9s, a terminal based client application, as it comes handy while debugging any kubernetes related resource, including watching pod/container logs, deleting pods, scaling replicas and much more: https://k9scli.io/topics/install/</p> <p></p>"},{"location":"get-started/admin-pki-setup/","title":"PKI Admin Setup","text":"<p>Before jumping any further, please check out the installation process to deploy all Lamassu services. This section will guide you through the basic functionalities provided by our PKI to start provisioning your devices.</p>"},{"location":"get-started/admin-pki-setup/#certification-authorities","title":"Certification Authorities","text":"<p>The first step to provision your devices with digital certificates is to create the Certification Authority. The role of a CA is to issue and manage all the certificates.</p> <p>There are three possibilities to create a new CA:</p> <ul> <li>Create a new CA from scratch</li> <li>Bring your own external CA</li> <li>Import third-party external CA</li> </ul>"},{"location":"get-started/admin-pki-setup/#create-a-new-ca-from-scratch","title":"Create a new CA from scratch","text":"Web ConsoleAPI RestGolang SDK <p>To create a new CA, fill the form taking into account the following considerations:</p> <p>CA Settings:   - Lamassu supports the use of several cryptographic engines, therefore, when creating the CA you can choose which cryptographic engine to use to store the private key.   - Lamassu supports both <code>RSA</code> and <code>EC</code> based CAs. But the configured Crypto Engine may or may not support both algorithms. Check out also the supported key sizes for each algorithm family as it is also dependant on the configured engine.</p> <p>CA Expiration Settings and Issuance Expiration Settings:</p> <ul> <li>The CA expiration time must be greater than the lifespan of the issued certs.</li> <li> <p>There are 3 types of expiration formats, choose one:</p> <ul> <li><code>Duration</code>: Uses a relative time delta to determine the expiration date. The time delta can be specified in seconds (s), minutes (m), hours (h), days (d), weeks (w) or in years (y). Example: <code>10y</code> equals to 10 years. </li> <li><code>End Date</code>: Set a specific date for expiration in ISO 8601 format.</li> <li><code>Indefinite Validity</code>: The expiration is fixed to the following timestamp <code>99991231235959Z</code> (31/12/9999 at 23:59:59).</li> </ul> </li> </ul> <p> Create CA from scratch </p> <p>TODO</p> <p>TODO</p>"},{"location":"get-started/admin-pki-setup/#bring-your-own-external-ca","title":"Bring your own external CA","text":"Web ConsoleAPI RestGolang SDK <p>To import an external CA, fill the form with the following considerations:</p> <p>CA Settings:</p> <ul> <li>The configured Crypto Engine may or may not support importing external CAs.</li> <li>Select the corresponding crypto engine</li> <li>The CA name MUST be unique.</li> <li>Import x509 PEM Certificate and Private Key in PEM Format</li> </ul> <p>Issuance Expiration Settings:   - The CA expiration time must be greater than the lifespan of the issued certs.   - <code>Duration</code>: Uses a relative time delta to determine the expiration date.  Import CA from scratch </p> <p>TODO</p> <p>TODO</p>"},{"location":"get-started/admin-pki-setup/#import-third-party-external-ca","title":"Import third-party external CA","text":"Web ConsoleAPI RestGolang SDK <p>To import an third-party external CA, fill the form with the following considerations:</p> <p>CA Settings:   - The CA name MUST be unique.   - Import x509 PEM Certificate</p> <p> Import third-party CA from scratch </p> <p>TODO</p> <p>TODO</p>"},{"location":"get-started/admin-pki-setup/#device-manufacturing-systems","title":"Device Manufacturing Systems","text":"<p>The second step before provisioning the devices is to create a DMS. The DMS is responsible for issuing and managing digital certificates.</p> Web ConsoleAPI RestGolang SDK <p>To create a DMS, I filled in the form with the following considerations:</p> <p>DMS Definition:</p> <ul> <li>The DMS name MUST be unique.</li> <li>Deployment Mode MUST be Hosted by Lamassu  DMS Definition </li> </ul> <p>Enroll Device Registration:</p> <ul> <li>Registration Mode can be of two types:<ul> <li>JITP: All devices are provisioned, i.e. those that are registered and those that are not.</li> <li>Enforce Pre Registration: Only pre-registered devices are provisioned.</li> </ul> </li> <li>Choose the Icon the device is to have</li> <li>Tags associated with the device  Enroll Device Registration </li> </ul> <p>Enrollment Settings:</p> <ul> <li>The protocol used for the enrolment process is EST and the authentication is MutualTLS.</li> <li>Select the CA through which the certificates are to be issued</li> <li>Select the validation CAs to authorise device enrolment.</li> <li>In case you want to enroll devices that are already provisioned, select the Allow Override Enrollment variable.</li> <li>The Chain Validation Level is explained in the provisioning flows section.  Enrollment Settings </li> </ul> <p>Reenrollment Settings:</p> <ul> <li>If you want to allow the reenrollment of devices with expired certificate, you have to activate the flag Allow Expired Renewal.</li> <li>Configure the period from which certificate renewal is to be allowed</li> <li>Select additional CAs to validate/authorise device reenrollment.  Reenrollment Settings </li> </ul> <p>CA distribution:</p> <ul> <li>Select the certificates of the CAs to be sent via the CACerts endpoint.  CA distribution </li> </ul> <p>AWS IoT Settings:</p> <ul> <li>Select the type of shadow to be created on the device, Classic Shadow or Named Shadow.  AWS IoT Settings </li> </ul> <p>TODO</p> <p>TODO</p>"},{"location":"get-started/device-integration/","title":"Device Integration","text":""},{"location":"get-started/device-integration/#core-operations","title":"Core Operations","text":""},{"location":"get-started/device-integration/#obtain-the-first-certificate","title":"Obtain the first certificate","text":"<p>Warning</p> <p>One common source of problems while integrating devices with Lamassu comes during the TLS-Handshake process between the PKI and the device.</p> <pre><code>graph LR\n  A[Device] --&gt; B[Proxies: i.e. AWS NLB];\n  B --&gt; C[Kubernetes Nginx Ingress Controller];\n  C --&gt; D[Lamassu API GW];\n  D --&gt; E[DMS Manager];\n  style B fill:#ddd,stroke:#333,stroke-width:1px\n  style C fill:#ddd,stroke:#333,stroke-width:1px</code></pre> <p><code>SNI</code> is required during the TLS-Handshake by <code>Kubernetes Nginx Ingress Controller</code> to be able to route traffic to <code>Lamassu API GW</code>. Otherwise Lamassu won't get an intact Mutual TLS connection, witch implies that Lamassu will receive an HTTP request without the proper device certificate resulting in an invalid enrollment.</p> <ol> <li>Obtain the Bootstrap certificate signed by the validation CA configured in the creation of the DMS</li> <li>Perform device enrollment using the EST protocol and the URL https://dev.lamassu.io/api/dmsmanager/.well-known/est/{dms_name}/simpleenroll</li> </ol> Web ConsoleAPI RestGolang SDK <ul> <li> <p>In the ISSUED CERTIFICATE screen of the validation CA, click on the icon \"plus\".  Issued certificate </p> </li> <li> <p>Generate or Import the CSR.  Generate CSR </p> </li> <li> <p>Generate the certificate  Generate Certificate </p> </li> </ul> <p>TODO</p> <p>TODO</p>"},{"location":"get-started/device-integration/#renew-certificates","title":"Renew certificates","text":"<p>Perform device reenrollment using the EST protocol and the URL https://dev.lamassu.io/api/dmsmanager/.well-known/est/{dms_name}/simplereenroll</p>"},{"location":"get-started/device-integration/#trusted-certificate-authorities","title":"Trusted Certificate Authorities","text":""},{"location":"get-started/device-integration/#device-monitoring-vs-cloud-monitoring","title":"Device monitoring vs Cloud Monitoring","text":""},{"location":"get-started/device-integration/#enable-aws-iot-connector","title":"Enable AWS IoT Connector","text":""},{"location":"get-started/usage-flows/","title":"Provisioning Flows","text":""},{"location":"get-started/usage-flows/#standard-provisioning-dms","title":"Standard Provisioning - DMS","text":"<p>DMS stands for Device Manufacturing System and stands at the core of Lamassu. It is the central piece that tides CAs with your devices in an automatized and standardized manner.</p> <p>Instead of having to create your own integrations between Lamassu and your devices, a DMS provides a set of endpoints that should be invoked by a device.</p>"},{"location":"get-started/usage-flows/#enrollment-protocols","title":"Enrollment Protocols","text":"<p>The enrollment protocol defines witch endpoints</p>"},{"location":"get-started/usage-flows/#est-rfc7030","title":"EST - RFC7030","text":""},{"location":"get-started/usage-flows/#authentication-modes","title":"Authentication Modes","text":""},{"location":"get-started/usage-flows/#mtls","title":"MTLS","text":"<p>In the EST protocol, MTLS is used for the connection between the server and the client, i.e. the client must connect with a certificate and its corresponding private key. This certificate is used to authenticate the client in order to authorise or deny the enrollment/reenrollment request.</p>"},{"location":"get-started/usage-flows/#chain-validation-level","title":"Chain Validation level","text":"<p>In the MTLS connection, when performing the Enroll process, the client can send the certificate chain. The certificate chain is a sequence of certificates that starts with the client certificate and goes all the way to the root certificate authority. Each certificate in the chain is signed by the previous one, and this process continues until the root certificate is reached. In this case, the root certificate is stored in Lamassu.</p> <p></p> <p>In order to perform the verification of the certificates in the chain, the variable <code>chain_validation_level</code> has been added in the creation of the DMS to indicate up to which level the verification is to be performed.</p> <ul> <li><code>chain_validation_level</code>: <code>-1</code> - All certificates in the chain are verified.</li> <li><code>chain_validation_level</code>: <code>1</code> - The certificate is verified up to level 1 of the chain.</li> <li><code>chain_validation_level</code>: <code>2</code> - Certificates are verified up to level 2 of the chain.</li> <li><code>chain_validation_level</code>: <code>n</code> - Certificates are verified up to level N of the chain.</li> </ul>"},{"location":"get-started/usage-flows/#psk","title":"PSK","text":""},{"location":"get-started/usage-flows/#preregistration","title":"PreRegistration","text":""},{"location":"get-started/usage-flows/#jitp","title":"JITP","text":""},{"location":"get-started/usage-flows/#pre-registered-simple-infinite-window","title":"Pre Registered - Simple (Infinite Window)","text":""},{"location":"get-started/usage-flows/#pre-registered-manual-enabled-window-timed","title":"Pre Registered - Manual Enabled Window (timed)","text":""},{"location":"get-started/usage-flows/#cloud-integrations","title":"Cloud Integrations","text":""},{"location":"get-started/usage-flows/#custom-provisioning","title":"Custom Provisioning","text":""},{"location":"k8s/4-install-lamassu/","title":"4. Install Lamassu","text":""},{"location":"k8s/4-install-lamassu/#core-deployment-oss","title":"Core Deployment - OSS","text":"<pre><code>cat &gt; lamassu.yaml &lt;&lt; \"EOF\"\n\ndomain: dev.lamassu.io\n\npostgres: \n  hostname: \"postgresql\"\n  port: 5432\n  username: \"admin\"\n  password: \"admin\"\n\namqp:\n  hostname: \"rabbitmq\"\n  port: 5672\n  username: \"user\"\n  password: \"user\"\n  tls: false\n\nservices:\n  ca:\n    engines:\n      defaultEngineID: \"golang-1\"\n      golang: \n      - id: \"golang-1\"\n        storage_directory: \"/data\"\n        metadata:\n          prod-ready: \"false\"\n      awsKms: \n      awsSecretsManager:\n      pkcs11:\n      hashicorpVault:\nEOF\n</code></pre> <pre><code>export NS=lamassu-dev\nhelm repo add lamassuiot http://www.lamassu.io/lamassu-helm/\nhelm install lamassu lamassuiot/lamassu -n $NS -f lamassu.yaml\n</code></pre>"},{"location":"k8s/4-install-lamassu/#core-deployment-alternatives","title":"Core Deployment - Alternatives","text":""},{"location":"k8s/4-install-lamassu/#donwstream-certificate-with-lets-encrypt-cert-manager","title":"Donwstream Certificate with Let's Encrypt &amp; Cert Manager","text":"<p>First create the Issuer resource through which the Lets Encrypt certificates will be issued:</p> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: letsencrypt-issuer\n  namespace: $NS\nspec:\n  acme:\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      name: letsencrypt-issuer\n    skipTLSVerify: true\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\nEOF\n</code></pre>"},{"location":"k8s/4-install-lamassu/#external-oidc-provider","title":"External OIDC Provider","text":"<p>By default the helm chart deploys keycloak as the IAM provider, but it can be disabled and use your own IAM provider based on the OIDC protocol.  Start by creating the new values file named <code>external-oidc.yml</code> to use by helm while installing:</p> <pre><code>services:\n keycloak:\n   enabled: false\n</code></pre> <p>Make sure that the OIDC provider generates JWT with some claim including the user's roles or groups.  We will be mapping those values to Lamssu's authorisation service by mapping the appropriate token claim.</p> <pre><code>auth:\n  authorization:\n    rolesClaim: \"user_roles\"\n    roles:\n      admin: administrator\n      operator: viewer\n</code></pre> <p>Note</p> <p><code>rolesClaim</code> can be a json path such as <code>user_props.roles</code>. The only requisite is that the claim MUST be an array.</p> <p>Lets assume that the Admin Users gets a JWT issued by the ODIC witch has the following info:</p> <pre><code>{\n  \"exp\": 1693246697,\n  \"iat\": 1693246397,\n  \"jti\": \"2565228f-f640-468c-9087-4885fe55c172\",\n  \"iss\": \"https://dev.lamassu.io/auth/realms/lamassu\",\n  \"aud\": \"account\",\n  \"sub\": \"045b7aa3-a597-4fc7-8b95-641c492f8332\",\n  \"typ\": \"Bearer\",\n  \"azp\": \"frontend\",\n  \"realm_access\": {\n    \"roles\": [\n      \"default-roles-lamassu\",\n      \"offline_access\",\n      \"uma_authorization\",\n      \"pki-admin\"\n    ]\n  },\n  \"scope\": \"openid email profile\",\n  \"sid\": \"c8ffb269-bcc8-4cff-9fda-f5fbba7ab128\",\n  \"preferred_username\": \"My Admin user\",\n}\n</code></pre> <p>As it can be seen, the JWT has a claim <code>realm_access.roles</code> including a <code>pki-admin</code> role. To instruct lamassu to use that role as the administrator role,  configure the roles section <code>auth.authorization.roles.admin</code> mapping to such value.</p> <p>The list of roles to be mapped as of now, is as follows (click each role to get more info):</p> <ul> <li><code>admin</code></li> <li><code>operator</code></li> </ul> <p>Lets asume</p>"},{"location":"k8s/4-install-lamassu/#addons","title":"Addons","text":""},{"location":"k8s/4-install-lamassu/#alerts","title":"Alerts","text":""},{"location":"k8s/4-install-lamassu/#simulation-tools","title":"Simulation Tools","text":""},{"location":"k8s/4-install-lamassu/#aws-cloud-connector","title":"AWS Cloud Connector","text":""},{"location":"system-administration/architecture/","title":"Architecture","text":""},{"location":"system-administration/backup-recover/","title":"Backup &amp; Recover","text":""},{"location":"tech-ref/apis/","title":"APIs","text":""},{"location":"tech-ref/apis/#using-the-apis","title":"Using the APIs","text":"<p>Lamassu provides easy to use GO clients for most of its APIs to help speeding up the development of third-party applications. Before using thees clients, it is important to identify the path taken by the request. Unless the application using the GO clients (or any other http client such as <code>curl</code>) is deployed within the same docker network, the request will be handled by the API Gateway component. Otherwise check the internal usage section.</p>"},{"location":"tech-ref/apis/#through-the-api-gateway","title":"Through the API Gateway","text":"GoCurl <pre><code>package main\n\nimport (\n\"net/url\"\nlamassuCAClient \"github.com/lamassuiot/lamassuiot/pkg/ca/client\"\ncaDTO \"github.com/lamassuiot/lamassuiot/pkg/ca/common/dto\"\n\"github.com/lamassuiot/lamassuiot/pkg/utils/client\"\n)\n\nfunction main (){\n    lamassuGatewayURL := \"dev.lamassu.io\"\n    apiCAFile := \"path/to/apigw.crt\"\n\n    caClient := lamassuCAClient.NewLamassuCAClient(client.ClientConfiguration{\n        URL: &amp;url.URL{\n            Scheme: \"https\",\n            Host:   lamassuGatewayURL,\n            Path:   \"/api/ca/\",\n        },\n        AuthMethod: client.JWT,\n        AuthMethodConfig: &amp;client.JWTConfig{\n            Username: \"enroller\",\n            Password: \"enroller\",\n            URL: &amp;url.URL{\n                Scheme: \"https\",\n                Host:   \"auth.\" + lamassuGatewayURL,\n            },\n            CACertificate: apiCAFile,\n        },\n        CACertificate: apiCAFile,\n    })\n\n    ca, err = caClient.CreateCA(context.Background(), caDTO.Pki, caName, caDTO.PrivateKeyMetadata{KeyType: \"rsa\", KeyBits: 2048}, caDTO.Subject{CN: caName}, 365*time.Hour, 30*time.Hour)\n}\n</code></pre> <p>Define the DOMAIN, TOKEN and CA_NAME <pre><code>export AUTH_ADDR=auth.$DOMAIN\nexport TOKEN=$(curl -k --location --request POST \"https://$AUTH_ADDR/auth/realms/lamassu/protocol/openid-connect/token\" --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'grant_type=password' --data-urlencode 'client_id=frontend' --data-urlencode 'username=enroller' --data-urlencode 'password=enroller' | jq -r .access_token)\nexport CA_ADDR=$DOMAIN/api/ca\nexport CA_NAME=$(uuidgen)\n</code></pre></p> <p>Creating CA <pre><code>    export CREATE_CA_RESP=$(curl -k -s --location --request POST \"https://$CA_ADDR/v1/pki\" --header \"Authorization: Bearer ${TOKEN}\" --header 'Content-Type: application/json' --data-raw \"{\\\"ca_duration\\\": 262800, \\\"issuance_duration\\\": 175200, \\\"subject\\\":{ \\\"common_name\\\": \\\"$CA_NAME\\\",\\\"country\\\": \\\"ES\\\",\\\"locality\\\": \\\"Arrasate\\\",\\\"organization\\\": \\\"LKS Next, S. Coop\\\",\\\"state\\\": \\\"Gipuzkoa\\\"},\\\"key_metadata\\\":{\\\"bits\\\": 4096,\\\"type\\\": \\\"RSA\\\"}}\")\n</code></pre></p>"},{"location":"tech-ref/apis/#filtering-sorting-and-pagination","title":"Filtering, Sorting and Pagination","text":"<p>Lamassu API supports filtering, sorting and pagination.</p> <p>The filter can be form by the following parameters, being each of them optional:</p> <ul> <li><code>filter= attribute[operator]=value</code></li> <li><code>sort_by=attribute.[asc|desc]</code></li> <li><code>limit=value</code> . Limits the maximun number of results of the query</li> <li><code>offset=value</code> . In addition to <code>limit</code>, implements pagination. It defines the   index of the first value from the resulting query.</li> </ul> <p>Example</p> <pre><code>/v1/devices?filter=id[contains]=device_id&amp;sort_by=id.asc&amp;limit=100&amp;offset=15\n\n/v1?filter=id[contains]=dms_id&amp;sort_by=id.desc\n</code></pre>"},{"location":"tech-ref/apis/#operators","title":"Operators","text":"<p>Depending of the data type of the parameters, the supported operators will vary.</p> <ul> <li>Strings : <code>equals</code>, <code>notequals</code>, <code>contains</code>, <code>notcontains</code></li> <li>Dates: <code>before</code>, <code>after</code>, <code>is</code>, <code>isnot</code></li> <li>Enums: <code>is</code>, <code>isnot</code></li> <li>Numbers: <code>lessthan</code>, <code>greaterthan</code>, <code>lessorequal</code>, <code>gretaerorequal</code>, <code>equal</code>,   <code>notequal</code></li> </ul>"},{"location":"tech-ref/architecture/","title":"Architecture","text":""},{"location":"tech-ref/architecture/#core-services","title":"Core Services","text":"<p>Lamassu has been designed to be modular and keep the core services as simple as possible encapsulating on each service a set of well defined responsibilities. The core services are those that bring the main functionalities of a modern PKI for industrial IoT use cases. The core services are:</p>"},{"location":"tech-ref/architecture/#ca","title":"CA","text":"<p>The Certificate Authority is the service in charge of issuing and managing the life cycle of the certificate. This service manages two different types of certificates:</p> <ul> <li>PKI Certificates: This kind of certificates are used by regular end entities such as the devices that connect to the PKI.</li> <li>Internal Certificates: In contrast with the previous type of certificates, these certificate authorities have a more restricted use. Their creation should     be limited to the most trusted entities of the PKI. For instance, DMS certificates are issued by an internal CA named LAMASSU-DMS-MANAGER that is created     on boot up. For the moment this is the only internal CA that is supported by Lamassu, but we are exploring the possibility of managing the certificates used     by the services themselves.</li> </ul> <p>On top of the regular functionalities that can be performed on this service such as creating new CAs, issuing or revoking certificates, this service is in charge of maintaining an accurate state of the managed entities (both CA certificates and regular certificates). In order to do so, a periodic task is scheduled once a day to check the status of validity of all certificates.</p> <p>Warning</p> <p>This feature does not perform well on deployments that have issued many certificates as it is performed on a sequential single threaded process. We are working on a solution to improve this.</p> <p>There are 4 different status that a certificate can have:</p> <p></p> <p>The Active state indicates that a certificate is valid and can be trusted by end entities. The Expired state indicates that a certificate has reached its expiration date and is no longer valid and cannot be trusted anymore. The Revoked state is used by PKI admins when a security incident or unexpected situations arise and the certificate or CA certificate is no longer trusted. Recently a new state has been added to the CA service, the About to expire state. This state indicates, as the name suggests, that the certificate will expire shortly. The current threshold is set to 30 days and cannot be configured. This state doesn't affect the validity of the certificate, but it is used to notify the PKI admins that the certificate is about to expire and they should take action.</p> <p>The CA service uses a relational database to store the issued certificates and basic information regarding the provisioned CAs. To configure the database connection, set the following environment variables:</p> Environment Variable Description POSTGRES_HOSTNAME Hostname or address to connect to a running postgres database POSTGRES_PORT Port for the postgres instance POSTGRES_DATABASE Database to use POSTGRES_USERNAME Username credentials POSTGRES_PASSWORD Password credentials <p>This service has been redesigned to support multiple crypto engines backends. Originally the only supported engine was the one provided by Hashicorp Vault, but the new redesign implementation allows for a more flexible golang like approach, that is by using the <code>crypto.Signer</code> interface. Any new crypto engine can be added by implementing this interface.</p> <p>To provision the CA service with a crypto engine set the following environment variable:</p> Environment Variable Description ENGINE <code>pkcs11</code> | <code>gopem</code> | <code>vault</code> <p>The current supported crypto engines are:</p> <ul> <li>pkcs11: To Use the HSM crypto engine, define the following environment variables before launching the CA service:</li> </ul> Environment Variable Description PKCS11_DRIVER Path to the PKCS11 driver file PKCS11_LABEL Label used by the token to be used PKCS11_PIN PIN code to login and operate the token <ul> <li>gopem - Files</li> </ul> Environment Variable Description GOPEM_DATA Directory where the generated private keys belonging to each CA are stored <p>Although this new design is easier to maintain and operate, we are also keeping the previous implementation of the Hashicorp Vault that does not follow the new interface. The reason being that in order to provide a Vault implementation that follows the new interface, the Enterprise Vault license is required. This is a limitation that we are working on to overcome with the new crypto engine design. The new standard deployment deprecates the use of Vault as the main backend and instead a Software HSM known as SoftHSM v2.</p> <ul> <li>vault - Hashicorp Vault</li> </ul> Environment Variable Description VAULT_ADDRESS Protocol, hostname and port to a vault instance: <code>https://vault:8200</code> VAULT_ROLE_ID Role ID used by the CA service to login to vault VAULT_SECRET_ID Secret ID used by the CA service to login to vault VAULT_CA Path to the CA certificate file for <code>https</code> connections VAULT_UNSEAL_KEY_FILE Path to the unseal vault keys VAULT_PKI_CA_PATH Prefix to use while creating new PKI vault secrets"},{"location":"tech-ref/architecture/#dms-manager","title":"DMS Manager","text":"<p>The DMS Manager is the service in charge of managing the Registration Authority of the PKI. Instead of having a centralized Registration Authority, Lamassu uses a decentralized approach to be easily integrated by Device Manufacturing Systems. This way, each DMS has the authority to request the issuance of a certificate for a device being manufactured. Instead of relying on just one registration authority, Lamassu delegates the authorization of the issuance to the Local Registration Authority or LRA.</p> <p>Each DMS is entitled to authorize the issuance of a certificate to a subset of CAs of the entire PKI defined by the administrator. Each DMS has a list of authorized CAs that may be used during the enrollment process. Once an enrollment process is initiated, the PKI will check that the provided DMS certificate is authorized to issue certificates for the requested CA. The authorization list can be updated to add newly created CAs or remove CAs that are no longer needed.</p> <p>The DMS certificates that are used to authenticate the DMS are issued by an internal CA named LAMASSU-DMS-MANAGER. This CA is created by default when the PKI is deployed as stated earlier.</p> <p>In Lamassu there are two different types of DMS Manual DMS and Cloud Hosted DMS. In the Manual DMS the communications between the Device and the DMS does not follow a standard and is done according to the needs/requirements of the device, instead, in the Cloud Hosted DMS the communication between the device and the DMS is done using the EST protocol. On the other hand, in Cloud Hosted DMS mode the device to communicate with the DMS and to be able to request a Certificate must have a Bootstrap certificate. By means of this certificate the DMS authorizes or rejects the device's request. Moreover, the DMS of Lamassu has two different options when it has to authorize devices to use the enrollment functionality. On the one, there is an option to allow only the devices which are registered in the device manager. On the other hand, the other option allows all the devices, even if the device is not registered in the device manager.</p> <p>In Manual DMS mode the authorization is done manually by the operator.</p> <p></p> <p>The DMS Manager service uses a relational database to store the list of authorised CAs and basic information regarding the provisioned DMS certificates. To configure the database connection, set the following environment variables:</p> Environment Variable Description POSTGRES_HOSTNAME Hostname or address to connect to a running postgres database POSTGRES_PORT Port for the postgres instance POSTGRES_DATABASE Database to use POSTGRES_USERNAME Username credentials POSTGRES_PASSWORD Password credentials <ul> <li>CA - The DMS service uses a Lamassu CA Client to update the status of the internal CA LAMASSU-DMS-MANAGER</li> </ul> Environment Variable Description LAMASSU_CA_ADDRESS Lamassu CA service name and port : <code>ca:8087</code> LAMASSU_CA_CERT_FILE Path to the internal CA"},{"location":"tech-ref/architecture/#device-manager","title":"Device manager","text":"<p>At its core, the device manager is the main entry point for the enrollment process. It implements the EST protocol that must be used to obtain new certificates. On top of that, this service manages the registration of new devices and to keep a track of the device status. Similar to the CA service, the device manager also schedules a periodic task to check the status of the devices. This task is launched once a day to check the status of validity of all certificates associated by each device.</p> <p>Warning</p> <p>This feature does not perform well on deployments that have issued many certificates as it is performed on a sequential single threaded process. We are working on a solution to improve this.</p> <p>There are 5 different status a device can have:</p> <p></p> <p>The Pending Provisioning state reflects that a device entity has been created but no certificate has been issued yet. The Fully Provisioned state indicates that a device has all the device slots with active certificates. The With warnings state indicates that a device has one or more slots with certificates that are either expired or have been revoked. The Requires Action state indicates that a device has one or more slots with certificates that are about to expire. The Decommissioned state indicates that a device has been decommissioned and no longer needs to be tracked by the PKI.</p> <p>Each device can have certificates signed by different authorised CAs. Slots are used to link a particular device with a CA. Each Slot can store multiple certificates, but only one of them can be in an ACTIVE status.</p> <p>The Device Manager service uses a relational database to store the information of the devices, certificates and slots, also, logs of devices and slots are created when an specific action is carried out, for example, in the creation. To configure the database connection, set the following environment variables:</p> Environment Variable Description POSTGRES_HOSTNAME Hostname or address to connect to a running postgres database POSTGRES_PORT Port for the postgres instance POSTGRES_DATABASE Database to use POSTGRES_USERNAME Username credentials POSTGRES_PASSWORD Password credentials <ul> <li>CA - The Device Manager service uses a Lamassu CA Client to update the status of the certificates associated to the devices</li> </ul> Environment Variable Description LAMASSU_CA_ADDRESS Lamassu CA service name and port: <code>ca:8087</code> LAMASSU_CA_CERT_FILE Path to the internal CA <ul> <li>DMS - The Device Manager service uses a DMS Client to update the status of the certificates associated to the devices</li> </ul> Environment Variable Description LAMASSU_DMS_MANAGER_ADDRESS Lamassu DMS service name and port: <code>dms-manager:8085</code> LAMASSU_DMS_MANAGER_CERT_FILE Path to the internal DMS <ul> <li>Other - Other configuration variables</li> </ul> Environment Variable Description MINIMUM_REENROLL_DAYS The minimum days that a certificate must be valid in order to reenroll"},{"location":"tech-ref/architecture/#cloud-proxy","title":"Cloud Proxy","text":"<p>The Cloud Proxy allows integrating CAs created in cloud providers, it is in charge of syncronizing the data between cloud providers and the data of Lamassu. In particular, Lamassu incorporates AWS and Azure Cloud integration.</p> <p>The Cloud Proxy service uses a relational database, to store the information of the Lamassu CAs and to assign a connector Id. The connector will be used to bind each Lamassu CA to their equivalent in the external cloud providers. To configure the database connection, set the following environment variables:</p> Environment Variable Description POSTGRES_HOSTNAME Hostname or address to connect to a running postgres database POSTGRES_PORT Port for the postgres instance POSTGRES_DATABASE Database to use POSTGRES_USERNAME Username credentials POSTGRES_PASSWORD Password credentials <ul> <li>Consul - Cloud connectors are dynamically registered, to have a record of what services exist, they self-register in consul. Cloud Proxy consumes consul     to ask which service are registered.</li> </ul> Environment Variable Description CONSUL_PROTOCOL Protocol used to connect to consul instance : <code>https</code> CONSUL_HOST Hostname to a running consul instance CONSUL_PORT Port for the consul instance CONSUL_CA Path to the internal CA <ul> <li>CA - The Device Manager service uses a Lamassu CA Client to update the status of the certificates associated to the devices</li> </ul> Environment Variable Description LAMASSU_CA_ADDRESS Lamassu CA service name and port: <code>lamassu-ca:8087</code> LAMASSU_CA_CERT_FILE Path to the internal CA"},{"location":"tech-ref/architecture/#alerts","title":"Alerts","text":"<p>Alerts is the service in charge of sending mails. Users can be subscribed to particular events, such as, when a certificate is about to expire, and they will be notified via mail.</p> <p>Events from all services above (Lamassu CA, DMS Manager and Device Manager) that create, revoke or modify the status of any certificate publish a message to RabbitMQ broker. The message sent to the \"alerts\" queue will be consumed by the Alerts service and will send a mail to all the users subscribed to that event.</p> <p></p> <p>Alerts service uses a relational database, to store the information of subscriptions and last executed events information. To configure the database connection, set the following environment variables:</p> Environment Variable Description POSTGRES_HOSTNAME Hostname or address to connect to a running postgres database POSTGRES_PORT Port for the postgres instance POSTGRES_DATABASE Database to use POSTGRES_USERNAME Username credentials POSTGRES_PASSWORD Password credentials <ul> <li>Configuration - Alerts service allows custom configuration to send SMTP mails, such as:</li> </ul> Environment Variable Description SMTP_FROM Email address of the sender of alerts generated by the service SMTP_INSECURE Boolean value to enable or disable secure SMTP session SMTP_ENABLE_SSL Boolean value to enable or disable SSL connection SMTP_USERNAME Username credentials SMTP_PASSWORD Password credentials SMTP_HOST Hostname or address to SMTP server: <code>25</code> SMTP_PORT Port for the SMTP instance <ul> <li>Templates - Alerts service allows custom configuration to send SMTP mails, such as:</li> </ul> Environment Variable Description TEMPLATE_HTML Template in HTML format to create mail format TEMPLATE_JSON Template in JSON format to rename queue names by readable text"},{"location":"tech-ref/architecture/#ocsp","title":"OCSP","text":"<p>OCSP (Online Certificate Status Protocol) service, allows to determine the validity status of an X.509 digital certificate.</p> <p>OCSP service's response must be signed with a public private key, so the following variables must be specified.</p> Environment Variable Description SIGNER_CERT Lamassu CA service name and port: <code>ca:8087</code> SIGNER_KEY Path to the internal CA <ul> <li>CA - OCSP service uses a Lamassu CA Client to update the status of the certificates associated to the devices</li> </ul> Environment Variable Description LAMASSU_CA_ADDRESS Lamassu CA service name and port: <code>ca:8087</code> LAMASSU_CA_CERT_FILE Path to the internal CA"},{"location":"tech-ref/architecture/#lamassu-compose","title":"Lamassu Compose","text":"<p>Lamassu Compose offers a SECURE deployment of the set of microservices required to manage an industrial PKI. The architecture presented on the following image reflects the interconnection of the different services mainly using the HTTP Protocol. The use of this deployment offers the following non functional requirements by leveraging the use of an API Gateway:</p> <ul> <li> <p>Centralized point of access: Each microservice listens on a different port which ends up being challenging for developers and users. With the use of the     API Gateway, the user will always access the same host and port address. Port <code>80</code> for HTTP connections and port <code>443</code> for HTTPS connections.</p> </li> <li> <p>Authentication: In order to invoke any endpoint, the API Gateway enforces each request to present a JWT. Upon receiving an HTTP request, the gateway     validates the presented token against the authentication server.</p> </li> <li> <p>Authorization: Another key aspect is enforcing an authorization schema. Lamassu has been configured in such way that only specific endpoints are     accessible by non admin users.</p> </li> <li> <p>Tracing: Logging the life of an HTTP request can be helpful during the debugging process of such complex application. The tracing aspect eases this     process by injecting a unique identifier to each request that is then printed out by each microservice logs.</p> </li> <li> <p>Mutual TLS authentication: As mentioned earlier the gateway acts as the traffic orchestrator knowing where each service is and redirecting the traffic     accordingly. To prevent any unauthorized request as well as protecting the communications channel between the Gateway itself and the upstream service, the     API Gateway initiates a mutual TLS connection to ensure such thing.</p> </li> </ul> <p></p>"},{"location":"tech-ref/architecture/#cloud-providers-add-ons","title":"Cloud Providers Add-ons","text":""},{"location":"tech-ref/aws-iot-connector/","title":"AWS IoT Connector","text":""},{"location":"tech-ref/cloud-events/","title":"Cloud Events","text":"<p>The CA, DMS Manager and Device Manager services publish in Rabbitmq cloud events of the significant operations they perform. These events are consumed by other Lamassu services such as Alerts or Cloud Proxy.</p>"},{"location":"tech-ref/cloud-events/#ca","title":"CA","text":"Event Type Description Data Structure ca.create Event sent when the CA is created. The cloud proxy receives the event to create the CA in the cloud. CA Data Structure ca.import Event sent when importing a CA CA Data Structure ca.update.status Event sent when the CA is updated. The cloud proxy receives the event to update the status of the CA in the cloud. Valid status: ACTIVE, EXPIRED, REVOKED, NEARING_EXPIRATION and CRITICAL_EXPIRATION CA Data Structure ca.update.metadata Event to update the metadata of a CA CA Data Structure ca.delete Event sent when deleting a CA Certificate Data Structure ca.sign-certificate Event sent when a certificate is signed Certificate Data Structure certificate.update.status Event sent when the status of a certificate is updated. The cloud proxy receives the event and updates the corresponding certificate. Valid status: ACTIVE, EXPIRED, REVOKED, NEARING_EXPIRATION and CRITICAL_EXPIRATION Certificate Data Structure certificate.update.metadata Event to update the metadata of a certificate. Certificate Data Structure"},{"location":"tech-ref/cloud-events/#dms-manager","title":"DMS Manager","text":"Event Type Description Data Structure io.lamassuiot.dms.create Event sent when the DMS is created and received by the cloud proxy to publish to AWS IoT Core the certificates of the CAs associated to the DMS. DMS Data Structure io.lamassuiot.dms.update-status Event to report that the status of the DMS has been updated. Valid status: PENDING_APPROVAL, REJECTED, APPROVED, EXPIRED and REVOKED DMS Data Structure io.lamassuiot.dms.update Event to inform that the DMS has been updated, the cloud proxy receives the event to update the certificates of the CAs. DMS Data Structure io.lamassuiot.dms.update-authorizedcas Event to inform that authorized CAs of the DMS have been updated, the cloud proxy receives the event to update the certificates of the CAs DMS Data Structure"},{"location":"tech-ref/cloud-events/#device-manager","title":"Device Manager","text":"Event Type Description Data Structure io.lamassuiot.device.create Event sent when Device is created Device Data Structure io.lamassuiot.device.update Event sent when Device is updated Device Data Structure io.lamassuiot.device.decommision Event sent when the Device is Uninstalled Device Data Structure io.lamassuiot.device.rotate Event sent when the Device's active certificate is rotated. Slot Data Structure io.lamassuiot.device.revoke Event sent when Device's active certificate is revoked Slot Data Structure io.lamassuiot.device.enroll Event sent when Device enrolment is performed Certificate Data Structure io.lamassuiot.device.reenroll Event sent when the Device is rewired. The event is received by the Cloud Proxy to update the device's digital twin. Certificate Data Structure io.lamassuiot.device.forceReenroll Event sent when you want to force the Device to be rewired. The event is received by the Cloud Proxy to update the device's digital twin. Force Reenroll Data Structure"},{"location":"tech-ref/cloud-events/#data-structures","title":"Data Structures","text":""},{"location":"tech-ref/cloud-events/#ca-data-structure","title":"CA Data Structure","text":"<ul> <li><code>serial_number</code>: <code>(string: \"\")</code> - The Serial Number of the created CA certificate</li> <li><code>issuer_metadata</code>:<ul> <li><code>serial_number</code>: <code>(string: \"\")</code> - The issuer CA certificate serial number</li> <li><code>ca_id</code>:\u00a0<code>(string: \"\")</code> - The issuer CA ID</li> </ul> </li> <li><code>status</code>: <code>(string: \"\")</code> - Status of the created CA certificate, the options are <code>ACTIVE</code>, <code>EXPIRED</code>, <code>REVOKED</code>, <code>NEARING_EXPIRATION</code> and <code>CRITICAL_EXPIRATION</code>.</li> <li><code>certificate</code> <code>(string: \"\")</code> - CA certificate in PEM format and base64-encoded</li> <li><code>key_metadata</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> - Type of the private key, <code>RSA</code> or <code>ECDSA</code>.</li> <li><code>bits</code>: <code>(int: \"\")</code> - Private key size</li> <li><code>strength</code>:\u00a0<code>(string: \"\")</code> - Private key strength <code>LOW</code>, <code>MEDIUM</code> or <code>HIGH</code>.</li> </ul> </li> <li><code>subject</code>: - The Subject of the CA certificate<ul> <li><code>common_name</code>: <code>(string: \"\")</code></li> <li><code>organization</code>:\u00a0<code>(string: \"\")</code></li> <li><code>organization_unit</code>:\u00a0<code>(string: \"\")</code></li> <li><code>country</code>:\u00a0<code>(string: \"\")</code></li> <li><code>state</code>:\u00a0<code>(string: \"\")</code></li> <li><code>locality</code>:\u00a0<code>(string: \"\")</code></li> </ul> </li> <li><code>valid_from</code>: <code>(string: \"\")</code> - Date of issuance of the CA in ISO 8601 format</li> <li><code>valid_to</code>: <code>(string: \"\")</code> - CA expiry date in ISO 8601 format</li> <li><code>revocation_timestamp</code>:\u00a0<code>(string: \"\")</code> - CA revocation date in ISO 8601 format</li> <li><code>engine_id</code>: <code>(string: \"\")</code> - ID of the cryptographic engine through which the CA has been issued</li> <li><code>id</code>: <code>(string: \"\")</code> - ID of the created CA</li> <li><code>metadata</code>:<ul> <li><code>lamassu.io/name</code>: <code>(string: \"\")</code> - CA name in Lamassu</li> </ul> </li> <li><code>issuance_expiration</code>: - Information on how long CA can issue certificates<ul> <li><code>type</code>:\u00a0<code>(string: \"\")</code> - There are two types to indicate when the certificate issue date will be, <code>Time</code> and <code>Duration</code>.</li> <li><code>time</code>: <code>(string: \"\")</code> - If the <code>type</code> is <code>Time</code>, date up to which the CA can issue certificates in ISO 8601 format. If the <code>type</code> is <code>Duration</code>, duration up to which the CA can issue certificates expressed in milliseconds from 1 June 1970 UTC.</li> </ul> </li> <li><code>type</code>: <code>(string: \"\")</code> - CA Type, <code>MANAGED</code> (The private key is generated in the Lamassu cryptographic engine), <code>EXTERNAL</code> (The CA is created outside Lamassu and only the certificate is imported) or <code>IMPORTED</code> (The CA is created outside Lamassu, but, the certificate and the private key are imported).  ``</li> <li><code>creation_ts</code>:\u00a0<code>(string: \"\")</code> - CA creation date in ISO 8601 format</li> </ul> <pre><code>{\n    \"serial_number\": \"b0-32-b8-77-bd-03-17-5a-61-26-fe-40-a7-2e-12-c0-0b-47-a9-6c\",\n    \"issuer_metadata\": {\n        \"serial_number\": \"b0-32-b8-77-bd-03-17-5a-61-26-fe-40-a7-2e-12-c0-0b-47-a9-6c\",\n        \"ca_id\": \"9443a6b7-a3ac-41fd-8bee-5ce6bcb55e08\"\n    },\n    \"status\": \"ACTIVE\",\n    \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY0RENDQThpZ0F3SUJBZ0lWQUxBeXVIZTlBeGRhWVNiK1FLY3VFc0FMUjZsc01BMEdDU3FHU0liM0RRRUIKQ3dVQU1Ha3hDekFKQmdOVkJBWVRBa1ZUTVJFd0R3WURWUVFJRXdoSGFYQjFlbXR2WVRFUk1BOEdBMVVFQnhNSQpRWEp5WVhOaGRHVXhFREFPQmdOVkJBb1RCMGxyWlhKc1lXNHhEREFLQmdOVkJBc1RBMXBRUkRFVU1CSUdBMVVFCkF4TUxRbTl2ZEhOMGNtRndRMEV3SGhjTk1qTXdPVEl3TURnek56RTNXaGNOTWpVd01qRXhNVE0xTkRNd1dqQnAKTVFzd0NRWURWUVFHRXdKRlV6RVJNQThHQTFVRUNCTUlSMmx3ZFhwcmIyRXhFVEFQQmdOVkJBY1RDRUZ5Y21GegpZWFJsTVJBd0RnWURWUVFLRXdkSmEyVnliR0Z1TVF3d0NnWURWUVFMRXdOYVVFUXhGREFTQmdOVkJBTVRDMEp2CmIzUnpkSEpoY0VOQk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBMUp5SjMrdGMKMytIN0FQNWZTS0dDQWVvNFVlNU0zUEZyNGFENSs0N0VyeXdpdXhtS3hoTEtNdXZmalQvWitKbnJvLytNUHVHLwpqK0hBbEQ3bU03cEU0OHVrb2MwS3Y0cWx3SW5TNnQxYkRIQUhVRWNNVXNmRkV3dmJTRmZ3UzdIWmhwOTdVcW5BCkd6enBRNHRYOW1wTGlvWlZ3bVVsZ3EyNjRsdVdYTmtEZExIMHNIS1pkTGEzb1hvU3ZFbmVDdXlTWjIzdHhuakcKd09kZTFCa2o0MDdMbUtCTE4zVm5iZzY1N2FUOC8vd3h3M0NNazZKTUQyR3ZQTHJ5eEZ4Zm5UUnVTSksvWWl6aQpQMGpuK0lGVWtqK1FHNmlKeXkzWVBRRll0NGp1Y1hUcWQ3VEh6a1hLUlBKOXRhVi9DRXB5SzVLdDZtRnBJVDFXCjlxOUhXZ0JTS3JvZEZHWXVJVDlTWHg3QXRialNScmVqbjNxN3Jrc0UxRFZ5cDFIanFYNDNwU2JGd3RBUkpHb2IKR3ZONkZoVSs2Wk9pazJVeC9wb0tlOXhMb0ZzYUNybUxGWjVRYWlTay8yY3R1dk5KRDRja0hYVFh4S3NLQlBrRQppZEh0OUhJS0JoOGJTdWg5aDRrRm5IRVJPbDcrL0ZvV2RPSjBTWFVxbkk1RHgxU2c4Z0ZYRnNndCtYVGRQaXBRCkVhSXo2L2lpVW1iNm9Ib0NENnQ1MER6Vzg3RGx3aG5jOUl5eURBQ3psVEdmb1UwTXp0OUUzYVRBUlRzKzZUTTEKOW9PRVdlMFkwa2J0ZnBHYUlMMG1IdkhPR0hVTHlqSHpjRUc3dW9TZ00vNWoveG1IR2VMcDBvMndEUnpuaTFEaApTQ3BHTW81cC9BcHB1K0hTK1FxMzh6N0Y2M3Y3UENHanpNa0NBd0VBQWFOL01IMHdEZ1lEVlIwUEFRSC9CQVFECkFnR1dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01CMEdBMVVkRGdRV0JCUUtXbUhkeExoZGd4OXJVYStuSG5OSmNhRTdQREFjQmdnckJnRUZCUWNCQVFRUQpNQTR3REFZSUt3WUJCUVVITUFHR0FEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUFhNmFWTlVNakJ4ZXJ0QjFkCmZwQmhDSXl3Y1I1SjU4dzUraklrckZTZzEzQW8yOTlQanJYQzBMTWxva3R1TFIxRVFKaXl5ZGhtUHl5ejRYZG8KNzdZZXkwdW9XOTBtaVNkSVFLdHJ4TGZKZE1jUmR4VmRjdk01VCtSM0Yra3JLYWpFMmNVOGRmTGo2QytXRW8vTwpiNW1CNVR2dFVGdm51WVdvOWFPUjI0andNbmJicDBlcC9CV1JFMndRQ1AxSWlvZzZUSXBueWJXVHRpOE9DNHVVCm1Qd1NtZmtma2p5ckh3L2tSZ2lOQUt5Nlp3ODZWUHhTQ2xPNUtSRUg4Rkx6UmF5ZmtUTDlIem5INzg0NmV1T2gKcEI0UDJYeWxZT2pWaW0rRGc3SU9scE9EWE5GcHVjTTh6TjFPNmhlN240YU5ZaHpYVG5BbnBVTGN6VGxOcjUzWQpwSnJHTzc0akxrUXBTVmF0ZEtKajNqbFRHMyt2blAyelVpN3JxVmtCaFJWVEMwNHQ1SU5aTTR0MlJ4a2hGREpPCkZqdC9LL0RaYkM2ZTROeUtaNndaUHJZYTdxUFdvb3hsV0dQMURDMUVtZ2FwbjRsT0N2bk9kbmpiNXdoZjVncVIKSHUxbWRDOElqWE1QYzkzSU80cy83enBkaUpZNEw1VkhYcmdTMTZ5SThaY2JtVy9HWE9TenN2MjFyMnJ4NnRKRwoyMUptQzR4Y2dIMUozUEdrSXZEQ1hYTzN1NE1ZRE9hRWlVd3dtOVZtMzdMd0toVUxDWkNOaDJ6bmhBYkREbHJnCi9SVkp4VEZXcG1NencxRjNWMFBRVVl5eGk4K3lVMnJBNlhjNEM2aVByTlozY3hCSFVLay8vTngrK2lLZWw2NkkKRld1TE03bEpLcGpaTWhTUk5qbFFmbytSSlFBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\",\n    \"key_metadata\": {\n        \"type\": \"RSA\",\n        \"bits\": 4096,\n        \"strength\": \"HIGH\"\n    },\n    \"subject\": {\n        \"common_name\": \"BootstrapCA\",\n        \"organization\": \"Ikerlan\",\n        \"organization_unit\": \"ZPD\",\n        \"country\": \"ES\",\n        \"state\": \"Gipuzkoa\",\n        \"locality\": \"Arrasate\"\n    },\n    \"valid_from\": \"2023-09-20T08:37:17Z\",\n    \"valid_to\": \"2025-02-11T13:54:30Z\",\n    \"revocation_timestamp\": \"0001-01-01T00:00:00Z\",\n    \"engine_id\": \"02b17f9e-44a3-4f8b-8752-e6844d67885e\",\n    \"id\": \"9443a6b7-a3ac-41fd-8bee-5ce6bcb55e08\",\n    \"metadata\": {\n        \"lamassu.io/name\": \"BootstrapCA\"\n    },\n    \"issuance_expiration\": {\n        \"type\": \"Time\",\n        \"time\": \"2024-02-11T13:54:30Z\"\n    },\n    \"type\": \"MANAGED\",\n    \"creation_ts\": \"2023-09-20T08:37:17.693412Z\"\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#certificate-data-structure","title":"Certificate Data Structure","text":"<ul> <li><code>serial_number</code>: <code>(string: \"\")</code> - The Serial Number of the certificate</li> <li><code>issuer_metadata</code>:<ul> <li><code>serial_number</code>: <code>(string: \"\")</code> - The issuer CA certificate serial number</li> <li><code>ca_id</code>:\u00a0<code>(string: \"\")</code> - The issuer CA ID</li> </ul> </li> <li><code>status</code>: <code>(string: \"\")</code> - Status of the certificate, the options are <code>ACTIVE</code>, <code>EXPIRED</code>, <code>REVOKED</code>, <code>NEARING_EXPIRATION</code> and <code>CRITICAL_EXPIRATION</code>.</li> <li><code>certificate</code> <code>(string: \"\")</code> - Certificate in PEM format and base64-encoded</li> <li><code>key_metadata</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> - Type of the private key, <code>RSA</code> or <code>ECDSA</code>.</li> <li><code>bits</code>: <code>(int: \"\")</code> - Private key size</li> <li><code>strength</code>:\u00a0<code>(string: \"\")</code> - Private key strength <code>LOW</code>, <code>MEDIUM</code> or <code>HIGH</code>.</li> </ul> </li> <li><code>subject</code>: - The Subject of the certificate<ul> <li><code>common_name</code>: <code>(string: \"\")</code></li> <li><code>organization</code>:\u00a0<code>(string: \"\")</code></li> <li><code>organization_unit</code>:\u00a0<code>(string: \"\")</code></li> <li><code>country</code>:\u00a0<code>(string: \"\")</code></li> <li><code>state</code>:\u00a0<code>(string: \"\")</code></li> <li><code>locality</code>:\u00a0<code>(string: \"\")</code></li> </ul> </li> <li><code>valid_from</code>: <code>(string: \"\")</code> - Date of certificate issue in ISO 8601 format</li> <li><code>valid_to</code>: <code>(string: \"\")</code> - Certificate expiry date in ISO 8601 format</li> <li><code>revocation_timestamp</code>:\u00a0<code>(string: \"\")</code> - Certificate revocation date in ISO 8601 format</li> </ul> <pre><code>{\n    \"serial_number\": \"94-bb-49-38-ab-2a-dc-7e-e7-39-97-b5-d3-9f-1d-bb-3f-47-98-59\",\n    \"metadata\": {},\n    \"issuer_metadata\": {\n        \"serial_number\": \"b0-32-b8-77-bd-03-17-5a-61-26-fe-40-a7-2e-12-c0-0b-47-a9-6c\",\n        \"ca_id\": \"9443a6b7-a3ac-41fd-8bee-5ce6bcb55e08\"\n    },\n    \"status\": \"ACTIVE\",\n    \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVZVENDQWttZ0F3SUJBZ0lWQUpTN1NUaXJLdHgrNXptWHRkT2ZIYnMvUjVoWk1BMEdDU3FHU0liM0RRRUIKQ3dVQU1Ha3hDekFKQmdOVkJBWVRBa1ZUTVJFd0R3WURWUVFJRXdoSGFYQjFlbXR2WVRFUk1BOEdBMVVFQnhNSQpRWEp5WVhOaGRHVXhFREFPQmdOVkJBb1RCMGxyWlhKc1lXNHhEREFLQmdOVkJBc1RBMXBRUkRFVU1CSUdBMVVFCkF4TUxRbTl2ZEhOMGNtRndRMEV3SGhjTk1qTXdPVEl3TURreU5UQTFXaGNOTWpRd01qRXhNVE0xTkRNd1dqQWgKTVFzd0NRWURWUVFHRXdKRlV6RVNNQkFHQTFVRUF4TUpRbTl2ZEhOMGNtRndNSUlCSWpBTkJna3Foa2lHOXcwQgpBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6T3dLNFlxSlBNMDZhUWJjYjVaaHlFNnFIOVd0ZWIyL2VHZjdRTlNVClFHUmRZQlVacm9KY0xJRGxyRlA3a05qeUY5aGpaUjZNTWt3ZWlxQytGSXU2RUl2VXA3NHBvTjYrS2sxc3pnM3UKbkRMTEVUQ2diVXh6WGN2ZlFKR3JERFM1UUozcWhCckVzYk5oRkJrQ09PNWZOc0dvdms0Z1VEK0QzNkhyS2d1VApDQXRZRm9oY0ZLZHVCODFSWjkyWFlrbXM2Yko4NFllZVhXRnZyZFhYUnFjOUphL0k2OEhNWFcvRWFUNU5Gek94CkNDVmVKd3VCWUliU09tYng1RjhHaVpkanliMUZCK2JDdU93R3dVTlAzcHZLaHpZSFhiRUxyNGRnTm9XblBrU0wKbE16akxiU293ejZ2cWhOSThpeE0rTGl3dVM5dUt6d1RyZnBOT1ZEUlEzQWplUUlEQVFBQm8wZ3dSakFPQmdOVgpIUThCQWY4RUJBTUNCNEF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0h3WURWUjBqQkJnd0ZvQVVDbHBoCjNjUzRYWU1mYTFHdnB4NXpTWEdoT3p3d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFGRkd5TDZIK3VjS0ErekkKbDFMU1doK3BwUjI5eGlxZEZnTFJoa1dzY2t4dERhaFlHd2J6UUhTOUo2TVNSNDFkODFVV2Z1KzluZ1ZBTzhPYgpzV21GVWZ4T2pPc3BkTjIraUlUbzlkYzBLU0ZPNEZjR2ROeUVNaENCRnVKZU5PdE1VMStna0hlZWlUalJiLzlYClB4MGJDRTFNaE14dnFLUW5tM3hmNDNhWUJtemNOZkZHZnhqTWduOVlUSTQ0bExBR3d2WFhhM3kzeGhOS2cyRksKNEtRS2hSd0xmaGVKOVZIMEYyc0FtaHJCZG5uWnY5SlNFQzcwOVRIODl2cHFsM1ZscTA3MEdWcjIreVl3U05MOQpFMG5OTDVxajE0MmtmRVFBazhCRENnYy9lSlpYL1l1QVJ0amtOMEF3clA5MWJSUWhacGtDMm9LL25jeTVMdGUwCm5hTUhiTDA5TG5kSTZzbEtaalprNnpmb0ZZTStzRERnS3hVcithWUVjNWJSUFZmSEtNZUFaSmFIalhOK3diVnEKbWttWnlEUUxSVWtnR2sxREZzdFhSQ1dSUTAwMG1GQmNnSnNkZVBmeU9lYUdqMU1IOUxPSzlXNTBQQzg3bXNNTgp1Umd3VzA2VEJWMXFjVFlvWFVkaDVidklwYkl1ZTJ5L013MmlraFExTDNNWUJlSmoyWk9aeHc3WTlxYTFIRlRiCnJUNEJNSEdkOG5ZR1dLOWFJZUZ0MXBqYW1DeWFIWmJTczhSSDJ5clI4RUF0K21mTldiMXRiV0hGM05EMjNPNm0KV21ydTFuK2JSUFA0RUxpVDlsLzFWRUhuYWZhQjFOdFQyRHJjWTBMK0UreTllNE5YTFhkN0ZGVEFVTXJ4czZrdAphaEU1VDRyU0tvYVJxQjM0Rk9LODdNdFJrT1pNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\",\n    \"key_metadata\": {\n        \"type\": \"RSA\",\n        \"bits\": 2048,\n        \"strength\": \"MEDIUM\"\n    },\n    \"subject\": {\n        \"common_name\": \"Bootstrap\",\n        \"organization\": \"\",\n        \"organization_unit\": \"\",\n        \"country\": \"ES\",\n        \"state\": \"\",\n        \"locality\": \"\"\n    },\n    \"valid_from\": \"2023-09-20T09:25:05Z\",\n    \"valid_to\": \"2024-02-11T13:54:30Z\",\n    \"revocation_timestamp\": \"0001-01-01T00:00:00Z\"\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#dms-data-structure","title":"DMS Data Structure","text":"<ul> <li><code>dms</code>:<ul> <li><code>name</code>:\u00a0<code>(string: \"\")</code> - Name of the DMS</li> <li><code>status</code>: <code>(string: \"\")</code> - DMS status, valid status are <code>PENDING_APPROVAL</code>, <code>REJECTED</code>, <code>APPROVED</code>, <code>EXPIRED</code> and <code>REVOKED</code>.</li> <li><code>cloud_dms</code>:\u00a0<code>(bool: true)</code> - In case the variable has the value <code>true</code>, neither the data of the <code>remote_access_identity</code> structure nor the private key is needed.</li> <li><code>aws</code>:<ul> <li><code>shadow_type</code> <code>(string: \"\")</code> - The type of Shadow to be used in AWS when registering the device, the options are <code>CLASSIC</code> and <code>NAMED</code>.</li> </ul> </li> <li><code>creation_timestamp</code>: <code>(int: \"\")</code> - Date of creation of the DMS expressed in milliseconds since 1 June 1970 UTC</li> <li><code>identity_profile</code>: <ul> <li><code>general_setting</code>:\u00a0<ul> <li><code>enrollment_mode</code>: <code>(string: \"\")</code> - The method to perform device enrolment, in this case only supports <code>EST</code>. \u00a0\u00a0\u00a0\u00a0- <code>enrollment_settings</code>:</li> <li><code>authentication_mode</code>:\u00a0<code>(string: \"\")</code> - Authentication method in this case only supports <code>BOOTSTRAP_MTLS</code>.</li> <li><code>allow_new_auto_enrollment</code>:\u00a0<code>(string: \"\")</code> - Flag by means of which the enrolment of a device that is already registered is allowed.</li> <li><code>tags</code>:\u00a0<code>[\"iot\"]</code></li> <li><code>icon</code>:\u00a0<code>(string: \"\")</code></li> <li><code>color</code>: <code>(string: \"\")</code></li> <li><code>authorized_ca</code>: <code>(string: \"\")</code> - The name of the CA authorised to issue the certificate</li> <li><code>bootstrap_cas</code>: <code>`[\"string\"]</code> - The name of the CAs by which to verify that the device is authorised to request a certificate.</li> <li><code>chain_validation_level</code>:\u00a0<code>(int: \"\")</code></li> </ul> </li> <li><code>reenrollment_settings</code>: <code>(string: \"\")</code><ul> <li><code>allow_expired_renewal</code>:\u00a0<code>(string: \"\")</code> - Flag to allow reenrollment of devices with expired certificate</li> <li><code>preventive_renewal_interval</code>:\u00a0<code>(string: \"\")</code></li> <li><code>additional_validation_cas</code>:\u00a0<code>(string: \"\")</code> - Additional validation CAs at the time of reenrolment</li> </ul> </li> <li><code>ca_distribution_settings</code>: - Structure indicating which CAs are to be sent in the response of the CaCerts endpoint of the EST protocol.<ul> <li><code>include_authorized_ca</code>:\u00a0<code>(bool: true)</code></li> <li><code>include_bootstrap_cas</code>: <code>(bool: true)</code></li> <li><code>include_lamassu_downstream_ca</code>: <code>(bool: true)</code></li> <li><code>managed_cas</code>:\u00a0[]</li> <li><code>static_cas</code>:`[]</li> </ul> </li> </ul> </li> <li><code>remote_access_identity</code>: <ul> <li><code>serial_number</code>:\u00a0<code>default</code> - Serial number of the certificate</li> <li><code>key_metadata</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> - Type of the private key, <code>RSA</code> or <code>ECDSA</code>.</li> <li><code>bits</code>: <code>(int: \"\")</code> - Private key size</li> <li><code>strength</code>:\u00a0<code>(string: \"\")</code> - Private key strength <code>LOW</code>, <code>MEDIUM</code> or <code>HIGH</code>.</li> </ul> </li> <li><code>subject</code>: - The Subject of the device certificate<ul> <li><code>common_name</code>: <code>(string: \"\")</code></li> <li><code>organization</code>:\u00a0<code>(string: \"\")</code></li> <li><code>organization_unit</code>:\u00a0<code>(string: \"\")</code></li> <li><code>country</code>:\u00a0<code>(string: \"\")</code></li> <li><code>state</code>:\u00a0<code>(string: \"\")</code></li> <li><code>locality</code>:\u00a0<code>(string: \"\")</code></li> </ul> </li> <li><code>authorized_cas</code>: <code>(string: \"\")</code> - The name of the CA authorised to issue the certificate</li> <li><code>external_key_generation</code>: <code>(bool: false)</code></li> <li><code>certificate</code>:\u00a0<code>(string: \"\")</code> - DMS certificate in PEM format and base64-encoded</li> <li><code>certificate_request</code>: - DMS CSR in PEM format and base64-encoded</li> </ul> </li> </ul> </li> <li><code>private_key</code> <code>(string: \"\")</code> - DMS Private Key in PEM format and base64 encoded.</li> </ul> <pre><code>{\n    \"name\": \"ProductionDMS\",\n    \"status\": \"APPROVED\",\n    \"cloud_dms\": true,\n    \"aws\": {\n        \"shadow_type\": \"NAMED\"\n    },\n    \"creation_timestamp\": 1689858815000,\n    \"identity_profile\": {\n        \"general_setting\": {\n            \"enrollment_mode\": \"EST\"\n        },\n        \"enrollment_settings\": {\n            \"authentication_mode\": \"BOOTSTRAP_MTLS\",\n            \"allow_new_auto_enrollment\": true,\n            \"tags\": [\n                \"iot\"\n            ],\n            \"icon\": \"CgSmartphoneChip\",\n            \"color\": \"#25eee2-#333333\",\n            \"authorized_ca\": \"ProdCA\",\n            \"bootstrap_cas\": [\n                \"BootstrapCA\"\n            ],\n            \"chain_validation_level\": -1\n        },\n        \"reenrollment_settings\": {\n            \"allow_expired_renewal\": false,\n            \"preventive_renewal_interval\": \"0s\",\n            \"additional_validation_cas\": null\n        },\n        \"ca_distribution_settings\": {\n            \"include_authorized_ca\": true,\n            \"include_bootstrap_cas\": false,\n            \"include_lamassu_downstream_ca\": true,\n            \"managed_cas\": [],\n            \"static_cas\": []\n        },\n        \"aws_iotcore_publish\": true\n    }\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#device-data-structure","title":"Device Data Structure","text":"<ul> <li><code>id</code>:\u00a0<code>(string: \"\")</code> - Device ID</li> <li><code>alias</code>: <code>(string: \"\")</code> </li> <li><code>dms_name</code>:\u00a0<code>(string: \"\")</code> - Name of the DMS by which the device has been registered</li> <li><code>status</code>:\u00a0<code>(string: \"\")</code> - Device status. Valid options are <code>PENDING_PROVISIONING</code>, <code>FULLY_PROVISIONED</code>, <code>REQUIRES_ACTION</code>, <code>PROVISIONED_WITH_WARNINGS</code> and <code>DECOMMISSIONED</code>.</li> <li><code>slots</code>: - Array with the slots that the device has configured. The device can have N slots and for each slot it has one active certificate.<ul> <li><code>id</code>:\u00a0<code>default</code> - Slot ID, by default the device is created with the slot <code>default</code>.</li> <li><code>active_certificate</code>:\u00a0- Certificate active slot \u00a0\u00a0\u00a0\u00a0    - <code>ca_name</code>:\u00a0<code>(string: \"\")</code> - Name of the CA that issued the certificate<ul> <li><code>serial_number</code>:\u00a0<code>(string: \"\")</code> - Serial number of the certificate</li> <li><code>certificate</code>:\u00a0<code>(string: \"\")</code> - Certificate in Base64-encoded PEM format</li> <li><code>status</code>:\u00a0<code>(string: \"\")</code> - Certificate status. Valid options are <code>ACTIVE</code>, <code>EXPIRED</code>, <code>REVOKED</code>, <code>NEARING_EXPIRATION</code> and <code>CRITICAL_EXPIRATION</code>.</li> <li><code>key_metadata</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> - Type of the private key, <code>RSA</code> or <code>ECDSA</code>.</li> <li><code>bits</code>: <code>(int: \"\")</code> - Private key size</li> <li><code>strength</code>:\u00a0<code>(string: \"\")</code> - Private key strength <code>LOW</code>, <code>MEDIUM</code> or <code>HIGH</code>.</li> </ul> </li> <li><code>subject</code>: - The Subject of the device certificate<ul> <li><code>common_name</code>: <code>(string: \"\")</code></li> <li><code>organization</code>:\u00a0<code>(string: \"\")</code></li> <li><code>organization_unit</code>:\u00a0<code>(string: \"\")</code></li> <li><code>country</code>:\u00a0<code>(string: \"\")</code></li> <li><code>state</code>:\u00a0<code>(string: \"\")</code></li> <li><code>locality</code>:\u00a0<code>(string: \"\")</code></li> </ul> </li> <li><code>valid_from</code>: <code>(int: \"\")</code> - Date of issue of the certificate expressed in milliseconds since 1 June 1970 UTC</li> <li><code>valid_to</code>: <code>(int: \"\")</code> - Date of validity of the certificate expressed in milliseconds since 1 June 1970 UTC</li> </ul> </li> <li><code>archive_certificates</code>:\u00a0[] - Array with all the certificates that the device has held</li> </ul> </li> <li><code>allow_new_enrollment</code>:<code>(bool: true)</code>, - Flag by means of which the enrolment of a device that is already registered is allowed.</li> <li><code>description</code>:\u00a0<code>(string: \"\")</code>, - Description of the device</li> <li><code>tags</code>:\u00a0<code>[\"iot\"]</code>, </li> <li><code>icon_name</code>:\u00a0<code>(string: \"\")</code>,</li> <li><code>icon_color</code>:\u00a0<code>(string: \"\")</code>,</li> <li><code>creation_timestamp</code>: <code>(int: \"\")</code> - Date of creation of the device expressed in milliseconds since 1 June 1970 UTC</li> </ul> <pre><code>{\n\u00a0\u00a0\u00a0\u00a0\"id\":\u00a0\"13f4bc74-3314-4a0b-b65c-73a82e14cc5f\",\n\u00a0\u00a0\u00a0\u00a0\"alias\":\u00a0\"13f4bc74-3314-4a0b-b65c-73a82e14cc5f\",\n\u00a0\u00a0\u00a0\u00a0\"dms_name\":\u00a0\"EnrollDMS\",\n\u00a0\u00a0\u00a0\u00a0\"status\":\u00a0\"FULLY_PROVISIONED\",\n\u00a0\u00a0\u00a0\u00a0\"slots\":\u00a0[\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"id\":\u00a0\"default\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"active_certificate\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ca_name\":\u00a0\"TestAwsCA\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"serial_number\":\u00a0\"ed-34-90-2e-25-9b-f7-17-2d-ea-83-f3-06-46-50-f6-81-c9-92-6c\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"certificate\":\u00a0\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZVVENDQXptZ0F3SUJBZ0lWQU8wMGtDNGxtL2NYTGVxRDh3WkdVUGFCeVpKc01BMEdDU3FHU0liM0RRRUIKQ3dVQU1Fc3hDVEFIQmdOVkJBWVRBREVKTUFjR0ExVUVDQk1BTVFrd0J3WURWUVFIRXdBeENUQUhCZ05WQkFvVApBREVKTUFjR0ExVUVDeE1BTVJJd0VBWURWUVFERXdsVVpYTjBRWGR6UTBFd0hoY05Nak13TnpJd01UTXhNek0xCldoY05Nak14TURJNE1UTXhNek0wV2pBdk1TMHdLd1lEVlFRREV5UXhNMlkwWW1NM05DMHpNekUwTFRSaE1HSXQKWWpZMVl5MDNNMkU0TW1VeE5HTmpOV1l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQwpBUURJaEt2N0NvWEpFV3VyVEs3THgwN0p2MU1NRlk0OHpleTV2OTdRVkxmSXY1MXdzRFVPYmY1YVI0V1MrNjQzCmcxa09SeUdBM2tLQjAxNWhhVW5nL0U1aVNNR29EeDVpQ2lnV1FLRDg3WUROelFWNDVUa0cvMFo1clIxRVY0bFQKNGp3MkVYMkl5ZkQyM1B5VlZzOGJBSnUwNkxUK1FNUUpHYnkxM0dhRjR6eCtwb0JyNnJhTHdYQXErajMyaHhNcApKUEJnM05PWkdRQVVOVnQySmZ1eUFqeE9wWE05UGFHSjdlb2JmODg1VCs4YmZ5VE1LcE5acmRsZzF2WnBSUE40CjJjTWJ4ODk4S3VFenRYNVRDTkxmdXZXNDZjTS8zczF4K1gxOHJvdEJBMTRtbEVQVE9PZVh0TVNqOSs3M01jYlQKdEhYQUtqc3czZXFIclEzcmhadXB0VHQ5K2lTanpKdTgybDFYQ2R0OStubkFaMjhqZ0RsT0RxZU45R0ZNTk5LRAphaVd1WTdwdWtqcFdadXFYdXA2RGNnQ1h5cVppLzdOMEJVaEEzS3pGUUxJTk44dzVhNnE4anZaTEdXcUtKUnNLCkNtaUhwZ1VBd0twYlJhTkhUdnpxTHZ4cUVrRmhHRUJjMWFZZERHNVI1Yk5ac3VjL3UvT0tIbmcxcU1lU1R1bkwKbGlEcXZOK05GbVJiTjlRSzJweURaY25ZVERKMjhOWmhxcENJbG1lVXV1eWxLNGdyRExpTnRTRGMvbUZCU25CUQpRK2NGTjlDN2paVk5lM3NGenpQWVNtVHJJMU8zdHpyaEk1NTNSczhpT09TbHlXS0VDaG9LOFB0cXlpYk42Y1lRCmNMZGRXVXo1TlJUOHoraGgrbi84b0ZpRExOb24zUHQ4L1dTZko0bkc3YVN6QlFJREFRQUJvMGd3UmpBT0JnTlYKSFE4QkFmOEVCQU1DQjRBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVZEZLZgpWN1Arajg3K0pBREVJbmI0MmZnRlNnb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRjZOMEV4QXUwZTBFeVdHCmpWVU1XRHRaVVpzaVNvQVNBMnZVQVEza0s3bGZieUowSklrRHJyMXVkakc3Y1pLMTBMd2xnVHU2YW54THlDeFYKMytycG9BMm1tcEUyTVhBZVdvK3gxNUdvZllTeTlyM3NKUEFPNkhMZE9CK0ZldTc0VjVHV2tQSXE5Z2xxd1NBWApXYmlZT3JsWFJsNkZrOXZZR0xZWkcvWGtwRDdWUVRVVzl5WGJrYjE3SU4vNU1yUm91SU9abU5Sa2FFZFhxaXJnClNaUVA5cnQxczFyTStVVDcxZzhQN2YzR05ibXE2RWFGelBRL3VJRFB1YU03Yi9pK1dvdDV6VmhtTnUyK0hyNWgKWmRlYVUxK0dpbnNzTXRrMGtIVk1BQ0dlWTJDRTFCUjlzeDdJdFZ6WkJVYWxWaFVuSm8xOWlGZDFMcHg0Nko0YwpEQk1hMVNwOXlLL1AxNnhIWGU2bWVjNytYdUhEamhFbkZ6RDd3ZHdjUDBPVGJCUUQ1MERYVzRUb3pJWXlvYVpoCnB4RTdabkRUSGcvNXBkU204WWczRnZIbmlkdTVYWFdRQ2tyT1RJWlFxTkttQjNma2hIUVZ1SmlHNEtQNmV0dXYKMTR3SmVmTWVCbk56dlhYY04wMXFJR2p3cC9xcW9pa094eDFKbXVnSkFvNDRNaTdnMkRkQlJZa1g4Mk1kbmZSNApmQVBmZFMrUXZvOUFTTFc5dDRzY251TEs3RVlXZURZZFU4enIzcHRXLzNvZVJtcUU2eUFabEkxSGVaWmE3SEJtCkM4VVJVOGJYSS9nbUJoZm1ld1pJMHBUeE5wZDBrcGlYWDNSYU9iMU1Reno4YllEK09lcVhoMHVYRmFFQVl6NTkKcHVnNFRDSVFFRDNweHdJS1l2QmRmZTl3MGV5NwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"status\":\u00a0\"ACTIVE\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key_metadata\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"type\":\u00a0\"RSA\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"bits\":\u00a04096,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"strength\":\u00a0\"HIGH\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"subject\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"common_name\":\u00a0\"13f4bc74-3314-4a0b-b65c-73a82e14cc5f\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"organization\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"organization_unit\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"country\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"state\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"locality\":\u00a0\"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"valid_from\":\u00a01689858815000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"valid_to\":\u00a01698498814000\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"archive_certificates\":\u00a0[]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\"allow_new_enrollment\":\u00a0false,\n\u00a0\u00a0\u00a0\u00a0\"description\":\u00a0\"-\",\n\u00a0\u00a0\u00a0\u00a0\"tags\":\u00a0[\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"iot\"\n\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0\"icon_name\":\u00a0\"CgSmartphoneChip\",\n\u00a0\u00a0\u00a0\u00a0\"icon_color\":\u00a0\"#25eee2-#333333\",\n\u00a0\u00a0\u00a0\u00a0\"creation_timestamp\":\u00a01689858244749\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#slot-data-structure","title":"Slot Data Structure","text":"<ul> <li><code>id</code>:\u00a0<code>default</code> - Slot ID, by default the device is created with the slot <code>default</code>.</li> <li><code>active_certificate</code>:\u00a0- Certificate active slot<ul> <li><code>ca_name</code>:\u00a0<code>(string: \"\")</code> - Name of the CA that issued the certificate</li> <li><code>serial_number</code>:\u00a0<code>(string: \"\")</code> - Serial number of the certificate</li> <li><code>certificate</code>:\u00a0<code>(string: \"\")</code> - Certificate in Base64-encoded PEM format</li> <li><code>status</code>:\u00a0<code>(string: \"\")</code> - Certificate status. Valid options are <code>ACTIVE</code>, <code>EXPIRED</code>, <code>REVOKED</code>, <code>NEARING_EXPIRATION</code> and <code>CRITICAL_EXPIRATION</code>.</li> <li><code>key_metadata</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> - Type of the private key, <code>RSA</code> or <code>ECDSA</code>.</li> <li><code>bits</code>: <code>(int: \"\")</code> - Private key size</li> <li><code>strength</code>:\u00a0<code>(string: \"\")</code> - Private key strength <code>LOW</code>, <code>MEDIUM</code> or <code>HIGH</code>.</li> </ul> </li> <li><code>subject</code>: - The Subject of the device certificate<ul> <li><code>common_name</code>: <code>(string: \"\")</code></li> <li><code>organization</code>:\u00a0<code>(string: \"\")</code></li> <li><code>organization_unit</code>:\u00a0<code>(string: \"\")</code></li> <li><code>country</code>:\u00a0<code>(string: \"\")</code></li> <li><code>state</code>:\u00a0<code>(string: \"\")</code></li> <li><code>locality</code>:\u00a0<code>(string: \"\")</code></li> </ul> </li> <li><code>valid_from</code>: <code>(int: \"\")</code> - Date of issue of the certificate expressed in milliseconds since 1 June 1970 UTC</li> <li><code>valid_to</code>: <code>(int: \"\")</code> - Date of validity of the certificate expressed in milliseconds since 1 June 1970 UTC</li> </ul> </li> <li><code>archive_certificates</code>:\u00a0[] - Array with all the certificates that the device has held</li> </ul> <pre><code>{\n    \"id\":\u00a0\"default\",\n\u00a0\u00a0\u00a0\u00a0\"active_certificate\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0    \"ca_name\":\u00a0\"TestAwsCA\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"serial_number\":\u00a0\"ed-34-90-2e-25-9b-f7-17-2d-ea-83-f3-06-46-50-f6-81-c9-92-6c\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"certificate\":\u00a0\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZVVENDQXptZ0F3SUJBZ0lWQU8wMGtDNGxtL2NYTGVxRDh3WkdVUGFCeVpKc01BMEdDU3FHU0liM0RRRUIKQ3dVQU1Fc3hDVEFIQmdOVkJBWVRBREVKTUFjR0ExVUVDQk1BTVFrd0J3WURWUVFIRXdBeENUQUhCZ05WQkFvVApBREVKTUFjR0ExVUVDeE1BTVJJd0VBWURWUVFERXdsVVpYTjBRWGR6UTBFd0hoY05Nak13TnpJd01UTXhNek0xCldoY05Nak14TURJNE1UTXhNek0wV2pBdk1TMHdLd1lEVlFRREV5UXhNMlkwWW1NM05DMHpNekUwTFRSaE1HSXQKWWpZMVl5MDNNMkU0TW1VeE5HTmpOV1l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQwpBUURJaEt2N0NvWEpFV3VyVEs3THgwN0p2MU1NRlk0OHpleTV2OTdRVkxmSXY1MXdzRFVPYmY1YVI0V1MrNjQzCmcxa09SeUdBM2tLQjAxNWhhVW5nL0U1aVNNR29EeDVpQ2lnV1FLRDg3WUROelFWNDVUa0cvMFo1clIxRVY0bFQKNGp3MkVYMkl5ZkQyM1B5VlZzOGJBSnUwNkxUK1FNUUpHYnkxM0dhRjR6eCtwb0JyNnJhTHdYQXErajMyaHhNcApKUEJnM05PWkdRQVVOVnQySmZ1eUFqeE9wWE05UGFHSjdlb2JmODg1VCs4YmZ5VE1LcE5acmRsZzF2WnBSUE40CjJjTWJ4ODk4S3VFenRYNVRDTkxmdXZXNDZjTS8zczF4K1gxOHJvdEJBMTRtbEVQVE9PZVh0TVNqOSs3M01jYlQKdEhYQUtqc3czZXFIclEzcmhadXB0VHQ5K2lTanpKdTgybDFYQ2R0OStubkFaMjhqZ0RsT0RxZU45R0ZNTk5LRAphaVd1WTdwdWtqcFdadXFYdXA2RGNnQ1h5cVppLzdOMEJVaEEzS3pGUUxJTk44dzVhNnE4anZaTEdXcUtKUnNLCkNtaUhwZ1VBd0twYlJhTkhUdnpxTHZ4cUVrRmhHRUJjMWFZZERHNVI1Yk5ac3VjL3UvT0tIbmcxcU1lU1R1bkwKbGlEcXZOK05GbVJiTjlRSzJweURaY25ZVERKMjhOWmhxcENJbG1lVXV1eWxLNGdyRExpTnRTRGMvbUZCU25CUQpRK2NGTjlDN2paVk5lM3NGenpQWVNtVHJJMU8zdHpyaEk1NTNSczhpT09TbHlXS0VDaG9LOFB0cXlpYk42Y1lRCmNMZGRXVXo1TlJUOHoraGgrbi84b0ZpRExOb24zUHQ4L1dTZko0bkc3YVN6QlFJREFRQUJvMGd3UmpBT0JnTlYKSFE4QkFmOEVCQU1DQjRBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVZEZLZgpWN1Arajg3K0pBREVJbmI0MmZnRlNnb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRjZOMEV4QXUwZTBFeVdHCmpWVU1XRHRaVVpzaVNvQVNBMnZVQVEza0s3bGZieUowSklrRHJyMXVkakc3Y1pLMTBMd2xnVHU2YW54THlDeFYKMytycG9BMm1tcEUyTVhBZVdvK3gxNUdvZllTeTlyM3NKUEFPNkhMZE9CK0ZldTc0VjVHV2tQSXE5Z2xxd1NBWApXYmlZT3JsWFJsNkZrOXZZR0xZWkcvWGtwRDdWUVRVVzl5WGJrYjE3SU4vNU1yUm91SU9abU5Sa2FFZFhxaXJnClNaUVA5cnQxczFyTStVVDcxZzhQN2YzR05ibXE2RWFGelBRL3VJRFB1YU03Yi9pK1dvdDV6VmhtTnUyK0hyNWgKWmRlYVUxK0dpbnNzTXRrMGtIVk1BQ0dlWTJDRTFCUjlzeDdJdFZ6WkJVYWxWaFVuSm8xOWlGZDFMcHg0Nko0YwpEQk1hMVNwOXlLL1AxNnhIWGU2bWVjNytYdUhEamhFbkZ6RDd3ZHdjUDBPVGJCUUQ1MERYVzRUb3pJWXlvYVpoCnB4RTdabkRUSGcvNXBkU204WWczRnZIbmlkdTVYWFdRQ2tyT1RJWlFxTkttQjNma2hIUVZ1SmlHNEtQNmV0dXYKMTR3SmVmTWVCbk56dlhYY04wMXFJR2p3cC9xcW9pa094eDFKbXVnSkFvNDRNaTdnMkRkQlJZa1g4Mk1kbmZSNApmQVBmZFMrUXZvOUFTTFc5dDRzY251TEs3RVlXZURZZFU4enIzcHRXLzNvZVJtcUU2eUFabEkxSGVaWmE3SEJtCkM4VVJVOGJYSS9nbUJoZm1ld1pJMHBUeE5wZDBrcGlYWDNSYU9iMU1Reno4YllEK09lcVhoMHVYRmFFQVl6NTkKcHVnNFRDSVFFRDNweHdJS1l2QmRmZTl3MGV5NwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"status\":\u00a0\"ACTIVE\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key_metadata\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    \"type\":\u00a0\"RSA\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"bits\":\u00a04096,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"strength\":\u00a0\"HIGH\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n        \"subject\":\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0    \"common_name\":\u00a0\"13f4bc74-3314-4a0b-b65c-73a82e14cc5f\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"organization\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"organization_unit\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"country\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"state\":\u00a0\"\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"locality\":\u00a0\"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n        \"valid_from\":\u00a01689858815000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"valid_to\":\u00a01698498814000\n    },\n\u00a0\u00a0\u00a0\u00a0\"archive_certificates\":\u00a0[]\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#certificate-base64-data-structure","title":"Certificate Base64 Data Structure","text":"<ul> <li><code>certificate</code>: <code>(string: \"\")</code> - Certificate in Base64-encoded PEM format</li> </ul> <pre><code>{\n    \"certificate\":\u00a0\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZVVENDQXptZ0F3SUJBZ0lWQU8wMGtDNGxtL2NYTGVxRDh3WkdVUGFCeVpKc01BMEdDU3FHU0liM0RRRUIKQ3dVQU1Fc3hDVEFIQmdOVkJBWVRBREVKTUFjR0ExVUVDQk1BTVFrd0J3WURWUVFIRXdBeENUQUhCZ05WQkFvVApBREVKTUFjR0ExVUVDeE1BTVJJd0VBWURWUVFERXdsVVpYTjBRWGR6UTBFd0hoY05Nak13TnpJd01UTXhNek0xCldoY05Nak14TURJNE1UTXhNek0wV2pBdk1TMHdLd1lEVlFRREV5UXhNMlkwWW1NM05DMHpNekUwTFRSaE1HSXQKWWpZMVl5MDNNMkU0TW1VeE5HTmpOV1l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQwpBUURJaEt2N0NvWEpFV3VyVEs3THgwN0p2MU1NRlk0OHpleTV2OTdRVkxmSXY1MXdzRFVPYmY1YVI0V1MrNjQzCmcxa09SeUdBM2tLQjAxNWhhVW5nL0U1aVNNR29EeDVpQ2lnV1FLRDg3WUROelFWNDVUa0cvMFo1clIxRVY0bFQKNGp3MkVYMkl5ZkQyM1B5VlZzOGJBSnUwNkxUK1FNUUpHYnkxM0dhRjR6eCtwb0JyNnJhTHdYQXErajMyaHhNcApKUEJnM05PWkdRQVVOVnQySmZ1eUFqeE9wWE05UGFHSjdlb2JmODg1VCs4YmZ5VE1LcE5acmRsZzF2WnBSUE40CjJjTWJ4ODk4S3VFenRYNVRDTkxmdXZXNDZjTS8zczF4K1gxOHJvdEJBMTRtbEVQVE9PZVh0TVNqOSs3M01jYlQKdEhYQUtqc3czZXFIclEzcmhadXB0VHQ5K2lTanpKdTgybDFYQ2R0OStubkFaMjhqZ0RsT0RxZU45R0ZNTk5LRAphaVd1WTdwdWtqcFdadXFYdXA2RGNnQ1h5cVppLzdOMEJVaEEzS3pGUUxJTk44dzVhNnE4anZaTEdXcUtKUnNLCkNtaUhwZ1VBd0twYlJhTkhUdnpxTHZ4cUVrRmhHRUJjMWFZZERHNVI1Yk5ac3VjL3UvT0tIbmcxcU1lU1R1bkwKbGlEcXZOK05GbVJiTjlRSzJweURaY25ZVERKMjhOWmhxcENJbG1lVXV1eWxLNGdyRExpTnRTRGMvbUZCU25CUQpRK2NGTjlDN2paVk5lM3NGenpQWVNtVHJJMU8zdHpyaEk1NTNSczhpT09TbHlXS0VDaG9LOFB0cXlpYk42Y1lRCmNMZGRXVXo1TlJUOHoraGgrbi84b0ZpRExOb24zUHQ4L1dTZko0bkc3YVN6QlFJREFRQUJvMGd3UmpBT0JnTlYKSFE4QkFmOEVCQU1DQjRBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVZEZLZgpWN1Arajg3K0pBREVJbmI0MmZnRlNnb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRjZOMEV4QXUwZTBFeVdHCmpWVU1XRHRaVVpzaVNvQVNBMnZVQVEza0s3bGZieUowSklrRHJyMXVkakc3Y1pLMTBMd2xnVHU2YW54THlDeFYKMytycG9BMm1tcEUyTVhBZVdvK3gxNUdvZllTeTlyM3NKUEFPNkhMZE9CK0ZldTc0VjVHV2tQSXE5Z2xxd1NBWApXYmlZT3JsWFJsNkZrOXZZR0xZWkcvWGtwRDdWUVRVVzl5WGJrYjE3SU4vNU1yUm91SU9abU5Sa2FFZFhxaXJnClNaUVA5cnQxczFyTStVVDcxZzhQN2YzR05ibXE2RWFGelBRL3VJRFB1YU03Yi9pK1dvdDV6VmhtTnUyK0hyNWgKWmRlYVUxK0dpbnNzTXRrMGtIVk1BQ0dlWTJDRTFCUjlzeDdJdFZ6WkJVYWxWaFVuSm8xOWlGZDFMcHg0Nko0YwpEQk1hMVNwOXlLL1AxNnhIWGU2bWVjNytYdUhEamhFbkZ6RDd3ZHdjUDBPVGJCUUQ1MERYVzRUb3pJWXlvYVpoCnB4RTdabkRUSGcvNXBkU204WWczRnZIbmlkdTVYWFdRQ2tyT1RJWlFxTkttQjNma2hIUVZ1SmlHNEtQNmV0dXYKMTR3SmVmTWVCbk56dlhYY04wMXFJR2p3cC9xcW9pa094eDFKbXVnSkFvNDRNaTdnMkRkQlJZa1g4Mk1kbmZSNApmQVBmZFMrUXZvOUFTTFc5dDRzY251TEs3RVlXZURZZFU4enIzcHRXLzNvZVJtcUU2eUFabEkxSGVaWmE3SEJtCkM4VVJVOGJYSS9nbUJoZm1ld1pJMHBUeE5wZDBrcGlYWDNSYU9iMU1Reno4YllEK09lcVhoMHVYRmFFQVl6NTkKcHVnNFRDSVFFRDNweHdJS1l2QmRmZTl3MGV5NwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n}\n</code></pre>"},{"location":"tech-ref/cloud-events/#force-reenroll-data-structure","title":"Force Reenroll Data Structure","text":"<ul> <li><code>device_id</code>: <code>(string: \"\")</code> - Device ID</li> <li><code>slot_id</code>: <code>(string: \"\")</code> - Slot ID for reenrollment</li> <li><code>require_reenrollment</code>: <code>(bool: true)</code> - Boolean to indicate if rewinding is required</li> <li><code>crt</code>: <code>(string: \"\")</code> - Active device certificate in PEM format and base64-encoded</li> </ul> <pre><code>{\n\u00a0\u00a0\u00a0\u00a0\"device_id\":\u00a0\"13f4bc74-3314-4a0b-b65c-73a82e14cc5f\",\n\u00a0\u00a0\u00a0\u00a0\"slot_id\":\u00a0\"default\",\n\u00a0\u00a0\u00a0\u00a0\"require_reenrollment\":\u00a0true,\n    \"crt\":\u00a0\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZVVENDQXptZ0F3SUJBZ0lWQU8wMGtDNGxtL2NYTGVxRDh3WkdVUGFCeVpKc01BMEdDU3FHU0liM0RRRUIKQ3dVQU1Fc3hDVEFIQmdOVkJBWVRBREVKTUFjR0ExVUVDQk1BTVFrd0J3WURWUVFIRXdBeENUQUhCZ05WQkFvVApBREVKTUFjR0ExVUVDeE1BTVJJd0VBWURWUVFERXdsVVpYTjBRWGR6UTBFd0hoY05Nak13TnpJd01UTXhNek0xCldoY05Nak14TURJNE1UTXhNek0wV2pBdk1TMHdLd1lEVlFRREV5UXhNMlkwWW1NM05DMHpNekUwTFRSaE1HSXQKWWpZMVl5MDNNMkU0TW1VeE5HTmpOV1l3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQwpBUURJaEt2N0NvWEpFV3VyVEs3THgwN0p2MU1NRlk0OHpleTV2OTdRVkxmSXY1MXdzRFVPYmY1YVI0V1MrNjQzCmcxa09SeUdBM2tLQjAxNWhhVW5nL0U1aVNNR29EeDVpQ2lnV1FLRDg3WUROelFWNDVUa0cvMFo1clIxRVY0bFQKNGp3MkVYMkl5ZkQyM1B5VlZzOGJBSnUwNkxUK1FNUUpHYnkxM0dhRjR6eCtwb0JyNnJhTHdYQXErajMyaHhNcApKUEJnM05PWkdRQVVOVnQySmZ1eUFqeE9wWE05UGFHSjdlb2JmODg1VCs4YmZ5VE1LcE5acmRsZzF2WnBSUE40CjJjTWJ4ODk4S3VFenRYNVRDTkxmdXZXNDZjTS8zczF4K1gxOHJvdEJBMTRtbEVQVE9PZVh0TVNqOSs3M01jYlQKdEhYQUtqc3czZXFIclEzcmhadXB0VHQ5K2lTanpKdTgybDFYQ2R0OStubkFaMjhqZ0RsT0RxZU45R0ZNTk5LRAphaVd1WTdwdWtqcFdadXFYdXA2RGNnQ1h5cVppLzdOMEJVaEEzS3pGUUxJTk44dzVhNnE4anZaTEdXcUtKUnNLCkNtaUhwZ1VBd0twYlJhTkhUdnpxTHZ4cUVrRmhHRUJjMWFZZERHNVI1Yk5ac3VjL3UvT0tIbmcxcU1lU1R1bkwKbGlEcXZOK05GbVJiTjlRSzJweURaY25ZVERKMjhOWmhxcENJbG1lVXV1eWxLNGdyRExpTnRTRGMvbUZCU25CUQpRK2NGTjlDN2paVk5lM3NGenpQWVNtVHJJMU8zdHpyaEk1NTNSczhpT09TbHlXS0VDaG9LOFB0cXlpYk42Y1lRCmNMZGRXVXo1TlJUOHoraGgrbi84b0ZpRExOb24zUHQ4L1dTZko0bkc3YVN6QlFJREFRQUJvMGd3UmpBT0JnTlYKSFE4QkFmOEVCQU1DQjRBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdId1lEVlIwakJCZ3dGb0FVZEZLZgpWN1Arajg3K0pBREVJbmI0MmZnRlNnb3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBRjZOMEV4QXUwZTBFeVdHCmpWVU1XRHRaVVpzaVNvQVNBMnZVQVEza0s3bGZieUowSklrRHJyMXVkakc3Y1pLMTBMd2xnVHU2YW54THlDeFYKMytycG9BMm1tcEUyTVhBZVdvK3gxNUdvZllTeTlyM3NKUEFPNkhMZE9CK0ZldTc0VjVHV2tQSXE5Z2xxd1NBWApXYmlZT3JsWFJsNkZrOXZZR0xZWkcvWGtwRDdWUVRVVzl5WGJrYjE3SU4vNU1yUm91SU9abU5Sa2FFZFhxaXJnClNaUVA5cnQxczFyTStVVDcxZzhQN2YzR05ibXE2RWFGelBRL3VJRFB1YU03Yi9pK1dvdDV6VmhtTnUyK0hyNWgKWmRlYVUxK0dpbnNzTXRrMGtIVk1BQ0dlWTJDRTFCUjlzeDdJdFZ6WkJVYWxWaFVuSm8xOWlGZDFMcHg0Nko0YwpEQk1hMVNwOXlLL1AxNnhIWGU2bWVjNytYdUhEamhFbkZ6RDd3ZHdjUDBPVGJCUUQ1MERYVzRUb3pJWXlvYVpoCnB4RTdabkRUSGcvNXBkU204WWczRnZIbmlkdTVYWFdRQ2tyT1RJWlFxTkttQjNma2hIUVZ1SmlHNEtQNmV0dXYKMTR3SmVmTWVCbk56dlhYY04wMXFJR2p3cC9xcW9pa094eDFKbXVnSkFvNDRNaTdnMkRkQlJZa1g4Mk1kbmZSNApmQVBmZFMrUXZvOUFTTFc5dDRzY251TEs3RVlXZURZZFU4enIzcHRXLzNvZVJtcUU2eUFabEkxSGVaWmE3SEJtCkM4VVJVOGJYSS9nbUJoZm1ld1pJMHBUeE5wZDBrcGlYWDNSYU9iMU1Reno4YllEK09lcVhoMHVYRmFFQVl6NTkKcHVnNFRDSVFFRDNweHdJS1l2QmRmZTl3MGV5NwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n}\n</code></pre>"},{"location":"tech-ref/protocols/","title":"Protocols","text":"<p>Lamassu supports a set of standards to perform some of its key functionalities such as enrolling devices as well as validating the status of a given certificate. This section aims to describe those protocols as well as explaining how them with practical examples.</p>"},{"location":"tech-ref/protocols/#ocsp","title":"OCSP","text":"<p>The Online Certificate Status Protocol or OCSP for short, is a protocol used to determine the current status of a digital certificate without requiring the use of Certificate Revocation Lists (CRLs).</p> <p>As defined by the standard, there are two possible methods that can be used to perform the http request:</p> Method Path Headers Body payload Used when <code>GET</code> <code>{url}/{url-encoding of base-64 encoding of the DER encoding of the OCSPRequest}</code> Recommended when the encoded request is less than 255 bytes <code>PUT</code> <code>{url}</code> Content-Type: <code>application/ocsp-request</code> Binary value of the DER encoding of the OCSPRequest Can always be used"},{"location":"tech-ref/protocols/#get-request","title":"GET Request","text":"OpenSSLGo <p>Define the OCSP server endpoint as well as the  <pre><code>export OCSP_SERVER=dev.lamassu.io:443 \nexport CA_CERTIFICATE=issuer_ca.crt \nexport DEVICE_CERTIFICATE=device.crt\n</code></pre></p> <p>Obtain the Root certificate used by the server <pre><code>openssl s_client -connect $OCSP_SERVER  2&gt;/dev/null &lt;/dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; root-ca.pem\n</code></pre></p> <p>Create the OCSP Request <pre><code>OCSP_REQUEST=$(openssl ocsp -CAfile $CA_CERTIFICATE -issuer $CA_CERTIFICATE -cert $DEVICE_CERTIFICATE -reqout - | base64 -w 0)\n</code></pre></p> <p>Check the status of the certificate <pre><code>curl --location --request GET \"https://$OCSP_SERVER/api/ocsp/$OCSP_REQUEST\" &gt; ocspresponse.der \nopenssl ocsp -respin ocspresponse.der -VAfile root-ca.pem -resp_text\n</code></pre></p> <pre><code>go package main\n\nimport (\n    \"crypto/x509\"\n    \"encoding/base64\"\n    \"encoding/pem\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"os\"\n\n    \"github.com/lamassuiot/lamassuiot/pkg/ocsp/server/crypto/ocsp\"\n)\n\nfunc main() {\n    ocspServer := \"http://localhost:9098\"\n    issuerCA := \"ca.crt\"\n    certificateToCheck := \"device.crt\"\n\n    caPEM, err := ioutil.ReadFile(issuerCA)\n    if err != nil {\n        fmt.Println(\"Could not load CA certificate\")\n        os.Exit(1)\n    }\n    caPemBlock, _ := pem.Decode(caPEM)\n    ca, err := x509.ParseCertificate(caPemBlock.Bytes)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    devicePEM, err := ioutil.ReadFile(certificateToCheck)\n    if err != nil {\n        fmt.Println(\"Could not load Device certificate\")\n        os.Exit(1)\n    }\n    devicePemBlock, _ := pem.Decode(devicePEM)\n    device, err := x509.ParseCertificate(devicePemBlock.Bytes)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    ocspRequestBytes, err := ocsp.CreateRequest(device, ca, &amp;ocsp.RequestOptions{})\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    encodedRequest := base64.StdEncoding.EncodeToString(ocspRequestBytes)\n    fmt.Println(encodedRequest)\n\n    reqURL := ocspServer + \"/\" + encodedRequest\n\n    resp, err := http.Get(reqURL)\n\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    if resp.StatusCode != http.StatusOK {\n        os.Exit(1)\n    }\n\n    body, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        os.Exit(1)\n    }\n    resp.Body.Close()\n\n    ocspResponse, err := ocsp.ParseResponse(body, nil)\n    if err != nil {\n        fmt.Println(\"Could not parse OCSP response \", err)\n        os.Exit(1)\n    }\n\n    fmt.Println(ocspResponse.Status == ocsp.Good)\n    fmt.Println(ocspResponse.Status == ocsp.Revoked)\n    fmt.Println(ocspResponse.RevokedAt)\n}\n</code></pre>"},{"location":"tech-ref/protocols/#post-request","title":"POST Request","text":"OpenSSLGo <p>Define the OCSP server endpoint as well as the  <pre><code>export OCSP_SERVER=dev.lamassu.io:443 \nexport CA_CERTIFICATE=issuer_ca.crt \nexport DEVICE_CERTIFICATE=device.crt\n</code></pre></p> <p>Obtain the Root certificate used by the server <pre><code>openssl s_client -connect $OCSP_SERVER  2&gt;/dev/null &lt;/dev/null |  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' &gt; root-ca.pem\n</code></pre></p> <p>Create the OCSP Request <pre><code>openssl ocsp -issuer ca.crt -cert dev.crt -reqout - &gt; ocsp-request-post.der\n</code></pre></p> <p>Check the status of the certificate <pre><code>curl --location --request POST \"https://$DOMAIN/api/ocsp/\" --header 'Content-Type: application/ocsp-request' --data-binary '@ocsp-request-post.der' &gt; ocsp-response-post.der -k\nopenssl ocsp -respin ocsp-response-post.der -VAfile root-ca.pem -resp_text\n</code></pre></p> <pre><code>    package main\n    import (\n        \"bytes\"\n        \"crypto/x509\"\n        \"encoding/pem\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"net/http\"\n        \"os\"\n\n        \"github.com/lamassuiot/lamassuiot/pkg/ocsp/server/crypto/ocsp\"\n    )\n\n    func main() {\n        ocspServer := \"http://localhost:9098\"\n        issuerCA := \"ca.crt\"\n        certificateToCheck := \"device.crt\"\n\n        caPEM, err := ioutil.ReadFile(issuerCA)\n        if err != nil {\n            fmt.Println(\"Could not load CA certificate\")\n            os.Exit(1)\n        }\n        caPemBlock, _ := pem.Decode(caPEM)\n        ca, err := x509.ParseCertificate(caPemBlock.Bytes)\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n\n        devicePEM, err := ioutil.ReadFile(certificateToCheck)\n        if err != nil {\n            fmt.Println(\"Could not load Device certificate\")\n            os.Exit(1)\n        }\n        devicePemBlock, _ := pem.Decode(devicePEM)\n        device, err := x509.ParseCertificate(devicePemBlock.Bytes)\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n\n        ocspRequestBytes, err := ocsp.CreateRequest(device, ca, &amp;ocsp.RequestOptions{})\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n\n        resp, err := http.Post(ocspServer, \"application/ocsp-request\", bytes.NewReader(ocspRequestBytes))\n\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n\n        if resp.StatusCode != http.StatusOK {\n            os.Exit(1)\n        }\n\n        body, err := ioutil.ReadAll(resp.Body)\n        if err != nil {\n            os.Exit(1)\n        }\n        resp.Body.Close()\n\n        ocspResponse, err := ocsp.ParseResponse(body, nil)\n        if err != nil {\n            fmt.Println(\"Could not parse OCSP response \", err)\n            os.Exit(1)\n        }\n\n        fmt.Println(ocspResponse.Status == ocsp.Good)\n        fmt.Println(ocspResponse.Status == ocsp.Revoked)\n        fmt.Println(ocspResponse.RevokedAt)\n\n    }\n</code></pre>"},{"location":"tech-ref/protocols/#est","title":"EST","text":"<p>The core mechanism to obtain valid certificates for your devices is using the enrollment process described by the EST protocol. EST or Enrollment over Secure Transport establishes a set of standardized endpoints. The following table sums up all endpoints defined by the EST protocol and wether or not are supported by the current implementation.</p> Operation Operation Path Required by RFC7030 Supported Distribution of CA Certificates /api/devmanager/.well-known/est/cacerts Enrollment of Clients /api/devmanager/.well-known/est/simpleenroll Re-enrollment of Clients /api/devmanager/.well-known/est/simplereenroll Full CMC /api/devmanager/.well-known/est/fullcmc Server-Side Key Generation /api/devmanager/.well-known/est/serverkeygen CSR Attributes /api/devmanager/.well-known/est/csrattrs"},{"location":"tech-ref/tests/","title":"Tests","text":"<p>Integration test are carried out to check the proper functionabillity of the server. The tests, start up the same server used in production with an empty database and run against the server using HTTP.</p> <p>To create the test, httpexpect library has been used; a set of chainable builders for HTTP requests and assertions for HTTP responses and payload, on top of net/http and several utility packages.</p> <p>Each test-case has three arguments: the name of the test, an instance of the service and a httpexpect.Expect object, upon which the rest call will be made.</p> <p>Passing an instance of the service per test, allows custom inicialization of the database per test. Also, as the service used is the exact same used in production, the calls made from one service to another are mantained, allowing to check the interoperability from services.</p> <p>The response obtained from the httpexpect.Expect object will be evaluated; the response's keys and values will be revised to compare with the expected ones. If the expected results don\u00b4t match with the obtained ones, an error will occur, allowing the developers to notice and fix it before releasing it into production.</p> <p>Three different branches are differenciated:</p> <ul> <li>Development: this branch is used for testing purposes whenever a service is   modified to check the proper functionabillity of the same service.</li> <li>Release: this branch is used for testing purposes whenever a service is   modified to check the proper functionabillity of the all services.</li> <li>Main: once the test are passed successfully, changes are published in main   branch.</li> </ul>"},{"location":"tech-ref/tests/#coverage","title":"Coverage","text":"<p>The following commands can be used to calculate the coverage of the system:</p> <pre><code>go test -json -v ./pkg/... -cover  -coverprofile=coverage.out -coverpkg=./...\ngo tool cover -html=coverage.out -o coverage.html\n\ngo tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}' | .github/coverage-badge.sh\ngo tool cover -func coverage.out | grep total\n</code></pre> <p>The total and relative percentages of each component can be found in the resulting cover.html file. Opening the file in the browser, will mark the tested code in green and the untested one in red.</p> <p>The resulting cover.out file, can be imported to go-cover-treemap.io webpage to generate a visual representation of the coverage results:</p> <p></p>"},{"location":"tech-ref/tests/#pipeline","title":"Pipeline","text":"<p>The test are run against the server using HTTP, the top layer of the system. Facilitating the task of testing the layers below.</p> <p></p>"},{"location":"tech-ref/config/ca/","title":"CA Service Config","text":"<p>Lamassu CA uses a config file to configure different subsystems. The service uses the following look up sequence to load the config file orderer by importance:</p> <ul> <li>Environment variable <code>LAMASSU_CONFIG_FILE</code></li> <li>Standard Path: <code>/etc/lamassuiot/config.yaml</code></li> </ul>"},{"location":"tech-ref/config/ca/#config-reference","title":"Config reference","text":"<ul> <li> <p><code>logs</code></p> <ul> <li><code>level</code> <code>(string: \"info\")</code> \u2013 Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>. This also is used as the default logging level for subsystems if no option is specified. It is possible to specify different log levels for a subset of subsystems and let the others take the global log level set by this variable.</li> <li><code>subsystems</code>:<ul> <li><code>service</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>.</li> <li><code>crypto_engine</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>.</li> <li><code>storage_engine</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>. <code>trace</code> will log all queries (either SQL, or http requests)</li> <li><code>service</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>.</li> <li><code>http</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>.     <code>info</code> will log all the incoming requests URL with the associated http status code. <code>debug</code> will add the time delta. <code>trace</code> will log all incoming and outgoing requests/response  body.</li> <li><code>messaging_engine</code> <code>(string: \"info\")</code> - Valid options are <code>info</code>, <code>debug</code>, <code>trace</code>, <code>none</code>.</li> </ul> </li> </ul> </li> <li> <p><code>server</code>:</p> <ul> <li><code>listen_address</code> <code>(string: \"0.0.0.0\")</code> - Address at witch the server will listen for incoming requests.</li> <li><code>port</code> <code>(int: 8085)</code></li> <li><code>protocol</code> <code>(string: \"http\")</code> - Valid options are <code>http</code>, <code>https</code>. If set to <code>https</code>, then both <code>cert_file</code> and <code>key_file</code> properties are required with valid file paths.</li> <li><code>cert_file</code> <code>(string: \"\")</code></li> <li><code>key_file</code> <code>(string: \"\")</code></li> <li><code>authentication</code><ul> <li><code>mutual_tls</code>:<ul> <li><code>enabled</code> <code>(bool: false)</code> - Requires <code>protocol == https</code> otherwise this property wont take effect. If set to true, incoming request be forced to present a client certificate. Refer to <code>validation_mode</code> property to define how to authenticate incoming client certificates.</li> <li><code>validation_mode</code> <code>(string: \"strict\")</code> - Valid options are <code>strict</code>,<code>any</code>, <code>request</code>. <code>strict</code> will enforce a client certificate validation using the <code>ca_cert_file</code> certificate. <code>any</code> will enforce that the client sends a certificate although no validation will be enforced. <code>request</code> allows a client sending or not a certificate. If sent, the server won't validate de client certificate.  If <code>enabled</code> is set to true, and no mode is provided, it will default to <code>strict</code> mode.</li> <li><code>ca_cert_file</code>: <code>(string: \"\")</code> - Requires <code>validation_mode == strict</code>. This certificate will be used to validate all incoming http requests during the TLS handshake.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>amqp_event_publisher</code>:</p> <ul> <li><code>enabled</code> <code>(bool: \"true\")</code></li> <li><code>protocol</code> <code>(string: \"amqp\")</code> - The allowed protocols are <code>amqp</code>, <code>amqps</code>. If <code>amqp</code> is used the port must be 5672 and if <code>amqps</code> is used the port must be 5671.</li> <li><code>hostname</code> <code>(string: \"127.0.0.1\")</code> - Address at which AMQP broker is located</li> <li><code>port</code> <code>(int: 5672)</code></li> <li><code>insecure_skip_verify</code> <code>(bool: \"true\")</code></li> <li><code>ca_cert_file</code> <code>(string: \"\")</code> - The CA certificate that is used to trust the server.</li> <li><code>basic_auth</code>: - If the <code>amqp</code> protocol is used, authentication is done by user and password.<ul> <li><code>enabled</code> <code>(bool: \"false\")</code></li> <li><code>username</code> <code>(string: \"\")</code></li> <li><code>password</code> <code>(string: \"\")</code></li> </ul> </li> <li><code>client_tls_auth</code>: - If the <code>amqps</code> protocol is used, authentication is performed using the client's certificate, so the path to both the certificate and the private key must be specified.<ul> <li><code>enabled</code> <code>(bool: \"false\")</code></li> <li><code>cert_file</code> <code>(string: \"\")</code></li> <li><code>key_file</code> <code>(string: \"\")</code></li> </ul> </li> </ul> </li> <li> <p><code>storage</code>:</p> <ul> <li><code>provider</code> <code>(string: \"couch_db\")</code> - In CA version 3 currently only couchdb is supported as storage engine. </li> <li><code>couch_db</code>:<ul> <li><code>hostname</code> <code>(string: \"127.0.0.1\")</code> - Address where the database is located</li> <li><code>port</code> <code>(int: 5984)</code></li> <li><code>protocol</code> <code>(string: \"http\")</code> - The protocol used for communication with the database is <code>http</code>, therefore, authentication is done with username and password.</li> <li><code>insecure_skip_verify</code> <code>(bool: false)</code></li> <li><code>base_path</code> <code>(string: \"\")</code></li> <li><code>username</code> <code>(string: \"\")</code></li> <li><code>password</code> <code>(string: \"\")</code></li> </ul> </li> <li><code>postgres</code>:<ul> <li><code>hostname</code> <code>(string: \"127.0.0.1\")</code> - Address where the database is located</li> <li><code>port</code> <code>(int: 5432)</code></li> <li><code>username</code> <code>(string: \"\")</code> - Usuario para realizar la conexi\u00f3n con la base de datos</li> <li><code>password</code> <code>(string: \"\")</code> - Contrase\u00f1a para realizar la conexi\u00f3n con la base de datos</li> </ul> </li> </ul> </li> <li> <p><code>crypto_engines</code>:</p> <ul> <li><code>default_id</code> <code>(string: \"bbc8535e-9b3b-4f8f-8f54-05c971f774fc\")</code> - The default cryptographic engine ID, valid options are <code>GOLANG</code>, <code>HASHICORP_VAULT_KV_V2</code>, <code>AWS_KMS</code>, <code>AWS_SECRETS_MANAGER</code> and <code>PKCS11</code>.</li> <li><code>pkcs11</code>:<ul> <li><code>id</code> <code>(string: \"bbc8535e-9b3b-4f8f-8f54-05c971f774fc\")</code> - Name of the PKCS11 cryptographic engine used.</li> <li><code>metadata</code> <code>(key-value: {})</code> - Variable structure of string type used to configure specific variables of each HSM. This structure does not have fixed variables.</li> <li><code>token</code> <code>(string: \"lamassuHSM\")</code> - The token used to connect to the HSM.</li> <li><code>pin</code> <code>(string: \"1234\")</code> - The pin used to connect to the HSM.</li> <li><code>module_path</code> <code>(string: \"/usr/local/lib/libpkcs11-proxy.so\")</code> - The address where the module to connect to the HSM is located.</li> <li><code>module_extra_options</code>: - Extra variables depending on each HSM Software<ul> <li><code>env</code> <code>(key-value: {})</code></li> </ul> </li> </ul> </li> <li><code>hashicorp_vault</code>:<ul> <li><code>id</code> <code>(string: \"c25c421f-a293-4066-a18f-f4e6de3d06be\")</code> - Hashicorp Vault cryptographic engine ID</li> <li><code>metadata</code> <code>(key-value: {})</code></li> <li><code>role_id</code> <code>(string: \"\")</code> - In Vault's authentication process, a Role ID is often used as a static identifier for a client or application. It's associated with a particular role that defines the permissions and policies a client has within Vault.</li> <li><code>secret_id</code> <code>(string: \"\")</code> - The Secret ID is a dynamic credential associated with a Role ID. It is used as part of the authentication process to obtain a Vault token, which grants access to Vault resources.</li> <li><code>auto_unseal_enabled</code> <code>(bool: false)</code> - When you start a new Vault server, it typically starts in a sealed state, where it cannot access its encrypted data or provide services until it is manually unsealed. Auto unseal automates this process.</li> <li><code>auto_unseal_keys_file</code> <code>(string: \"\")</code> - The keys used to perform the unseal of Vault</li> <li><code>protocol</code> <code>(string: \"http\")</code> </li> <li><code>base_path</code> <code>(string: \"\")</code></li> <li><code>hostname</code> <code>(string: \"127.0.0.1\")</code> - This is the address or URL where your Vault server is running.</li> <li><code>port</code> <code>(int: 8200)</code> - The default port for HashiCorp Vault's HTTP API is 8200. This means that when you access Vault's HTTP API over HTTP or HTTPS, you typically use port 8200 by default.</li> <li><code>insecure_skip_verify</code> <code>(bool: false)</code></li> <li><code>ca_cert_file</code> <code>(string: \"\")</code> - The CA certificate that is used to trust the server.</li> </ul> </li> <li><code>aws_kms</code>:<ul> <li><code>id</code> <code>(string: \"8289b238-95d1-4473-90cd-bbae48ad65a2\")</code> - AWS KMS cryptographic engine ID</li> <li><code>metadata</code> <code>(key-value: {})</code></li> <li><code>access_key_id</code> <code>(string: \"\")</code> -  These are your AWS access credentials used to authenticate your requests to AWS services.  Access Key ID is similar to a username.</li> <li><code>secret_access_key</code> <code>(string: \"\")</code> - Secret Access Key is similar to a password. </li> <li><code>region</code> <code>(string: \"\")</code> - This specifies the AWS region where your KMS key and other resources are located. </li> </ul> </li> <li><code>aws_secrets_manager</code>:<ul> <li><code>id</code> <code>(string: \"f4180711-84ae-46e2-8872-b3e6500b1c79\")</code> - AWS Secrets Manager cryptographic engine ID</li> <li><code>metadata</code> <code>(key-value: {})</code></li> <li><code>access_key_id</code> <code>(string: \"\")</code> -  These are your AWS access credentials used to authenticate your requests to AWS services.  Access Key ID is similar to a username.</li> <li><code>secret_access_key</code> <code>(string: \"\")</code> - Secret Access Key is similar to a password.</li> <li><code>region</code> <code>(string: \"\")</code> - This specifies the AWS region where your AWS Secrets Manager and other resources are located. </li> </ul> </li> <li><code>golang</code>:<ul> <li><code>id</code> <code>(string: \"\")</code> - Golang cryptographic engine ID</li> <li><code>metadata</code> <code>(key-value: {})</code></li> <li><code>storage_directory</code> <code>(string: \"\")</code> - Directory in which the secrets (Private Keys) will be stored.</li> </ul> </li> </ul> </li> <li> <p><code>crypto_monitoring</code>:</p> <ul> <li><code>enabled</code> <code>(bool: true)</code> - Enable monitoring of cryptographic objects and notify when a certificate is expired or about to expire.</li> <li><code>frequency</code> <code>(string: \"* * * * *\")</code> - Frequency at which such monitoring is to be performed.</li> <li><code>status_machine_deltas</code>:<ul> <li><code>near_expiration</code> <code>(string: \"30d\")</code> - Set the expiration time, whereby if the certificate, in this case, has 30 days or less to expire, the status will be changed to <code>NEARING_EXPIRATION</code>.</li> <li><code>critical_expiration</code> <code>(string: \"90d\")</code> - Set the expiration time, whereby if the certificate, in this case, has 90 days or less to expire, the status will be changed to <code>CRITICAL_EXPIRATION</code>.</li> </ul> </li> <li><code>automatic_ca_rotation</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code> - Enable automatic CAs rotation depending on when it is going to expire, to set the date on which the rotation will be performed there is the variable <code>renewal_delta</code>.</li> <li><code>renewal_delta</code> <code>(string: \"5d\")</code> - Set the date on which the automatic rotation is to be performed, in this case, 5 days before the CAs expire.</li> </ul> </li> </ul> </li> <li> <p><code>ocsp_server_url</code> <code>(string: \"info\")</code> - OCSP server URL</p> </li> </ul>"},{"location":"tech-ref/config/helm/","title":"Helm","text":""},{"location":"tech-ref/config/helm/#values-reference","title":"Values reference","text":"<ul> <li><code>domain</code> <code>(string: \"dev.lamassu.io\")</code> - The Domain in which Lamassu is to be deployed</li> <li><code>debugMode</code> <code>(bool: true)</code> - Variable to indicate whether Lamassu services are deployed in debug mode.</li> <li> <p><code>storageClassName</code> </p> </li> <li> <p><code>tls</code>:</p> <ul> <li><code>type</code> <code>(string: \"selfSigned\")</code> - Type of certificate to be used by the API Gateway for external connections. Valid options are <code>selfSigned</code>, <code>letsEncrypt</code> and <code>external</code>.</li> <li><code>selfSignedOptions</code>:<ul> <li><code>duration</code> <code>(string: \"2160h\")</code> - The duration of the generated self-signed certificates</li> </ul> </li> <li><code>letsEncryptOptions</code>: - If the certificates generated by letsEncrypt will be of cluster issuer or issuer type. If it is of the issuer type, the secret can only be used in the namespace created, on the other hand, if it is of the issuer cluster type, the secret can be used in the whole cluster.<ul> <li><code>clusterIssuer</code> <code>(bool: false)</code> </li> <li><code>issuer</code> <code>(bool: true)</code></li> </ul> </li> <li><code>externalOptions</code>:<ul> <li><code>secretName</code> <code>(string: \"\")</code> - Name of the secret created with the external certificates</li> </ul> </li> </ul> </li> <li> <p><code>postgres</code>:</p> <ul> <li><code>hostname</code> <code>(string: \"\")</code> - Address at which Postgres Database is located</li> <li><code>port</code> <code>(int: 5432)</code> - The port to be accessed to connect to the database</li> <li><code>username</code> <code>(string: \"\")</code> - Database user to perform authentication</li> <li><code>password</code> <code>(string: \"\")</code> - Password for authentication</li> </ul> </li> <li> <p><code>ingress</code>:</p> <ul> <li><code>default</code> <code>(bool: false)</code></li> <li><code>annotations</code>: |     <code>kubernetes.io/ingress.class: \"nginx\"</code></li> </ul> </li> <li> <p><code>auth</code>:</p> <ul> <li><code>oidc</code>:<ul> <li><code>frontend</code>:<ul> <li><code>clientId</code> <code>(string: \"frontend\")</code> - The client ID configured in the authentication server</li> <li><code>authority</code> <code>(string: \"https://dev.lamassu.io/auth/realms/lamassu\")</code> - URL address of the authorization server</li> <li><code>awsCognito</code><ul> <li><code>enabled</code> <code>(bool: false)</code> - In case AWS Cognito is used as authentication server.</li> <li><code>hostedUiDomain</code> <code>(string: \"\")</code> - Domain where the server is hosted</li> </ul> </li> </ul> </li> <li><code>apiGateway</code>:<ul> <li><code>jwksUrl</code> <code>(string: \"https://auth:8443/auth/realms/lamassu/protocol/openid-connect/certs\")</code> - It is a URL that points to a JSON Web Key Set (JWKS), which contains a collection of cryptographic keys used for verifying the authenticity of JSON Web Tokens (JWTs)</li> </ul> </li> <li><code>authorization</code><ul> <li><code>rolesClaim</code> <code>(string: \"realm_access.roles\")</code></li> <li><code>roles</code>: - Roles created in Lamassu<ul> <li><code>admin</code> <code>(string: \"admin\")</code></li> <li><code>operator</code> <code>(string: \"operator\")</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>services</code>:</p> <ul> <li><code>keycloak</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code> - In case Keycloak is used as authentication server</li> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/keycloak:2.1.0\")</code> - Docker image of the authentication service</li> <li><code>adminCreds</code>: - Credentials to access as administrator<ul> <li><code>username</code> <code>(string: \"admin\")</code></li> <li><code>password</code> <code>(string: \"admin\")</code></li> </ul> </li> <li><code>initUsers</code>: - Users to be created when the service is initialized<ul> <li><code>username</code> <code>(string: \"enroller\")</code> <code>password</code> <code>(string: \"enroller\")</code> <code>roles</code>:<ul> <li><code>pki-admin</code></li> </ul> </li> <li><code>username</code> <code>(string: \"operator\")</code> <code>password</code> <code>(string: \"operator\")</code></li> </ul> </li> </ul> </li> <li><code>ui</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-ui:2.2.0\")</code> - Docker image of the ui service</li> </ul> </li> <li><code>ocsp</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-ocsp:2.2.0\")</code> - Docker image of the ocsp service</li> </ul> </li> <li><code>ca</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-ca:2.2.0\")</code> - Lamassu CA service docker image</li> <li><code>engine</code> <code>(string: \"vault\")</code> - The cryptographic engine used by the CA service</li> <li><code>aws</code>: - Variables to make the connection with AWS.<ul> <li><code>region</code> <code>(string: \"\")</code></li> <li><code>accessKeyId</code> <code>(string: \"\")</code></li> <li><code>secretAccessKey</code> <code>(string: \"\")</code></li> </ul> </li> <li><code>aboutToExpire</code> <code>(int: 90)</code> </li> <li><code>periodicScan</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code> - To activate the periodic scanning of the certificate status</li> <li><code>cron</code> <code>(string: \"0 * * * *\")</code> - Frequency of how often testing is to be performed</li> </ul> </li> </ul> </li> <li><code>deviceManager</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-devmanager:2.2.0\")</code> - Device Manager service docker image</li> <li><code>minimumReenrollmentDays</code> <code>(int: 100)</code> - The number of days before a certificate expires and admits the reenrollment of the certificate.</li> </ul> </li> <li><code>dmsManager</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-dmsmanager:2.2.0\")</code> - DMS Manager service docker image</li> </ul> </li> <li><code>openPolicyAgent</code>:<ul> <li><code>image</code> <code>(string: \"openpolicyagent/opa:0.37.1-envoy\")</code> - Open Policy Agent service docker image</li> <li><code>remLogger</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/opa-rem-logger:2.1.0\")</code> - REM Logger service docker image</li> </ul> </li> </ul> </li> <li><code>cloudProxy</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-cloudproxy:2.2.0\")</code> - Cloud Proxy service docker image</li> </ul> </li> <li><code>alerts</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-alerts:2.2.0\")</code> - Alerts service docker image</li> <li><code>smtp</code>: - Variables to configure the SMTP mail server configuration<ul> <li><code>from</code> <code>(string: \"\")</code></li> <li><code>insecure</code> <code>(bool: false)</code></li> <li><code>enable_ssl</code> <code>(bool: false)</code></li> <li><code>username</code> <code>(string: \"\")</code></li> <li><code>password</code> <code>(string: \"\")</code></li> <li><code>host</code> <code>(string: \"\")</code></li> <li><code>port</code> <code>(int: 25)</code> </li> </ul> </li> </ul> </li> <li><code>awsConnector</code>:<ul> <li><code>image</code> <code>(string: \"ghcr.io/lamassuiot/lamassu-aws-connector:2.1.0\")</code> - AWS Connector service docker image</li> <li><code>enabled</code> <code>(bool: false)</code> - To enable the AWS Connector service</li> <li><code>name</code> <code>(string: \"\")</code></li> <li><code>aws</code>: - Variables to make the connection with AWS.<ul> <li><code>accessKeyId</code> <code>(string: \"\")</code></li> <li><code>secretAccessKey</code> <code>(string: \"\")</code></li> <li><code>defaultRegion</code> <code>(string: \"\")</code></li> <li><code>sqs</code>: - Name of the SQS queues used at Lamassu<ul> <li><code>inboundQueueName</code> <code>(string: \"\")</code></li> <li><code>outbountQueueName</code> <code>(string: \"\")</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>simulationTools</code>:</p> <ul> <li><code>enabled</code> <code>(bool: false)</code> - To enable the simulation tools</li> <li><code>virtualDevice</code>:<ul> <li><code>image</code> <code>(string: \"lamassuiot/lamassuiot-virtual-device:2.0.0\")</code> - Virtual Device simulation tool docker image</li> </ul> </li> <li><code>virtualDms</code>:<ul> <li><code>image</code> <code>(string: \"lamassuiot/lamassuiot-virtual-dms:2.0.0\")</code> - Virtual DMS simulation tool docker image</li> </ul> </li> </ul> </li> <li> <p><code>rabbitmq</code>:</p> <ul> <li><code>enabled</code> <code>(bool: true)</code> - To enable the deployment of the AMQP broker</li> <li><code>fullnameOverride</code> <code>(string: \"rabbitmq\")</code> - The name of the service</li> <li><code>global</code>:<ul> <li><code>storageClass</code></li> </ul> </li> <li><code>podAnnotations</code>:<ul> <li><code>reloader.stakater.com/auto</code></li> </ul> </li> <li><code>auth</code>:<ul> <li><code>username</code> <code>(string: \"user\")</code> - Username to connect to the broker</li> <li><code>password</code> <code>(string: \"user\")</code> - Password to connect to the broker</li> <li><code>tls</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code> - To enable the connection to be made via HTTPS</li> <li><code>existingSecret</code> <code>(string: \"rabbitmq-upstream-cert\")</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p><code>consul</code>:</p> <ul> <li><code>fullnameOverride</code> <code>(string: \"consul\")</code> - The name of the service</li> <li><code>global</code>:<ul> <li><code>enabled</code> <code>(bool: false)</code></li> <li><code>datacenter</code> <code>(string: \"lamassu-k8s\")</code></li> <li><code>tls</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code> - To enable the connection to be made via HTTPS</li> <li><code>enableAutoEncrypt</code> <code>(bool: true)</code></li> <li><code>verify</code> <code>(bool: false)</code></li> <li><code>caCert</code>:<ul> <li><code>secretName</code> <code>(string: \"ca-upstream-cert\")</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>client</code>:<ul> <li><code>enabled</code> <code>(bool: false)</code></li> </ul> </li> <li><code>server</code>:<ul> <li><code>serverCert</code>:<ul> <li><code>secretName</code> <code>(string: \"consul-upstream-cert\")</code></li> </ul> </li> <li><code>affinity</code> <code>(string: \"null\")</code></li> <li><code>replicas</code> <code>(int: 3)</code> </li> <li><code>storageClassName</code></li> <li><code>extraConfig</code>: |     {         \"enable_agent_tls_for_checks\": true     }</li> </ul> </li> </ul> </li> <li> <p><code>vault</code>:</p> <ul> <li><code>fullnameOverride</code> <code>(string: \"\")</code> - The name of the service</li> <li><code>global</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code></li> <li><code>tlsDisable</code> <code>(bool: false)</code></li> </ul> </li> <li><code>server</code>:<ul> <li><code>authDelegator</code>:<ul> <li><code>enabled</code> <code>(bool: false)</code></li> </ul> </li> <li><code>affinity</code> <code>(string: \"\")</code></li> <li><code>annotations</code>:<ul> <li><code>reloader.stakater.com/auto</code> <code>(bool: true)</code></li> </ul> </li> <li><code>extraVolumes</code>:<ul> <li><code>type</code>: <code>(string: \"\")</code> <code>name</code> <code>(string: \"\")</code></li> </ul> </li> <li><code>ha</code>:<ul> <li><code>enabled</code> <code>(bool: true)</code></li> <li><code>replicas</code></li> <li><code>apiAddr</code> <code>(string: \"\")</code></li> <li> <p><code>config</code>: |     ui = true     listener \"tcp\" {     address = \"[::]:8200\"     cluster_address = \"[::]:8201\"     tls_cert_file = \"/vault/userconfig/vault-upstream-cert/tls.crt\"     tls_key_file  = \"/vault/userconfig/vault-upstream-cert/tls.key\"     tls_client_ca_file = \"/vault/userconfig/vault-upstream-cert/ca.crt\"     }</p> <p>storage \"consul\" { path = \"vault/\" address = \"https://consul-server:8501\" tls_ca_file = \"/vault/userconfig/vault-upstream-cert/ca.crt\" }</p> <p>service_registration \"kubernetes\" {}     - <code>ui</code>:         - <code>enabled</code> <code>(bool: false)</code>     - <code>injector</code>:         - <code>enabled</code> <code>(bool: false)</code></p> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"}]}