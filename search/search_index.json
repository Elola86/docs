{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lamassu Iot Docs","title":"Welcome to Lamassu Iot Docs"},{"location":"#welcome-to-lamassu-iot-docs","text":"","title":"Welcome to Lamassu Iot Docs"},{"location":"est/","text":"EST Protocol For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"EST Protocol"},{"location":"est/#est-protocol","text":"For full documentation visit mkdocs.org .","title":"EST Protocol"},{"location":"est/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"est/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"go-clients/","text":"Using Go Clients Lamassu provides easy to use GO clients for most of its APIs to help speeding up the development of aplications: package main import ( \"net/url\" lamassuCAClient \"github.com/lamassuiot/lamassuiot/pkg/ca/client\" caDTO \"github.com/lamassuiot/lamassuiot/pkg/ca/common/dto\" \"github.com/lamassuiot/lamassuiot/pkg/utils/client\" ) function main (){ lamassuGatewayURL := \"dev.lamassu.io\" apiCAFile := \"path/to/apigw.crt\" caClient := lamassuCAClient . NewLamassuCAClient ( client . ClientConfiguration { URL : & url . URL { Scheme : \"https\" , Host : lamassuGatewayURL , Path : \"/api/ca/\" , }, AuthMethod : client . JWT , AuthMethodConfig : & client . JWTConfig { Username : \"enroller\" , Password : \"enroller\" , URL : & url . URL { Scheme : \"https\" , Host : \"auth.\" + lamassuGatewayURL , }, CACertificate : apiCAFile , }, CACertificate : apiCAFile , }) ca , err = caClient . CreateCA ( context . Background (), caDTO . Pki , caName , caDTO . PrivateKeyMetadata { KeyType : \"rsa\" , KeyBits : 2048 }, caDTO . Subject { CN : caName }, 365 * time . Hour , 30 * time . Hour ) }","title":"Using Go Clients"},{"location":"go-clients/#using-go-clients","text":"Lamassu provides easy to use GO clients for most of its APIs to help speeding up the development of aplications: package main import ( \"net/url\" lamassuCAClient \"github.com/lamassuiot/lamassuiot/pkg/ca/client\" caDTO \"github.com/lamassuiot/lamassuiot/pkg/ca/common/dto\" \"github.com/lamassuiot/lamassuiot/pkg/utils/client\" ) function main (){ lamassuGatewayURL := \"dev.lamassu.io\" apiCAFile := \"path/to/apigw.crt\" caClient := lamassuCAClient . NewLamassuCAClient ( client . ClientConfiguration { URL : & url . URL { Scheme : \"https\" , Host : lamassuGatewayURL , Path : \"/api/ca/\" , }, AuthMethod : client . JWT , AuthMethodConfig : & client . JWTConfig { Username : \"enroller\" , Password : \"enroller\" , URL : & url . URL { Scheme : \"https\" , Host : \"auth.\" + lamassuGatewayURL , }, CACertificate : apiCAFile , }, CACertificate : apiCAFile , }) ca , err = caClient . CreateCA ( context . Background (), caDTO . Pki , caName , caDTO . PrivateKeyMetadata { KeyType : \"rsa\" , KeyBits : 2048 }, caDTO . Subject { CN : caName }, 365 * time . Hour , 30 * time . Hour ) }","title":"Using Go Clients"},{"location":"lamassu-compose/","text":"Install Lamassu Compose Lamassu Compose is the oficial release contaning the scripts and resources required to deploy all microservices such as the CA component, the VA component or the RA components to name a few. Setup Requirements https://stedolan.github.io/jq/download/ jq . Get the latest version: https://stedolan.github.io/jq/download/ docker and docker-compose : Get the latest version: https://docs.docker.com/engine/install/ubuntu/ and https://docs.docker.com/compose/install/ Have a working DNS server able to resolve the domain used during the installation process or add the wollowing content to the /etc/hosts file, replacing the dev.lamassu.io domain with your own: 127.0.0.1 dev.lamassu.io 127.0.0.1 vault.dev.lamassu.io 127.0.0.1 auth.dev.lamassu.io 127.0.0.1 tracing.dev.lamassu.io 127.0.0.1 consul.dev.lamassu.io Setup Clone the repository and get into the directory: git clone https://github.com/lamassuiot/lamassu-compose && cd lamassu-compose Define the next secret environment variables by exporing the following variables. export DB_USER=<DB_USER> //Database user. export DB_PASSWORD=<DB_PASSWORD> //Database user password. Define the domain to be used by exporing the DOMAIN variable. export DOMAIN=dev.lamassu.io Define the docker images tags to be used by exporting the following variables export LAMASSU_GATEWAY_DOCKER_IMAGE=lamasuiot/lamassu-gateway:latest export LAMASSU_UI_DOCKER_IMAGE=lamasuiot/lamassu-ui:latest export LAMASSU_DB_DOCKER_IMAGE=lamasuiot/lamassu-db:latest export LAMASSU_AUTH_DOCKER_IMAGE=lamasuiot/lamassu-auth:latest export LAMASSU_CA_DOCKER_IMAGE=lamasuiot/lamassu-ca:latest export LAMASSU_DMS_ENROLLER_DOCKER_IMAGE=lamasuiot/lamassu-dms-enroller:latest export LAMASSU_DEVICE_MANAGER_DOCKER_IMAGE=lamasuiot/lamassu-device-manager:latest export LAMASSU_RABBITMQ_DOCKER_IMAGE=lamasuiot/lamassu-rabbitmq:latest export LAMASSU_CLOUD_PROXY_DOCKER_IMAGE=lamasuiot/lamassu-cloud-proxy:latest export LAMASSU_OCSP_DOCKER_IMAGE=lamasuiot/lamassu-ocsp:latest Run the follwing command to replace .env file with the values defined varibales previously: envsubst < .env | tee .env Run the installer: bash install.sh (OPTIONAL) Import your certificates: The install.sh script also generates self-signed for the downstream certificates. It is posible to provide other valid certificates by replacing the following files: \u251c\u2500\u2500 upstream \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 downstream \u251c\u2500\u2500 tls.crt <----- Provide your certificate \u2514\u2500\u2500 tls.key <----- Provide your private key Once you replace this certificates, restart the api-gateway to obtain the imported certificates: docker-compose rm -s -f api-gateway dms-default docker-compose up -d api-gateway dms-default Final notes: \ud83d\ude80 You are ready to go \ud83d\ude80 Note the following things: Keycloak is your auth provider. During the install.sh the service is provisioned with 2 users with different roles: Username: enroller Password: enroller Role: admin Username: operator Password: operator Role: operator You can change those credentials (or create new users) using keycloak's UI available at: https://auth.<DOMAIN> Manual Setup To launch Lamassu follow the next steps: Set up your environment: Clone the repository and get into the directory: git clone https://github.com/lamassuiot/lamassu-compose && cd lamassu-compose Define the DB credentials variables used by the .env file. export DB_USER=<DB_USER> //Database user. export DB_PASSWORD=<DB_PASSWORD> //Database user password. Define the domain to be used by the .env file. export DOMAIN=dev.lamassu.io Define the docker images tags to be used by exporting the following variables export LAMASSU_GATEWAY_DOCKER_IMAGE=lamasuiot/lamassu-gateway:latest export LAMASSU_UI_DOCKER_IMAGE=lamasuiot/lamassu-ui:latest export LAMASSU_DB_DOCKER_IMAGE=lamasuiot/lamassu-db:latest export LAMASSU_AUTH_DOCKER_IMAGE=lamasuiot/lamassu-auth:latest export LAMASSU_CA_DOCKER_IMAGE=lamasuiot/lamassu-ca:latest export LAMASSU_DMS_ENROLLER_DOCKER_IMAGE=lamasuiot/lamassu-dms-enroller:latest export LAMASSU_DEVICE_MANAGER_DOCKER_IMAGE=lamasuiot/lamassu-device-manager:latest export LAMASSU_RABBITMQ_DOCKER_IMAGE=lamasuiot/lamassu-rabbitmq:latest export LAMASSU_CLOUD_PROXY_DOCKER_IMAGE=lamasuiot/lamassu-cloud-proxy:latest export LAMASSU_OCSP_DOCKER_IMAGE=lamasuiot/lamassu-ocsp:latest Run the follwing command to replace .env file with the values defined varibales previously: envsubst < .env | tee .env The Gateway and TLS Certificates Lamassu uses a Gateway to expose all the deployed services. Moreover, the gateway is in charge of performing the following tasks: - Routing traffic to services - Enforcing authentication policies - Enforcing authorization policies - Logging & tracing - Healthchecking - Securely expose services using TLS The different APIs exposed through the gateway have been configured to ONLY accept request originates inside the platform via a mTLS authentication: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Client/Browser \u2502 ------<downstream>----- \u2502 Gateway \u2502 ------<upstream>------ \u2502 API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 TLS \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 mTLS \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Generate the upstream certificates. cd tls-certificates ./gen-upstream-certs.sh There are 2 options for the downstream certificate: Import an existing certificate : If you have valid certificates for your domain, you can use them by placing them under the downstream folder. The end result should be: \u251c\u2500\u2500 upstream \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 downstream \u251c\u2500\u2500 tls.crt \u2514\u2500\u2500 tls.key Generate a Self Signed certificate : If you need to create a new self-signed certificate, run the following command: ./gen-downstream-certs.sh Authentication service configuration: Run Keycloak: docker-compose up -d auth Keycloak image is configured with a Realm, a client and two different roles: admin and operator . Create a user with admin role to perform Enroller administrator tasks. (The command below creates a user named enroller with enroller as its password): docker-compose exec auth /opt/jboss/keycloak/bin/add-user-keycloak.sh -r lamassu -u enroller -p enroller --roles admin Create a user with operator role to perform Device Manufacturing System tasks. This Device Manufacturing System must associate its CSR with this user matching the CN attribute and the username.(The command below creates a user named operator with operator as its password): docker-compose exec auth /opt/jboss/keycloak/bin/add-user-keycloak.sh -r lamassu -u operator -p operator --roles operator Reload keyclok server docker-compose exec auth /opt/jboss/keycloak/bin/jboss-cli.sh --connect command=:reload If Keycloak display the following output, keycloak has successfully reloaded. Otherwise, run the command again until you see the expected output: { \"outcome\" => \"success\", \"result\" => undefined } Provision and configure Vault and Lamassu CA: Run Vault: docker-compose up -d vault consul-server api-gateway Initalize vault: This process generates vault's unseal keys as well as the root token: docker-compose exec vault vault operator init -key-shares=5 -key-threshold=3 -tls-skip-verify -format=json > vault-credentials.json Verify the vault-credentials.json file has the expected content. It should be similar to this: { \"unseal_keys_b64\": [ \"Hfx46iMq/PXoBPhDZ0EAMM9MDWS8GTCANFbAkzVEzFOD\", \"lfo48PHGFGHmpaFn6Z6rWTXTXVS53m9duxsvwVjRDc2L\", \"dcVw6N81i+/pY34WTHQYkV848to7jNeVkgdJOtgxnRkS\", \"Aut6oL7+GomXCrrTH0FCKhJwAs2PrWFYSnWpgjLfwsH0\", \"pprFM0HJEUR4m3kaIT5sga87aJ4AjXi32KVn6dgfivii\" ], \"unseal_keys_hex\": [ \"1dfc78ea232afcf5e804f84367410030cf4c0d64bc1930803456c0933544cc5383\", \"95fa38f0f1c61461e6a5a167e99eab5935d35d54b9de6f5dbb1b2fc158d10dcd8b\", \"75c570e8df358befe9637e164c7418915f38f2da3b8cd7959207493ad8319d1912\", \"02eb7aa0befe1a89970abad31f41422a127002cd8fad61584a75a98232dfc2c1f4\", \"a69ac53341c91144789b791a213e6c81af3b689e008d78b7d8a567e9d81f8af8a2\" ], \"unseal_shares\": 5, \"unseal_threshold\": 3, \"recovery_keys_b64\": [], \"recovery_keys_hex\": [], \"recovery_keys_shares\": 5, \"recovery_keys_threshold\": 3, \"root_token\": \"s.80Mpm0OmxlXzoSxZB2MMPcNu\" } Export the following variables: export VAULT_TOKEN=$(cat vault-credentials.json | jq .root_token -r) export VAULT_ADDR=https://vault.$DOMAIN Unseal Vault using the keys obtained with the previous command: curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[0])\\\" }\" curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[1])\\\" }\" curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[2])\\\" }\" Vault must be provisioned with some resources (authentication methods, policies and secret engines). That can be achieved by running the ca-provision.sh script. Vault will be provisioned with 4 Root CAs, 1 Special CA (Lamassu-DMS-Enroller) AppRole authentication method and one role and policy for each service or container that needs to exchange data with it. cd config/vault/provision/ ./provisioner.sh cd ../../../ Get RoleID and SecretID for each service and set those values in the empty fields of the .docker-compose.yml file. export CA_VAULT_ROLEID=$(curl -k --header \"X-Vault-Token: ${VAULT_TOKEN}\" ${VAULT_ADDR}/v1/auth/approle/role/lamassu-ca-role/role-id | jq -r .data.role_id ) export CA_VAULT_SECRETID=$(curl -k --header \"X-Vault-Token: ${VAULT_TOKEN}\" --request POST ${VAULT_ADDR}/v1/auth/approle/role/lamassu-ca-role/secret-id | jq -r .data.secret_id) # Set RoleID and SecretID in docker-compose.yml file sed -i 's/<LAMASSU_CA_VAULT_ROLE_ID>/'$CA_VAULT_ROLEID'/g' docker-compose.yml sed -i 's/<LAMASSU_CA_VAULT_SECRET_ID>/'$CA_VAULT_SECRETID'/g' docker-compose.yml Configure the Device Manager: The Device Manage has a configurable variable that deteremines when a device can renew (also known as reenroll) its certificate. By default the reenrollment process can only be done 30 days prior to the cert's expiratio time. This value can be changed by modifying the DEVICE_MANAGER_MINIMUM_REENROLL_DAYS variable located in the .env file. Start the remaining services: docker-compose up -d Configure the Default DMS First, authenticate against Keycloak: export AUTH_ADDR=auth.$DOMAIN export TOKEN=$(curl -k --location --request POST \"https://$AUTH_ADDR/auth/realms/lamassu/protocol/openid-connect/token\" --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'grant_type=password' --data-urlencode 'client_id=frontend' --data-urlencode 'username=enroller' --data-urlencode 'password=enroller' |jq -r .access_token) Then, register a new DMS named Lamassu-Default-DMS: Note: while registering new DMS instances with non admin users, it is necessary to register the DMS using the user's username as the common name, otherwise, the user won't see its DMSs export ENROLL_ADDR=$DOMAIN/api/dmsenroller export DMS_REGISTER_RESPONSE=$(curl -k --location --request POST \"https://$ENROLL_ADDR/v1/Lamassu-Default-DMS/form\" --header \"Authorization: Bearer ${TOKEN}\" --header 'Content-Type: application/json' --data-raw \"{\\\"url\\\":\\\"https://${DOMAIN}:5000\\\", \\\" subject\\\":{ \\\"common_name\\\": \\\"Lamassu-Default-DMS\\\",\\\"country\\\": \\\"\\\",\\\"locality\\\": \\\"\\\",\\\"organization\\\": \\\"\\\",\\\"organization_unit\\\": \\\"\\\",\\\"state\\\": \\\"\\\"},\\\"key_metadata\\\":{\\\"bits\\\": 3072,\\\"type\\\": \\\"rsa\\\"}}\") echo $DMS_REGISTER_RESPONSE | jq -r .priv_key | sed 's/\\\\n/\\n/g' | sed -Ez '$ s/\\n+$//' | base64 -d > lamassu-default-dms/config/dms.key export DMS_ID=$(echo $DMS_REGISTER_RESPONSE | jq -r .dms.id) 3. Enroll the new DMS curl -k --location --request PUT \"https://$ENROLL_ADDR/v1/$DMS_ID\" --header \"Authorization: Bearer $TOKEN\" --header 'Content-Type: application/json' --data-raw '{\"status\": \"APPROVED\"}' 4. Get issued DMS Cert curl -k --location --request GET \"https://$ENROLL_ADDR/v1/$DMS_ID/crt\" --header \"Authorization: Bearer $TOKEN\" | base64 -d > lamassu-default-dms/config/dms.crt And finally, start the DMS \"server\": docker-compose rm -s -f dms-default docker-compose up -d dms-default Using the APIs The main 3 Open API documentation can be found on the following urls: https://dev.lamassu.io/api/ca/v1/docs/ https://dev.lamassu.io/api/dmsenroller/v1/docs/ https://dev.lamassu.io/api/devmanager/v1/docs/ \u26a0\ufe0f The following endpoints defined in the Lamassu Device Manager Api specification are not correctly defined due to the limitations imposed by the Open API 3.0 schema. The current specification defines an OIDC security schema (meaining that a valid JWT token must be provided while requesting the API) while the implemented security schema uses the mTLS approach. This issue will be resolved once the specification is Open API 3.1 compliant. The affected endpoints are: Certificate rotation By default, all self-signed certificates (both upstream and downstream) have a lifespan of 365 days. At that point it will be necesary to regenerate the expired certificates: Regenerate the certificates: cd tls-certificates ./gen-upstream-certs.sh ./gen-downstream-certs.sh cd .. Reboot all services: docker-compose down docker-compose up -d","title":"Install Lamassu Compose"},{"location":"lamassu-compose/#install-lamassu-compose","text":"Lamassu Compose is the oficial release contaning the scripts and resources required to deploy all microservices such as the CA component, the VA component or the RA components to name a few.","title":"Install Lamassu Compose"},{"location":"lamassu-compose/#setup-requirements","text":"https://stedolan.github.io/jq/download/ jq . Get the latest version: https://stedolan.github.io/jq/download/ docker and docker-compose : Get the latest version: https://docs.docker.com/engine/install/ubuntu/ and https://docs.docker.com/compose/install/ Have a working DNS server able to resolve the domain used during the installation process or add the wollowing content to the /etc/hosts file, replacing the dev.lamassu.io domain with your own: 127.0.0.1 dev.lamassu.io 127.0.0.1 vault.dev.lamassu.io 127.0.0.1 auth.dev.lamassu.io 127.0.0.1 tracing.dev.lamassu.io 127.0.0.1 consul.dev.lamassu.io","title":"Setup Requirements"},{"location":"lamassu-compose/#setup","text":"Clone the repository and get into the directory: git clone https://github.com/lamassuiot/lamassu-compose && cd lamassu-compose Define the next secret environment variables by exporing the following variables. export DB_USER=<DB_USER> //Database user. export DB_PASSWORD=<DB_PASSWORD> //Database user password. Define the domain to be used by exporing the DOMAIN variable. export DOMAIN=dev.lamassu.io Define the docker images tags to be used by exporting the following variables export LAMASSU_GATEWAY_DOCKER_IMAGE=lamasuiot/lamassu-gateway:latest export LAMASSU_UI_DOCKER_IMAGE=lamasuiot/lamassu-ui:latest export LAMASSU_DB_DOCKER_IMAGE=lamasuiot/lamassu-db:latest export LAMASSU_AUTH_DOCKER_IMAGE=lamasuiot/lamassu-auth:latest export LAMASSU_CA_DOCKER_IMAGE=lamasuiot/lamassu-ca:latest export LAMASSU_DMS_ENROLLER_DOCKER_IMAGE=lamasuiot/lamassu-dms-enroller:latest export LAMASSU_DEVICE_MANAGER_DOCKER_IMAGE=lamasuiot/lamassu-device-manager:latest export LAMASSU_RABBITMQ_DOCKER_IMAGE=lamasuiot/lamassu-rabbitmq:latest export LAMASSU_CLOUD_PROXY_DOCKER_IMAGE=lamasuiot/lamassu-cloud-proxy:latest export LAMASSU_OCSP_DOCKER_IMAGE=lamasuiot/lamassu-ocsp:latest Run the follwing command to replace .env file with the values defined varibales previously: envsubst < .env | tee .env Run the installer: bash install.sh (OPTIONAL) Import your certificates: The install.sh script also generates self-signed for the downstream certificates. It is posible to provide other valid certificates by replacing the following files: \u251c\u2500\u2500 upstream \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 downstream \u251c\u2500\u2500 tls.crt <----- Provide your certificate \u2514\u2500\u2500 tls.key <----- Provide your private key Once you replace this certificates, restart the api-gateway to obtain the imported certificates: docker-compose rm -s -f api-gateway dms-default docker-compose up -d api-gateway dms-default Final notes: \ud83d\ude80 You are ready to go \ud83d\ude80 Note the following things: Keycloak is your auth provider. During the install.sh the service is provisioned with 2 users with different roles: Username: enroller Password: enroller Role: admin Username: operator Password: operator Role: operator You can change those credentials (or create new users) using keycloak's UI available at: https://auth.<DOMAIN>","title":"Setup"},{"location":"lamassu-compose/#manual-setup","text":"To launch Lamassu follow the next steps: Set up your environment: Clone the repository and get into the directory: git clone https://github.com/lamassuiot/lamassu-compose && cd lamassu-compose Define the DB credentials variables used by the .env file. export DB_USER=<DB_USER> //Database user. export DB_PASSWORD=<DB_PASSWORD> //Database user password. Define the domain to be used by the .env file. export DOMAIN=dev.lamassu.io Define the docker images tags to be used by exporting the following variables export LAMASSU_GATEWAY_DOCKER_IMAGE=lamasuiot/lamassu-gateway:latest export LAMASSU_UI_DOCKER_IMAGE=lamasuiot/lamassu-ui:latest export LAMASSU_DB_DOCKER_IMAGE=lamasuiot/lamassu-db:latest export LAMASSU_AUTH_DOCKER_IMAGE=lamasuiot/lamassu-auth:latest export LAMASSU_CA_DOCKER_IMAGE=lamasuiot/lamassu-ca:latest export LAMASSU_DMS_ENROLLER_DOCKER_IMAGE=lamasuiot/lamassu-dms-enroller:latest export LAMASSU_DEVICE_MANAGER_DOCKER_IMAGE=lamasuiot/lamassu-device-manager:latest export LAMASSU_RABBITMQ_DOCKER_IMAGE=lamasuiot/lamassu-rabbitmq:latest export LAMASSU_CLOUD_PROXY_DOCKER_IMAGE=lamasuiot/lamassu-cloud-proxy:latest export LAMASSU_OCSP_DOCKER_IMAGE=lamasuiot/lamassu-ocsp:latest Run the follwing command to replace .env file with the values defined varibales previously: envsubst < .env | tee .env The Gateway and TLS Certificates Lamassu uses a Gateway to expose all the deployed services. Moreover, the gateway is in charge of performing the following tasks: - Routing traffic to services - Enforcing authentication policies - Enforcing authorization policies - Logging & tracing - Healthchecking - Securely expose services using TLS The different APIs exposed through the gateway have been configured to ONLY accept request originates inside the platform via a mTLS authentication: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Client/Browser \u2502 ------<downstream>----- \u2502 Gateway \u2502 ------<upstream>------ \u2502 API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 TLS \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 mTLS \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Generate the upstream certificates. cd tls-certificates ./gen-upstream-certs.sh There are 2 options for the downstream certificate: Import an existing certificate : If you have valid certificates for your domain, you can use them by placing them under the downstream folder. The end result should be: \u251c\u2500\u2500 upstream \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 downstream \u251c\u2500\u2500 tls.crt \u2514\u2500\u2500 tls.key Generate a Self Signed certificate : If you need to create a new self-signed certificate, run the following command: ./gen-downstream-certs.sh Authentication service configuration: Run Keycloak: docker-compose up -d auth Keycloak image is configured with a Realm, a client and two different roles: admin and operator . Create a user with admin role to perform Enroller administrator tasks. (The command below creates a user named enroller with enroller as its password): docker-compose exec auth /opt/jboss/keycloak/bin/add-user-keycloak.sh -r lamassu -u enroller -p enroller --roles admin Create a user with operator role to perform Device Manufacturing System tasks. This Device Manufacturing System must associate its CSR with this user matching the CN attribute and the username.(The command below creates a user named operator with operator as its password): docker-compose exec auth /opt/jboss/keycloak/bin/add-user-keycloak.sh -r lamassu -u operator -p operator --roles operator Reload keyclok server docker-compose exec auth /opt/jboss/keycloak/bin/jboss-cli.sh --connect command=:reload If Keycloak display the following output, keycloak has successfully reloaded. Otherwise, run the command again until you see the expected output: { \"outcome\" => \"success\", \"result\" => undefined } Provision and configure Vault and Lamassu CA: Run Vault: docker-compose up -d vault consul-server api-gateway Initalize vault: This process generates vault's unseal keys as well as the root token: docker-compose exec vault vault operator init -key-shares=5 -key-threshold=3 -tls-skip-verify -format=json > vault-credentials.json Verify the vault-credentials.json file has the expected content. It should be similar to this: { \"unseal_keys_b64\": [ \"Hfx46iMq/PXoBPhDZ0EAMM9MDWS8GTCANFbAkzVEzFOD\", \"lfo48PHGFGHmpaFn6Z6rWTXTXVS53m9duxsvwVjRDc2L\", \"dcVw6N81i+/pY34WTHQYkV848to7jNeVkgdJOtgxnRkS\", \"Aut6oL7+GomXCrrTH0FCKhJwAs2PrWFYSnWpgjLfwsH0\", \"pprFM0HJEUR4m3kaIT5sga87aJ4AjXi32KVn6dgfivii\" ], \"unseal_keys_hex\": [ \"1dfc78ea232afcf5e804f84367410030cf4c0d64bc1930803456c0933544cc5383\", \"95fa38f0f1c61461e6a5a167e99eab5935d35d54b9de6f5dbb1b2fc158d10dcd8b\", \"75c570e8df358befe9637e164c7418915f38f2da3b8cd7959207493ad8319d1912\", \"02eb7aa0befe1a89970abad31f41422a127002cd8fad61584a75a98232dfc2c1f4\", \"a69ac53341c91144789b791a213e6c81af3b689e008d78b7d8a567e9d81f8af8a2\" ], \"unseal_shares\": 5, \"unseal_threshold\": 3, \"recovery_keys_b64\": [], \"recovery_keys_hex\": [], \"recovery_keys_shares\": 5, \"recovery_keys_threshold\": 3, \"root_token\": \"s.80Mpm0OmxlXzoSxZB2MMPcNu\" } Export the following variables: export VAULT_TOKEN=$(cat vault-credentials.json | jq .root_token -r) export VAULT_ADDR=https://vault.$DOMAIN Unseal Vault using the keys obtained with the previous command: curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[0])\\\" }\" curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[1])\\\" }\" curl --request PUT \"$VAULT_ADDR/v1/sys/unseal\" -k --header 'Content-Type: application/json' --data-raw \"{\\\"key\\\": \\\"$(cat vault-credentials.json | jq -r .unseal_keys_hex[2])\\\" }\" Vault must be provisioned with some resources (authentication methods, policies and secret engines). That can be achieved by running the ca-provision.sh script. Vault will be provisioned with 4 Root CAs, 1 Special CA (Lamassu-DMS-Enroller) AppRole authentication method and one role and policy for each service or container that needs to exchange data with it. cd config/vault/provision/ ./provisioner.sh cd ../../../ Get RoleID and SecretID for each service and set those values in the empty fields of the .docker-compose.yml file. export CA_VAULT_ROLEID=$(curl -k --header \"X-Vault-Token: ${VAULT_TOKEN}\" ${VAULT_ADDR}/v1/auth/approle/role/lamassu-ca-role/role-id | jq -r .data.role_id ) export CA_VAULT_SECRETID=$(curl -k --header \"X-Vault-Token: ${VAULT_TOKEN}\" --request POST ${VAULT_ADDR}/v1/auth/approle/role/lamassu-ca-role/secret-id | jq -r .data.secret_id) # Set RoleID and SecretID in docker-compose.yml file sed -i 's/<LAMASSU_CA_VAULT_ROLE_ID>/'$CA_VAULT_ROLEID'/g' docker-compose.yml sed -i 's/<LAMASSU_CA_VAULT_SECRET_ID>/'$CA_VAULT_SECRETID'/g' docker-compose.yml Configure the Device Manager: The Device Manage has a configurable variable that deteremines when a device can renew (also known as reenroll) its certificate. By default the reenrollment process can only be done 30 days prior to the cert's expiratio time. This value can be changed by modifying the DEVICE_MANAGER_MINIMUM_REENROLL_DAYS variable located in the .env file. Start the remaining services: docker-compose up -d Configure the Default DMS First, authenticate against Keycloak: export AUTH_ADDR=auth.$DOMAIN export TOKEN=$(curl -k --location --request POST \"https://$AUTH_ADDR/auth/realms/lamassu/protocol/openid-connect/token\" --header 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'grant_type=password' --data-urlencode 'client_id=frontend' --data-urlencode 'username=enroller' --data-urlencode 'password=enroller' |jq -r .access_token) Then, register a new DMS named Lamassu-Default-DMS: Note: while registering new DMS instances with non admin users, it is necessary to register the DMS using the user's username as the common name, otherwise, the user won't see its DMSs export ENROLL_ADDR=$DOMAIN/api/dmsenroller export DMS_REGISTER_RESPONSE=$(curl -k --location --request POST \"https://$ENROLL_ADDR/v1/Lamassu-Default-DMS/form\" --header \"Authorization: Bearer ${TOKEN}\" --header 'Content-Type: application/json' --data-raw \"{\\\"url\\\":\\\"https://${DOMAIN}:5000\\\", \\\" subject\\\":{ \\\"common_name\\\": \\\"Lamassu-Default-DMS\\\",\\\"country\\\": \\\"\\\",\\\"locality\\\": \\\"\\\",\\\"organization\\\": \\\"\\\",\\\"organization_unit\\\": \\\"\\\",\\\"state\\\": \\\"\\\"},\\\"key_metadata\\\":{\\\"bits\\\": 3072,\\\"type\\\": \\\"rsa\\\"}}\") echo $DMS_REGISTER_RESPONSE | jq -r .priv_key | sed 's/\\\\n/\\n/g' | sed -Ez '$ s/\\n+$//' | base64 -d > lamassu-default-dms/config/dms.key export DMS_ID=$(echo $DMS_REGISTER_RESPONSE | jq -r .dms.id) 3. Enroll the new DMS curl -k --location --request PUT \"https://$ENROLL_ADDR/v1/$DMS_ID\" --header \"Authorization: Bearer $TOKEN\" --header 'Content-Type: application/json' --data-raw '{\"status\": \"APPROVED\"}' 4. Get issued DMS Cert curl -k --location --request GET \"https://$ENROLL_ADDR/v1/$DMS_ID/crt\" --header \"Authorization: Bearer $TOKEN\" | base64 -d > lamassu-default-dms/config/dms.crt And finally, start the DMS \"server\": docker-compose rm -s -f dms-default docker-compose up -d dms-default","title":"Manual Setup"},{"location":"lamassu-compose/#using-the-apis","text":"The main 3 Open API documentation can be found on the following urls: https://dev.lamassu.io/api/ca/v1/docs/ https://dev.lamassu.io/api/dmsenroller/v1/docs/ https://dev.lamassu.io/api/devmanager/v1/docs/ \u26a0\ufe0f The following endpoints defined in the Lamassu Device Manager Api specification are not correctly defined due to the limitations imposed by the Open API 3.0 schema. The current specification defines an OIDC security schema (meaining that a valid JWT token must be provided while requesting the API) while the implemented security schema uses the mTLS approach. This issue will be resolved once the specification is Open API 3.1 compliant. The affected endpoints are:","title":"Using the APIs"},{"location":"lamassu-compose/#certificate-rotation","text":"By default, all self-signed certificates (both upstream and downstream) have a lifespan of 365 days. At that point it will be necesary to regenerate the expired certificates: Regenerate the certificates: cd tls-certificates ./gen-upstream-certs.sh ./gen-downstream-certs.sh cd .. Reboot all services: docker-compose down docker-compose up -d","title":"Certificate rotation"},{"location":"ocsp/","text":"OCSP Protocol OpenSSL Go Method 1 - GET request OCSP_REQUEST=$(openssl ocsp -CAfile Lamassu-Root-CA3-ECC384.crt -issuer Lamassu-Root-CA3-ECC384.crt -cert device-testrsa.crt -reqout - | base64 -w 0) OCSP_SERVER=http://dev-lamassu.zpd.ikerlan.es:9098 curl --location --request GET \"$OCSP_SERVER/$OCSP_REQUEST\" > ocspresponse.der openssl ocsp -respin ocspresponse.der -VAfile ../../lamassu/lamassu.crt -resp_text Method 2 - POST request","title":"OCSP Protocol"},{"location":"ocsp/#ocsp-protocol","text":"OpenSSL Go Method 1 - GET request OCSP_REQUEST=$(openssl ocsp -CAfile Lamassu-Root-CA3-ECC384.crt -issuer Lamassu-Root-CA3-ECC384.crt -cert device-testrsa.crt -reqout - | base64 -w 0) OCSP_SERVER=http://dev-lamassu.zpd.ikerlan.es:9098 curl --location --request GET \"$OCSP_SERVER/$OCSP_REQUEST\" > ocspresponse.der openssl ocsp -respin ocspresponse.der -VAfile ../../lamassu/lamassu.crt -resp_text Method 2 - POST request","title":"OCSP Protocol"}]}